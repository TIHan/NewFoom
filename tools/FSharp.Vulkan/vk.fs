// File is generated. Do not modify.
module rec FSharp.Vulkan.Interop

open System
open System.Runtime.InteropServices

#nowarn "9" 

type VkImageLayout =
    /// Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
    | VK_IMAGE_LAYOUT_UNDEFINED = 0u
    /// General layout when image can be used for any kind of access
    | VK_IMAGE_LAYOUT_GENERAL = 1u
    /// Optimal layout when image is only used for color attachment read/write
    | VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2u
    /// Optimal layout when image is only used for depth/stencil attachment read/write
    | VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3u
    /// Optimal layout when image is used for read only depth/stencil attachment and shader access
    | VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4u
    /// Optimal layout when image is used for read only shader access
    | VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5u
    /// Optimal layout when image is used only as source of transfer operations
    | VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6u
    /// Optimal layout when image is used only as destination of transfer operations
    | VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7u
    /// Initial layout used when the data is populated by the CPU
    | VK_IMAGE_LAYOUT_PREINITIALIZED = 8u
    | VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002u
    | VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000u
    | VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000u
    | VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001u
    | VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003u
    | VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000u

type VkAttachmentLoadOp =
    | VK_ATTACHMENT_LOAD_OP_LOAD = 0u
    | VK_ATTACHMENT_LOAD_OP_CLEAR = 1u
    | VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2u

type VkAttachmentStoreOp =
    | VK_ATTACHMENT_STORE_OP_STORE = 0u
    | VK_ATTACHMENT_STORE_OP_DONT_CARE = 1u

type VkImageType =
    | VK_IMAGE_TYPE_1D = 0u
    | VK_IMAGE_TYPE_2D = 1u
    | VK_IMAGE_TYPE_3D = 2u

type VkImageTiling =
    | VK_IMAGE_TILING_OPTIMAL = 0u
    | VK_IMAGE_TILING_LINEAR = 1u
    | VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000u

type VkImageViewType =
    | VK_IMAGE_VIEW_TYPE_1D = 0u
    | VK_IMAGE_VIEW_TYPE_2D = 1u
    | VK_IMAGE_VIEW_TYPE_3D = 2u
    | VK_IMAGE_VIEW_TYPE_CUBE = 3u
    | VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4u
    | VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5u
    | VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6u

type VkCommandBufferLevel =
    | VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0u
    | VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1u

type VkComponentSwizzle =
    | VK_COMPONENT_SWIZZLE_IDENTITY = 0u
    | VK_COMPONENT_SWIZZLE_ZERO = 1u
    | VK_COMPONENT_SWIZZLE_ONE = 2u
    | VK_COMPONENT_SWIZZLE_R = 3u
    | VK_COMPONENT_SWIZZLE_G = 4u
    | VK_COMPONENT_SWIZZLE_B = 5u
    | VK_COMPONENT_SWIZZLE_A = 6u

type VkDescriptorType =
    | VK_DESCRIPTOR_TYPE_SAMPLER = 0u
    | VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1u
    | VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2u
    | VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3u
    | VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4u
    | VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5u
    | VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6u
    | VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7u
    | VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8u
    | VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9u
    | VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10u
    | VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000u
    | VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000u

type VkQueryType =
    | VK_QUERY_TYPE_OCCLUSION = 0u
    /// Optional
    | VK_QUERY_TYPE_PIPELINE_STATISTICS = 1u
    | VK_QUERY_TYPE_TIMESTAMP = 2u
    | VK_QUERY_TYPE_RESERVED_8 = 1000023008u
    | VK_QUERY_TYPE_RESERVED_4 = 1000024004u
    | VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004u
    | VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000u
    | VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000u

type VkBorderColor =
    | VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0u
    | VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1u
    | VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2u
    | VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3u
    | VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4u
    | VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5u

type VkPipelineBindPoint =
    | VK_PIPELINE_BIND_POINT_GRAPHICS = 0u
    | VK_PIPELINE_BIND_POINT_COMPUTE = 1u
    | VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000u

type VkPipelineCacheHeaderVersion =
    | VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1u

type VkPrimitiveTopology =
    | VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0u
    | VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1u
    | VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5u
    | VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6u
    | VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9u
    | VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10u

type VkSharingMode =
    | VK_SHARING_MODE_EXCLUSIVE = 0u
    | VK_SHARING_MODE_CONCURRENT = 1u

type VkIndexType =
    | VK_INDEX_TYPE_UINT16 = 0u
    | VK_INDEX_TYPE_UINT32 = 1u
    | VK_INDEX_TYPE_NONE_NV = 1000165000u
    | VK_INDEX_TYPE_UINT8_EXT = 1000265000u

type VkFilter =
    | VK_FILTER_NEAREST = 0u
    | VK_FILTER_LINEAR = 1u
    | VK_FILTER_CUBIC_IMG = 1000015000u

type VkSamplerMipmapMode =
    /// Choose nearest mip level
    | VK_SAMPLER_MIPMAP_MODE_NEAREST = 0u
    /// Linear filter between mip levels
    | VK_SAMPLER_MIPMAP_MODE_LINEAR = 1u

type VkSamplerAddressMode =
    | VK_SAMPLER_ADDRESS_MODE_REPEAT = 0u
    | VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1u
    | VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2u
    | VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3u
    /// Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and does not have a suffix. This is a special case, and should not be repeated
    | VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4u

type VkCompareOp =
    | VK_COMPARE_OP_NEVER = 0u
    | VK_COMPARE_OP_LESS = 1u
    | VK_COMPARE_OP_EQUAL = 2u
    | VK_COMPARE_OP_LESS_OR_EQUAL = 3u
    | VK_COMPARE_OP_GREATER = 4u
    | VK_COMPARE_OP_NOT_EQUAL = 5u
    | VK_COMPARE_OP_GREATER_OR_EQUAL = 6u
    | VK_COMPARE_OP_ALWAYS = 7u

type VkPolygonMode =
    | VK_POLYGON_MODE_FILL = 0u
    | VK_POLYGON_MODE_LINE = 1u
    | VK_POLYGON_MODE_POINT = 2u
    | VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000u

[<Flags>]
type VkCullModeFlagBits =
    | VK_CULL_MODE_NONE = 0u
    | VK_CULL_MODE_FRONT_BIT = 1u
    | VK_CULL_MODE_BACK_BIT = 2u
    | VK_CULL_MODE_FRONT_AND_BACK = 3u

type VkFrontFace =
    | VK_FRONT_FACE_COUNTER_CLOCKWISE = 0u
    | VK_FRONT_FACE_CLOCKWISE = 1u

type VkBlendFactor =
    | VK_BLEND_FACTOR_ZERO = 0u
    | VK_BLEND_FACTOR_ONE = 1u
    | VK_BLEND_FACTOR_SRC_COLOR = 2u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3u
    | VK_BLEND_FACTOR_DST_COLOR = 4u
    | VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5u
    | VK_BLEND_FACTOR_SRC_ALPHA = 6u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7u
    | VK_BLEND_FACTOR_DST_ALPHA = 8u
    | VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9u
    | VK_BLEND_FACTOR_CONSTANT_COLOR = 10u
    | VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11u
    | VK_BLEND_FACTOR_CONSTANT_ALPHA = 12u
    | VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13u
    | VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14u
    | VK_BLEND_FACTOR_SRC1_COLOR = 15u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16u
    | VK_BLEND_FACTOR_SRC1_ALPHA = 17u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18u

type VkBlendOp =
    | VK_BLEND_OP_ADD = 0u
    | VK_BLEND_OP_SUBTRACT = 1u
    | VK_BLEND_OP_REVERSE_SUBTRACT = 2u
    | VK_BLEND_OP_MIN = 3u
    | VK_BLEND_OP_MAX = 4u
    | VK_BLEND_OP_ZERO_EXT = 1000148000u
    | VK_BLEND_OP_SRC_EXT = 1000148001u
    | VK_BLEND_OP_DST_EXT = 1000148002u
    | VK_BLEND_OP_SRC_OVER_EXT = 1000148003u
    | VK_BLEND_OP_DST_OVER_EXT = 1000148004u
    | VK_BLEND_OP_SRC_IN_EXT = 1000148005u
    | VK_BLEND_OP_DST_IN_EXT = 1000148006u
    | VK_BLEND_OP_SRC_OUT_EXT = 1000148007u
    | VK_BLEND_OP_DST_OUT_EXT = 1000148008u
    | VK_BLEND_OP_SRC_ATOP_EXT = 1000148009u
    | VK_BLEND_OP_DST_ATOP_EXT = 1000148010u
    | VK_BLEND_OP_XOR_EXT = 1000148011u
    | VK_BLEND_OP_MULTIPLY_EXT = 1000148012u
    | VK_BLEND_OP_SCREEN_EXT = 1000148013u
    | VK_BLEND_OP_OVERLAY_EXT = 1000148014u
    | VK_BLEND_OP_DARKEN_EXT = 1000148015u
    | VK_BLEND_OP_LIGHTEN_EXT = 1000148016u
    | VK_BLEND_OP_COLORDODGE_EXT = 1000148017u
    | VK_BLEND_OP_COLORBURN_EXT = 1000148018u
    | VK_BLEND_OP_HARDLIGHT_EXT = 1000148019u
    | VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020u
    | VK_BLEND_OP_DIFFERENCE_EXT = 1000148021u
    | VK_BLEND_OP_EXCLUSION_EXT = 1000148022u
    | VK_BLEND_OP_INVERT_EXT = 1000148023u
    | VK_BLEND_OP_INVERT_RGB_EXT = 1000148024u
    | VK_BLEND_OP_LINEARDODGE_EXT = 1000148025u
    | VK_BLEND_OP_LINEARBURN_EXT = 1000148026u
    | VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027u
    | VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028u
    | VK_BLEND_OP_PINLIGHT_EXT = 1000148029u
    | VK_BLEND_OP_HARDMIX_EXT = 1000148030u
    | VK_BLEND_OP_HSL_HUE_EXT = 1000148031u
    | VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032u
    | VK_BLEND_OP_HSL_COLOR_EXT = 1000148033u
    | VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034u
    | VK_BLEND_OP_PLUS_EXT = 1000148035u
    | VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036u
    | VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037u
    | VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038u
    | VK_BLEND_OP_MINUS_EXT = 1000148039u
    | VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040u
    | VK_BLEND_OP_CONTRAST_EXT = 1000148041u
    | VK_BLEND_OP_INVERT_OVG_EXT = 1000148042u
    | VK_BLEND_OP_RED_EXT = 1000148043u
    | VK_BLEND_OP_GREEN_EXT = 1000148044u
    | VK_BLEND_OP_BLUE_EXT = 1000148045u

type VkStencilOp =
    | VK_STENCIL_OP_KEEP = 0u
    | VK_STENCIL_OP_ZERO = 1u
    | VK_STENCIL_OP_REPLACE = 2u
    | VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3u
    | VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4u
    | VK_STENCIL_OP_INVERT = 5u
    | VK_STENCIL_OP_INCREMENT_AND_WRAP = 6u
    | VK_STENCIL_OP_DECREMENT_AND_WRAP = 7u

type VkLogicOp =
    | VK_LOGIC_OP_CLEAR = 0u
    | VK_LOGIC_OP_AND = 1u
    | VK_LOGIC_OP_AND_REVERSE = 2u
    | VK_LOGIC_OP_COPY = 3u
    | VK_LOGIC_OP_AND_INVERTED = 4u
    | VK_LOGIC_OP_NO_OP = 5u
    | VK_LOGIC_OP_XOR = 6u
    | VK_LOGIC_OP_OR = 7u
    | VK_LOGIC_OP_NOR = 8u
    | VK_LOGIC_OP_EQUIVALENT = 9u
    | VK_LOGIC_OP_INVERT = 10u
    | VK_LOGIC_OP_OR_REVERSE = 11u
    | VK_LOGIC_OP_COPY_INVERTED = 12u
    | VK_LOGIC_OP_OR_INVERTED = 13u
    | VK_LOGIC_OP_NAND = 14u
    | VK_LOGIC_OP_SET = 15u

type VkInternalAllocationType =
    | VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0u

type VkSystemAllocationScope =
    | VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0u
    | VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1u
    | VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2u
    | VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3u
    | VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4u

type VkPhysicalDeviceType =
    | VK_PHYSICAL_DEVICE_TYPE_OTHER = 0u
    | VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1u
    | VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2u
    | VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3u
    | VK_PHYSICAL_DEVICE_TYPE_CPU = 4u

type VkVertexInputRate =
    | VK_VERTEX_INPUT_RATE_VERTEX = 0u
    | VK_VERTEX_INPUT_RATE_INSTANCE = 1u

/// Vulkan format definitions
type VkFormat =
    | VK_FORMAT_UNDEFINED = 0u
    | VK_FORMAT_R4G4_UNORM_PACK8 = 1u
    | VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2u
    | VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3u
    | VK_FORMAT_R5G6B5_UNORM_PACK16 = 4u
    | VK_FORMAT_B5G6R5_UNORM_PACK16 = 5u
    | VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6u
    | VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7u
    | VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8u
    | VK_FORMAT_R8_UNORM = 9u
    | VK_FORMAT_R8_SNORM = 10u
    | VK_FORMAT_R8_USCALED = 11u
    | VK_FORMAT_R8_SSCALED = 12u
    | VK_FORMAT_R8_UINT = 13u
    | VK_FORMAT_R8_SINT = 14u
    | VK_FORMAT_R8_SRGB = 15u
    | VK_FORMAT_R8G8_UNORM = 16u
    | VK_FORMAT_R8G8_SNORM = 17u
    | VK_FORMAT_R8G8_USCALED = 18u
    | VK_FORMAT_R8G8_SSCALED = 19u
    | VK_FORMAT_R8G8_UINT = 20u
    | VK_FORMAT_R8G8_SINT = 21u
    | VK_FORMAT_R8G8_SRGB = 22u
    | VK_FORMAT_R8G8B8_UNORM = 23u
    | VK_FORMAT_R8G8B8_SNORM = 24u
    | VK_FORMAT_R8G8B8_USCALED = 25u
    | VK_FORMAT_R8G8B8_SSCALED = 26u
    | VK_FORMAT_R8G8B8_UINT = 27u
    | VK_FORMAT_R8G8B8_SINT = 28u
    | VK_FORMAT_R8G8B8_SRGB = 29u
    | VK_FORMAT_B8G8R8_UNORM = 30u
    | VK_FORMAT_B8G8R8_SNORM = 31u
    | VK_FORMAT_B8G8R8_USCALED = 32u
    | VK_FORMAT_B8G8R8_SSCALED = 33u
    | VK_FORMAT_B8G8R8_UINT = 34u
    | VK_FORMAT_B8G8R8_SINT = 35u
    | VK_FORMAT_B8G8R8_SRGB = 36u
    | VK_FORMAT_R8G8B8A8_UNORM = 37u
    | VK_FORMAT_R8G8B8A8_SNORM = 38u
    | VK_FORMAT_R8G8B8A8_USCALED = 39u
    | VK_FORMAT_R8G8B8A8_SSCALED = 40u
    | VK_FORMAT_R8G8B8A8_UINT = 41u
    | VK_FORMAT_R8G8B8A8_SINT = 42u
    | VK_FORMAT_R8G8B8A8_SRGB = 43u
    | VK_FORMAT_B8G8R8A8_UNORM = 44u
    | VK_FORMAT_B8G8R8A8_SNORM = 45u
    | VK_FORMAT_B8G8R8A8_USCALED = 46u
    | VK_FORMAT_B8G8R8A8_SSCALED = 47u
    | VK_FORMAT_B8G8R8A8_UINT = 48u
    | VK_FORMAT_B8G8R8A8_SINT = 49u
    | VK_FORMAT_B8G8R8A8_SRGB = 50u
    | VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51u
    | VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52u
    | VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53u
    | VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54u
    | VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55u
    | VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56u
    | VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57u
    | VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58u
    | VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59u
    | VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60u
    | VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61u
    | VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62u
    | VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63u
    | VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64u
    | VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65u
    | VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66u
    | VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67u
    | VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68u
    | VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69u
    | VK_FORMAT_R16_UNORM = 70u
    | VK_FORMAT_R16_SNORM = 71u
    | VK_FORMAT_R16_USCALED = 72u
    | VK_FORMAT_R16_SSCALED = 73u
    | VK_FORMAT_R16_UINT = 74u
    | VK_FORMAT_R16_SINT = 75u
    | VK_FORMAT_R16_SFLOAT = 76u
    | VK_FORMAT_R16G16_UNORM = 77u
    | VK_FORMAT_R16G16_SNORM = 78u
    | VK_FORMAT_R16G16_USCALED = 79u
    | VK_FORMAT_R16G16_SSCALED = 80u
    | VK_FORMAT_R16G16_UINT = 81u
    | VK_FORMAT_R16G16_SINT = 82u
    | VK_FORMAT_R16G16_SFLOAT = 83u
    | VK_FORMAT_R16G16B16_UNORM = 84u
    | VK_FORMAT_R16G16B16_SNORM = 85u
    | VK_FORMAT_R16G16B16_USCALED = 86u
    | VK_FORMAT_R16G16B16_SSCALED = 87u
    | VK_FORMAT_R16G16B16_UINT = 88u
    | VK_FORMAT_R16G16B16_SINT = 89u
    | VK_FORMAT_R16G16B16_SFLOAT = 90u
    | VK_FORMAT_R16G16B16A16_UNORM = 91u
    | VK_FORMAT_R16G16B16A16_SNORM = 92u
    | VK_FORMAT_R16G16B16A16_USCALED = 93u
    | VK_FORMAT_R16G16B16A16_SSCALED = 94u
    | VK_FORMAT_R16G16B16A16_UINT = 95u
    | VK_FORMAT_R16G16B16A16_SINT = 96u
    | VK_FORMAT_R16G16B16A16_SFLOAT = 97u
    | VK_FORMAT_R32_UINT = 98u
    | VK_FORMAT_R32_SINT = 99u
    | VK_FORMAT_R32_SFLOAT = 100u
    | VK_FORMAT_R32G32_UINT = 101u
    | VK_FORMAT_R32G32_SINT = 102u
    | VK_FORMAT_R32G32_SFLOAT = 103u
    | VK_FORMAT_R32G32B32_UINT = 104u
    | VK_FORMAT_R32G32B32_SINT = 105u
    | VK_FORMAT_R32G32B32_SFLOAT = 106u
    | VK_FORMAT_R32G32B32A32_UINT = 107u
    | VK_FORMAT_R32G32B32A32_SINT = 108u
    | VK_FORMAT_R32G32B32A32_SFLOAT = 109u
    | VK_FORMAT_R64_UINT = 110u
    | VK_FORMAT_R64_SINT = 111u
    | VK_FORMAT_R64_SFLOAT = 112u
    | VK_FORMAT_R64G64_UINT = 113u
    | VK_FORMAT_R64G64_SINT = 114u
    | VK_FORMAT_R64G64_SFLOAT = 115u
    | VK_FORMAT_R64G64B64_UINT = 116u
    | VK_FORMAT_R64G64B64_SINT = 117u
    | VK_FORMAT_R64G64B64_SFLOAT = 118u
    | VK_FORMAT_R64G64B64A64_UINT = 119u
    | VK_FORMAT_R64G64B64A64_SINT = 120u
    | VK_FORMAT_R64G64B64A64_SFLOAT = 121u
    | VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122u
    | VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123u
    | VK_FORMAT_D16_UNORM = 124u
    | VK_FORMAT_X8_D24_UNORM_PACK32 = 125u
    | VK_FORMAT_D32_SFLOAT = 126u
    | VK_FORMAT_S8_UINT = 127u
    | VK_FORMAT_D16_UNORM_S8_UINT = 128u
    | VK_FORMAT_D24_UNORM_S8_UINT = 129u
    | VK_FORMAT_D32_SFLOAT_S8_UINT = 130u
    | VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131u
    | VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132u
    | VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133u
    | VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134u
    | VK_FORMAT_BC2_UNORM_BLOCK = 135u
    | VK_FORMAT_BC2_SRGB_BLOCK = 136u
    | VK_FORMAT_BC3_UNORM_BLOCK = 137u
    | VK_FORMAT_BC3_SRGB_BLOCK = 138u
    | VK_FORMAT_BC4_UNORM_BLOCK = 139u
    | VK_FORMAT_BC4_SNORM_BLOCK = 140u
    | VK_FORMAT_BC5_UNORM_BLOCK = 141u
    | VK_FORMAT_BC5_SNORM_BLOCK = 142u
    | VK_FORMAT_BC6H_UFLOAT_BLOCK = 143u
    | VK_FORMAT_BC6H_SFLOAT_BLOCK = 144u
    | VK_FORMAT_BC7_UNORM_BLOCK = 145u
    | VK_FORMAT_BC7_SRGB_BLOCK = 146u
    | VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147u
    | VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148u
    | VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149u
    | VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150u
    | VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151u
    | VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152u
    | VK_FORMAT_EAC_R11_UNORM_BLOCK = 153u
    | VK_FORMAT_EAC_R11_SNORM_BLOCK = 154u
    | VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155u
    | VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156u
    | VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157u
    | VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158u
    | VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159u
    | VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160u
    | VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161u
    | VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162u
    | VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163u
    | VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164u
    | VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165u
    | VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166u
    | VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167u
    | VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168u
    | VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169u
    | VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170u
    | VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171u
    | VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172u
    | VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173u
    | VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174u
    | VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175u
    | VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176u
    | VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177u
    | VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178u
    | VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179u
    | VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180u
    | VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181u
    | VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182u
    | VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183u
    | VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184u
    | VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000u
    | VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001u
    | VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002u
    | VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003u
    | VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004u
    | VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005u
    | VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006u
    | VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007u
    | VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000u
    | VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001u
    | VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002u
    | VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003u
    | VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004u
    | VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005u
    | VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006u
    | VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007u
    | VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008u
    | VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009u
    | VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010u
    | VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011u
    | VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012u
    | VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013u
    | VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000u
    | VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001u
    | VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002u
    | VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003u
    | VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004u
    | VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005u
    | VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006u
    | VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007u
    | VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008u
    | VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009u
    | VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010u
    | VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012u
    | VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014u
    | VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016u
    | VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017u
    | VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018u
    | VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019u
    | VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020u
    | VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022u
    | VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024u
    | VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026u
    | VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027u
    | VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028u
    | VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029u
    | VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030u
    | VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031u
    | VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032u
    | VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033u

/// Structure type enumerant
type VkStructureType =
    | VK_STRUCTURE_TYPE_APPLICATION_INFO = 0u
    | VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1u
    | VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2u
    | VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3u
    | VK_STRUCTURE_TYPE_SUBMIT_INFO = 4u
    | VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5u
    | VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6u
    | VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7u
    | VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8u
    | VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9u
    | VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10u
    | VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11u
    | VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12u
    | VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13u
    | VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15u
    | VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16u
    | VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17u
    | VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18u
    | VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19u
    | VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20u
    | VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23u
    | VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24u
    | VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25u
    | VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26u
    | VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27u
    | VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28u
    | VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29u
    | VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30u
    | VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34u
    | VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35u
    | VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37u
    | VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38u
    | VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42u
    | VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43u
    | VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44u
    | VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45u
    | VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46u
    /// Reserved for internal use by the loader, layers, and ICDs
    | VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47u
    /// Reserved for internal use by the loader, layers, and ICDs
    | VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000u
    | VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001u
    | VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000u
    | VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001u
    | VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000u
    | VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000u
    | VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000u
    | VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000u
    | VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000u
    | VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000u
    | VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID = 1000010000u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002u
    | VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000u
    | VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000u
    | VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001u
    | VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002u
    | VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000u
    | VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001u
    | VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000u
    | VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000u
    | VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000u
    | VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001u
    | VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001u
    | VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002u
    | VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004u
    | VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006u
    | VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008u
    | VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007u
    | VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009u
    | VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012u
    | VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014u
    | VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000u
    | VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000u
    | VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002u
    | VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001u
    | VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002u
    | VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000u
    | VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001u
    | VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002u
    | VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000u
    | VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001u
    | VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000u
    | VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000u
    | VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001u
    | VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002u
    | VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003u
    | VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000u
    | VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001u
    | VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000u
    | VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000u
    | VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000u
    | VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001u
    | VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002u
    | VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003u
    | VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004u
    | VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000u
    | VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000u
    | VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000u
    | VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001u
    | VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003u
    | VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000u
    | VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001u
    | VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002u
    | VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003u
    | VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000u
    | VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001u
    | VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002u
    | VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003u
    | VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004u
    | VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005u
    | VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006u
    | VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000u
    | VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001u
    | VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000u
    | VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000u
    | VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001u
    | VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002u
    | VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000u
    | VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000u
    | VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002u
    | VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000u
    | VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001u
    | VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000u
    | VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000u
    | VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001u
    | VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002u
    | VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003u
    | VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004u
    | VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000u
    | VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000u
    | VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000u
    | VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004u
    | VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000u
    | VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001u
    | VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002u
    | VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003u
    | VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004u
    | VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000u
    | VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001u
    | VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003u
    | VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000u
    | VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001u
    | VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003u
    | VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004u
    | VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002u
    | VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003u
    | VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000u
    | VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001u
    | VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002u
    | VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003u
    | VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004u
    | VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001u
    | VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002u
    | VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000u
    | VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002u
    | VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005u
    | VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001u
    | VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000u
    | VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002u
    | VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003u
    | VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004u
    | VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005u
    | VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000u
    | VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005u
    | VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000u
    | VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001u
    | VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003u
    | VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004u
    | VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005u
    | VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006u
    | VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007u
    | VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009u
    | VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011u
    | VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000u
    | VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000u
    | VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001u
    | VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000u
    | VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000u
    | VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000u
    | VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000u
    | VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000u
    | VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002u
    | VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000u
    | VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000u
    | VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002u
    | VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000u
    | VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000u
    | VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000u
    | VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001u
    | VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002u
    | VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003u
    | VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004u
    | VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000u
    | VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001u
    | VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000u
    | VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001u
    | VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000u
    | VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000u
    | VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001u
    | VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000u
    | VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001u
    | VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002u
    | VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000u
    | VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000u
    | VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000u
    | VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000u
    | VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000u
    | VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001u
    | VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002u
    | VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000u
    | VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001u

type VkSubpassContents =
    | VK_SUBPASS_CONTENTS_INLINE = 0u
    | VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1u

/// API result codes
type VkResult =
    /// Command completed successfully
    | VK_SUCCESS = 0u
    /// A fence or query has not yet completed
    | VK_NOT_READY = 1u
    /// A wait operation has not completed in the specified time
    | VK_TIMEOUT = 2u
    /// An event is signaled
    | VK_EVENT_SET = 3u
    /// An event is unsignaled
    | VK_EVENT_RESET = 4u
    /// A return array was too small for the result
    | VK_INCOMPLETE = 5u
    | VK_SUBOPTIMAL_KHR = 1000001003u
    | VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = 3294712296u
    | VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = 3294723296u
    | VK_ERROR_NOT_PERMITTED_EXT = 3294793295u
    | VK_ERROR_FRAGMENTATION_EXT = 3294806296u
    | VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = 3294809296u
    | VK_ERROR_INVALID_EXTERNAL_HANDLE = 3294895293u
    | VK_ERROR_OUT_OF_POOL_MEMORY = 3294898296u
    | VK_ERROR_INVALID_SHADER_NV = 3294955296u
    | VK_ERROR_VALIDATION_FAILED_EXT = 3294956295u
    | VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = 3294964295u
    | VK_ERROR_OUT_OF_DATE_KHR = 3294966292u
    | VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = 3294967295u
    | VK_ERROR_SURFACE_LOST_KHR = 3294967296u
    /// A requested pool allocation has failed due to fragmentation of the pool's memory
    | VK_ERROR_FRAGMENTED_POOL = 4294967284u
    /// Requested format is not supported on this device
    | VK_ERROR_FORMAT_NOT_SUPPORTED = 4294967285u
    /// Too many objects of the type have already been created
    | VK_ERROR_TOO_MANY_OBJECTS = 4294967286u
    /// Unable to find a Vulkan driver
    | VK_ERROR_INCOMPATIBLE_DRIVER = 4294967287u
    /// Requested feature is not available on this device
    | VK_ERROR_FEATURE_NOT_PRESENT = 4294967288u
    /// Extension specified does not exist
    | VK_ERROR_EXTENSION_NOT_PRESENT = 4294967289u
    /// Layer specified does not exist
    | VK_ERROR_LAYER_NOT_PRESENT = 4294967290u
    /// Mapping of a memory object has failed
    | VK_ERROR_MEMORY_MAP_FAILED = 4294967291u
    /// The logical device has been lost. See <<devsandqueues-lost-device>>
    | VK_ERROR_DEVICE_LOST = 4294967292u
    /// Initialization of a object has failed
    | VK_ERROR_INITIALIZATION_FAILED = 4294967293u
    /// A device memory allocation has failed
    | VK_ERROR_OUT_OF_DEVICE_MEMORY = 4294967294u
    /// A host memory allocation has failed
    | VK_ERROR_OUT_OF_HOST_MEMORY = 4294967295u

type VkDynamicState =
    | VK_DYNAMIC_STATE_VIEWPORT = 0u
    | VK_DYNAMIC_STATE_SCISSOR = 1u
    | VK_DYNAMIC_STATE_LINE_WIDTH = 2u
    | VK_DYNAMIC_STATE_DEPTH_BIAS = 3u
    | VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4u
    | VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5u
    | VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6u
    | VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7u
    | VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8u
    | VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000u
    | VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000u
    | VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000u
    | VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004u
    | VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006u
    | VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001u
    | VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000u

type VkDescriptorUpdateTemplateType =
    /// Create descriptor update template for descriptor set updates
    | VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0u
    /// Create descriptor update template for pushed descriptor updates
    | VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1u

/// Enums to track objects of various types
type VkObjectType =
    | VK_OBJECT_TYPE_UNKNOWN = 0u
    /// VkInstance
    | VK_OBJECT_TYPE_INSTANCE = 1u
    /// VkPhysicalDevice
    | VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2u
    /// VkDevice
    | VK_OBJECT_TYPE_DEVICE = 3u
    /// VkQueue
    | VK_OBJECT_TYPE_QUEUE = 4u
    /// VkSemaphore
    | VK_OBJECT_TYPE_SEMAPHORE = 5u
    /// VkCommandBuffer
    | VK_OBJECT_TYPE_COMMAND_BUFFER = 6u
    /// VkFence
    | VK_OBJECT_TYPE_FENCE = 7u
    /// VkDeviceMemory
    | VK_OBJECT_TYPE_DEVICE_MEMORY = 8u
    /// VkBuffer
    | VK_OBJECT_TYPE_BUFFER = 9u
    /// VkImage
    | VK_OBJECT_TYPE_IMAGE = 10u
    /// VkEvent
    | VK_OBJECT_TYPE_EVENT = 11u
    /// VkQueryPool
    | VK_OBJECT_TYPE_QUERY_POOL = 12u
    /// VkBufferView
    | VK_OBJECT_TYPE_BUFFER_VIEW = 13u
    /// VkImageView
    | VK_OBJECT_TYPE_IMAGE_VIEW = 14u
    /// VkShaderModule
    | VK_OBJECT_TYPE_SHADER_MODULE = 15u
    /// VkPipelineCache
    | VK_OBJECT_TYPE_PIPELINE_CACHE = 16u
    /// VkPipelineLayout
    | VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17u
    /// VkRenderPass
    | VK_OBJECT_TYPE_RENDER_PASS = 18u
    /// VkPipeline
    | VK_OBJECT_TYPE_PIPELINE = 19u
    /// VkDescriptorSetLayout
    | VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20u
    /// VkSampler
    | VK_OBJECT_TYPE_SAMPLER = 21u
    /// VkDescriptorPool
    | VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22u
    /// VkDescriptorSet
    | VK_OBJECT_TYPE_DESCRIPTOR_SET = 23u
    /// VkFramebuffer
    | VK_OBJECT_TYPE_FRAMEBUFFER = 24u
    /// VkCommandPool
    | VK_OBJECT_TYPE_COMMAND_POOL = 25u
    /// VkSurfaceKHR
    | VK_OBJECT_TYPE_SURFACE_KHR = 1000000000u
    /// VkSwapchainKHR
    | VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000u
    /// VkDisplayKHR
    | VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000u
    /// VkDisplayModeKHR
    | VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001u
    /// VkDebugReportCallbackEXT
    | VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000u
    | VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000u
    /// VkobjectTableNVX
    | VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000u
    /// VkIndirectCommandsLayoutNVX
    | VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001u
    /// VkDebugUtilsMessengerEXT
    | VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000u
    | VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000u
    /// VkValidationCacheEXT
    | VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000u
    | VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000u
    | VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000u

[<Flags>]
type VkQueueFlagBits =
    /// Queue supports graphics operations
    | VK_QUEUE_GRAPHICS_BIT = 1u
    /// Queue supports compute operations
    | VK_QUEUE_COMPUTE_BIT = 2u
    /// Queue supports transfer operations
    | VK_QUEUE_TRANSFER_BIT = 4u
    /// Queue supports sparse resource memory management operations
    | VK_QUEUE_SPARSE_BINDING_BIT = 8u
    /// Queues may support protected operations
    | VK_QUEUE_PROTECTED_BIT = 16u
    | VK_QUEUE_RESERVED_5_BIT_KHR = 32u
    | VK_QUEUE_RESERVED_6_BIT_KHR = 64u

[<Flags>]
type VkRenderPassCreateFlagBits =
    | VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR = 1u
    | VK_RENDER_PASS_RESERVED_BIT_1_QCOM = 2u

[<Flags>]
type VkDeviceQueueCreateFlagBits =
    /// Queue is a protected-capable device queue
    | VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1u

[<Flags>]
type VkMemoryPropertyFlagBits =
    /// If otherwise stated, then allocate memory on device
    | VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1u
    /// Memory is mappable by host
    | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2u
    /// Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
    | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4u
    /// Memory will be cached by the host
    | VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8u
    /// Memory may be allocated by the driver when it is required
    | VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16u
    /// Memory is protected
    | VK_MEMORY_PROPERTY_PROTECTED_BIT = 32u
    | VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64u
    | VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128u

[<Flags>]
type VkMemoryHeapFlagBits =
    /// If set, heap represents device memory
    | VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1u
    /// If set, heap allocations allocate multiple instances by default
    | VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2u

[<Flags>]
type VkAccessFlagBits =
    /// Controls coherency of indirect command reads
    | VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1u
    /// Controls coherency of index reads
    | VK_ACCESS_INDEX_READ_BIT = 2u
    /// Controls coherency of vertex attribute reads
    | VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4u
    /// Controls coherency of uniform buffer reads
    | VK_ACCESS_UNIFORM_READ_BIT = 8u
    /// Controls coherency of input attachment reads
    | VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16u
    /// Controls coherency of shader reads
    | VK_ACCESS_SHADER_READ_BIT = 32u
    /// Controls coherency of shader writes
    | VK_ACCESS_SHADER_WRITE_BIT = 64u
    /// Controls coherency of color attachment reads
    | VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128u
    /// Controls coherency of color attachment writes
    | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256u
    /// Controls coherency of depth/stencil attachment reads
    | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512u
    /// Controls coherency of depth/stencil attachment writes
    | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024u
    /// Controls coherency of transfer reads
    | VK_ACCESS_TRANSFER_READ_BIT = 2048u
    /// Controls coherency of transfer writes
    | VK_ACCESS_TRANSFER_WRITE_BIT = 4096u
    /// Controls coherency of host reads
    | VK_ACCESS_HOST_READ_BIT = 8192u
    /// Controls coherency of host writes
    | VK_ACCESS_HOST_WRITE_BIT = 16384u
    /// Controls coherency of memory reads
    | VK_ACCESS_MEMORY_READ_BIT = 32768u
    /// Controls coherency of memory writes
    | VK_ACCESS_MEMORY_WRITE_BIT = 65536u
    | VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 131072u
    | VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 262144u
    | VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288u
    /// read access flag for reading conditional rendering predicate
    | VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576u
    | VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152u
    | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304u
    | VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608u
    | VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216u
    | VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432u
    | VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864u
    | VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728u
    | VK_ACCESS_RESERVED_28_BIT_KHR = 268435456u
    | VK_ACCESS_RESERVED_29_BIT_KHR = 536870912u
    | VK_ACCESS_RESERVED_30_BIT_KHR = 1073741824u
    | VK_ACCESS_RESERVED_31_BIT_KHR = 2147483648u

[<Flags>]
type VkBufferUsageFlagBits =
    /// Can be used as a source of transfer operations
    | VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1u
    /// Can be used as a destination of transfer operations
    | VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2u
    /// Can be used as TBO
    | VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4u
    /// Can be used as IBO
    | VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8u
    /// Can be used as UBO
    | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16u
    /// Can be used as SSBO
    | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32u
    /// Can be used as source of fixed-function index fetch (index buffer)
    | VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64u
    /// Can be used as source of fixed-function vertex fetch (VBO)
    | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128u
    /// Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
    | VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256u
    /// Specifies the buffer can be used as predicate in conditional rendering
    | VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512u
    | VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024u
    | VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048u
    | VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096u
    | VK_BUFFER_USAGE_RESERVED_13_BIT_KHR = 8192u
    | VK_BUFFER_USAGE_RESERVED_14_BIT_KHR = 16384u
    | VK_BUFFER_USAGE_RESERVED_15_BIT_KHR = 32768u
    | VK_BUFFER_USAGE_RESERVED_16_BIT_KHR = 65536u
    | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072u

[<Flags>]
type VkBufferCreateFlagBits =
    /// Buffer should support sparse backing
    | VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1u
    /// Buffer should support sparse backing with partial residency
    | VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2u
    /// Buffer should support constent data access to physical memory ranges mapped into multiple locations of sparse buffers
    | VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4u
    /// Buffer requires protected memory
    | VK_BUFFER_CREATE_PROTECTED_BIT = 8u
    | VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16u

[<Flags>]
type VkShaderStageFlagBits =
    | VK_SHADER_STAGE_VERTEX_BIT = 1u
    | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2u
    | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4u
    | VK_SHADER_STAGE_GEOMETRY_BIT = 8u
    | VK_SHADER_STAGE_FRAGMENT_BIT = 16u
    | VK_SHADER_STAGE_ALL_GRAPHICS = 31u
    | VK_SHADER_STAGE_COMPUTE_BIT = 32u
    | VK_SHADER_STAGE_TASK_BIT_NV = 64u
    | VK_SHADER_STAGE_MESH_BIT_NV = 128u
    | VK_SHADER_STAGE_RAYGEN_BIT_NV = 256u
    | VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512u
    | VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024u
    | VK_SHADER_STAGE_MISS_BIT_NV = 2048u
    | VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096u
    | VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192u
    | VK_SHADER_STAGE_ALL = 2147483647u

[<Flags>]
type VkImageUsageFlagBits =
    /// Can be used as a source of transfer operations
    | VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1u
    /// Can be used as a destination of transfer operations
    | VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2u
    /// Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | VK_IMAGE_USAGE_SAMPLED_BIT = 4u
    /// Can be used as storage image (STORAGE_IMAGE descriptor type)
    | VK_IMAGE_USAGE_STORAGE_BIT = 8u
    /// Can be used as framebuffer color attachment
    | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16u
    /// Can be used as framebuffer depth/stencil attachment
    | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32u
    /// Image data not needed outside of rendering
    | VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64u
    /// Can be used as framebuffer input attachment
    | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128u
    | VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256u
    | VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512u
    | VK_IMAGE_USAGE_RESERVED_10_BIT_KHR = 1024u
    | VK_IMAGE_USAGE_RESERVED_11_BIT_KHR = 2048u
    | VK_IMAGE_USAGE_RESERVED_12_BIT_KHR = 4096u
    | VK_IMAGE_USAGE_RESERVED_13_BIT_KHR = 8192u
    | VK_IMAGE_USAGE_RESERVED_14_BIT_KHR = 16384u
    | VK_IMAGE_USAGE_RESERVED_15_BIT_KHR = 32768u

[<Flags>]
type VkImageCreateFlagBits =
    /// Image should support sparse backing
    | VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1u
    /// Image should support sparse backing with partial residency
    | VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2u
    /// Image should support constent data access to physical memory ranges mapped into multiple locations of sparse images
    | VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4u
    /// Allows image views to have different format than the base image
    | VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8u
    /// Allows creating image views with cube type from the created image
    | VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16u
    /// The 3D image can be viewed as a 2D or 2D array image
    | VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32u
    /// Allows using VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions when binding memory to the image
    | VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64u
    | VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128u
    | VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256u
    | VK_IMAGE_CREATE_DISJOINT_BIT = 512u
    | VK_IMAGE_CREATE_ALIAS_BIT = 1024u
    /// Image requires protected memory
    | VK_IMAGE_CREATE_PROTECTED_BIT = 2048u
    | VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096u
    | VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192u
    | VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384u

[<Flags>]
type VkImageViewCreateFlagBits =
    | VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1u

[<Flags>]
type VkSamplerCreateFlagBits =
    | VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1u
    | VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2u

[<Flags>]
type VkPipelineCreateFlagBits =
    | VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1u
    | VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2u
    | VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4u
    | VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8u
    | VK_PIPELINE_CREATE_DISPATCH_BASE = 16u
    | VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32u
    | VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64u
    | VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128u

[<Flags>]
type VkPipelineShaderStageCreateFlagBits =
    | VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1u
    | VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2u
    | VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV = 4u

[<Flags>]
type VkColorComponentFlagBits =
    | VK_COLOR_COMPONENT_R_BIT = 1u
    | VK_COLOR_COMPONENT_G_BIT = 2u
    | VK_COLOR_COMPONENT_B_BIT = 4u
    | VK_COLOR_COMPONENT_A_BIT = 8u

[<Flags>]
type VkFenceCreateFlagBits =
    | VK_FENCE_CREATE_SIGNALED_BIT = 1u

[<Flags>]
type VkFormatFeatureFlagBits =
    /// Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1u
    /// Format can be used for storage images (STORAGE_IMAGE descriptor type)
    | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2u
    /// Format supports atomic operations in case it is used for storage images
    | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4u
    /// Format can be used for uniform texel buffers (TBOs)
    | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8u
    /// Format can be used for storage texel buffers (IBOs)
    | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16u
    /// Format supports atomic operations in case it is used for storage texel buffers
    | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32u
    /// Format can be used for vertex buffers (VBOs)
    | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64u
    /// Format can be used for color attachment images
    | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128u
    /// Format supports blending in case it is used for color attachment images
    | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256u
    /// Format can be used for depth/stencil attachment images
    | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512u
    /// Format can be used as the source image of blits with vkCmdBlitImage
    | VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024u
    /// Format can be used as the destination image of blits with vkCmdBlitImage
    | VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048u
    /// Format can be filtered with VK_FILTER_LINEAR when being sampled
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096u
    /// Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192u
    /// Format can be used as the source image of image transfer commands
    | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384u
    /// Format can be used as the destination image of image transfer commands
    | VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768u
    /// Format can be used with min/max reduction filtering
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536u
    /// Format can have midpoint rather than cosited chroma samples
    | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072u
    /// Format can be used with linear filtering whilst color conversion is enabled
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144u
    /// Format can have different chroma, min and mag filters
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152u
    /// Format supports disjoint planes
    | VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304u
    /// Format can have cosited rather than midpoint chroma samples
    | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608u
    | VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216u
    | VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR = 33554432u
    | VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR = 67108864u
    | VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR = 134217728u
    | VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR = 268435456u

[<Flags>]
type VkQueryControlFlagBits =
    /// Require precise results to be collected by the query
    | VK_QUERY_CONTROL_PRECISE_BIT = 1u

[<Flags>]
type VkQueryResultFlagBits =
    /// Results of the queries are written to the destination buffer as 64-bit values
    | VK_QUERY_RESULT_64_BIT = 1u
    /// Results of the queries are waited on before proceeding with the result copy
    | VK_QUERY_RESULT_WAIT_BIT = 2u
    /// Besides the results of the query, the availability of the results is also written
    | VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4u
    /// Copy the partial results of the query even if the final results are not available
    | VK_QUERY_RESULT_PARTIAL_BIT = 8u

[<Flags>]
type VkCommandBufferUsageFlagBits =
    | VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1u
    | VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2u
    /// Command buffer may be submitted/executed more than once simultaneously
    | VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4u

[<Flags>]
type VkQueryPipelineStatisticFlagBits =
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024u

[<Flags>]
type VkImageAspectFlagBits =
    | VK_IMAGE_ASPECT_COLOR_BIT = 1u
    | VK_IMAGE_ASPECT_DEPTH_BIT = 2u
    | VK_IMAGE_ASPECT_STENCIL_BIT = 4u
    | VK_IMAGE_ASPECT_METADATA_BIT = 8u
    | VK_IMAGE_ASPECT_PLANE_0_BIT = 16u
    | VK_IMAGE_ASPECT_PLANE_1_BIT = 32u
    | VK_IMAGE_ASPECT_PLANE_2_BIT = 64u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024u

[<Flags>]
type VkSparseImageFormatFlagBits =
    /// Image uses a single mip tail region for all array layers
    | VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1u
    /// Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
    | VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2u
    /// Image uses a non-standard sparse image block dimensions
    | VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4u

[<Flags>]
type VkSparseMemoryBindFlagBits =
    /// Operation binds resource metadata to memory
    | VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1u

[<Flags>]
type VkPipelineStageFlagBits =
    /// Before subsequent commands are processed
    | VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1u
    /// Draw/DispatchIndirect command fetch
    | VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2u
    /// Vertex/index fetch
    | VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4u
    /// Vertex shading
    | VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8u
    /// Tessellation control shading
    | VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16u
    /// Tessellation evaluation shading
    | VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32u
    /// Geometry shading
    | VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64u
    /// Fragment shading
    | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128u
    /// Early fragment (depth and stencil) tests
    | VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256u
    /// Late fragment (depth and stencil) tests
    | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512u
    /// Color attachment writes
    | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024u
    /// Compute shading
    | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048u
    /// Transfer/copy operations
    | VK_PIPELINE_STAGE_TRANSFER_BIT = 4096u
    /// After previous commands have completed
    | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192u
    /// Indicates host (CPU) is a source/sink of the dependency
    | VK_PIPELINE_STAGE_HOST_BIT = 16384u
    /// All stages of the graphics pipeline
    | VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768u
    /// All stages supported on the queue
    | VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536u
    | VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 131072u
    /// A pipeline stage for conditional rendering predicate fetch
    | VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144u
    | VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288u
    | VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576u
    | VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152u
    | VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304u
    | VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608u
    | VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216u
    | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432u
    | VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR = 67108864u
    | VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR = 134217728u

[<Flags>]
type VkCommandPoolCreateFlagBits =
    /// Command buffers have a short lifetime
    | VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1u
    /// Command buffers may release their memory individually
    | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2u
    /// Command buffers allocated from pool are protected command buffers
    | VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4u

[<Flags>]
type VkCommandPoolResetFlagBits =
    /// Release resources owned by the pool
    | VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1u

[<Flags>]
type VkCommandBufferResetFlagBits =
    /// Release resources owned by the buffer
    | VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1u

[<Flags>]
type VkSampleCountFlagBits =
    /// Sample count 1 supported
    | VK_SAMPLE_COUNT_1_BIT = 1u
    /// Sample count 2 supported
    | VK_SAMPLE_COUNT_2_BIT = 2u
    /// Sample count 4 supported
    | VK_SAMPLE_COUNT_4_BIT = 4u
    /// Sample count 8 supported
    | VK_SAMPLE_COUNT_8_BIT = 8u
    /// Sample count 16 supported
    | VK_SAMPLE_COUNT_16_BIT = 16u
    /// Sample count 32 supported
    | VK_SAMPLE_COUNT_32_BIT = 32u
    /// Sample count 64 supported
    | VK_SAMPLE_COUNT_64_BIT = 64u

[<Flags>]
type VkAttachmentDescriptionFlagBits =
    /// The attachment may alias physical memory of another attachment in the same render pass
    | VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1u

[<Flags>]
type VkStencilFaceFlagBits =
    /// Front face
    | VK_STENCIL_FACE_FRONT_BIT = 1u
    /// Back face
    | VK_STENCIL_FACE_BACK_BIT = 2u
    /// Front and back faces
    | VK_STENCIL_FACE_FRONT_AND_BACK = 3u

[<Flags>]
type VkDescriptorPoolCreateFlagBits =
    /// Descriptor sets may be freed individually
    | VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1u
    | VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2u

[<Flags>]
type VkDependencyFlagBits =
    /// Dependency is per pixel region 
    | VK_DEPENDENCY_BY_REGION_BIT = 1u
    | VK_DEPENDENCY_VIEW_LOCAL_BIT = 2u
    /// Dependency is across devices
    | VK_DEPENDENCY_DEVICE_GROUP_BIT = 4u

type VkPresentModeKHR =
    | VK_PRESENT_MODE_IMMEDIATE_KHR = 0u
    | VK_PRESENT_MODE_MAILBOX_KHR = 1u
    | VK_PRESENT_MODE_FIFO_KHR = 2u
    | VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3u
    | VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000u
    | VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001u

type VkColorSpaceKHR =
    | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0u
    | VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001u
    | VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002u
    | VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003u
    | VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004u
    | VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005u
    | VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006u
    | VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007u
    | VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008u
    | VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009u
    | VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010u
    | VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011u
    | VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012u
    | VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013u
    | VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014u
    | VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000u

[<Flags>]
type VkDisplayPlaneAlphaFlagBitsKHR =
    | VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1u
    | VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2u
    | VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4u
    | VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8u

[<Flags>]
type VkCompositeAlphaFlagBitsKHR =
    | VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1u
    | VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2u
    | VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4u
    | VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8u

[<Flags>]
type VkSurfaceTransformFlagBitsKHR =
    | VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1u
    | VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2u
    | VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4u
    | VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128u
    | VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256u

[<Flags>]
type VkSwapchainImageUsageFlagBitsANDROID =
    | VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID = 1u

type VkTimeDomainEXT =
    | VK_TIME_DOMAIN_DEVICE_EXT = 0u
    | VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1u
    | VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2u
    | VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3u

[<Flags>]
type VkDebugReportFlagBitsEXT =
    | VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1u
    | VK_DEBUG_REPORT_WARNING_BIT_EXT = 2u
    | VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4u
    | VK_DEBUG_REPORT_ERROR_BIT_EXT = 8u
    | VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16u

type VkDebugReportObjectTypeEXT =
    | VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0u
    | VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3u
    | VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5u
    | VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6u
    | VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8u
    | VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9u
    | VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10u
    | VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11u
    | VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12u
    | VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13u
    | VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17u
    | VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23u
    | VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24u
    | VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30u
    | VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31u
    | VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32u
    | VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000011000u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000u
    | VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000u

type VkRasterizationOrderAMD =
    | VK_RASTERIZATION_ORDER_STRICT_AMD = 0u
    | VK_RASTERIZATION_ORDER_RELAXED_AMD = 1u

[<Flags>]
type VkExternalMemoryHandleTypeFlagBitsNV =
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8u

[<Flags>]
type VkExternalMemoryFeatureFlagBitsNV =
    | VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1u
    | VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2u
    | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4u

type VkValidationCheckEXT =
    | VK_VALIDATION_CHECK_ALL_EXT = 0u
    | VK_VALIDATION_CHECK_SHADERS_EXT = 1u

type VkValidationFeatureEnableEXT =
    | VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0u
    | VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1u
    | VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2u

type VkValidationFeatureDisableEXT =
    | VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0u
    | VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1u
    | VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2u
    | VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3u
    | VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4u
    | VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5u
    | VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6u

[<Flags>]
type VkSubgroupFeatureFlagBits =
    /// Basic subgroup operations
    | VK_SUBGROUP_FEATURE_BASIC_BIT = 1u
    /// Vote subgroup operations
    | VK_SUBGROUP_FEATURE_VOTE_BIT = 2u
    /// Arithmetic subgroup operations
    | VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4u
    /// Ballot subgroup operations
    | VK_SUBGROUP_FEATURE_BALLOT_BIT = 8u
    /// Shuffle subgroup operations
    | VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16u
    /// Shuffle relative subgroup operations
    | VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32u
    /// Clustered subgroup operations
    | VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64u
    /// Quad subgroup operations
    | VK_SUBGROUP_FEATURE_QUAD_BIT = 128u
    | VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256u

[<Flags>]
type VkIndirectCommandsLayoutUsageFlagBitsNVX =
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 1u
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 2u
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 4u
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 8u

[<Flags>]
type VkObjectEntryUsageFlagBitsNVX =
    | VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 1u
    | VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 2u

type VkIndirectCommandsTokenTypeNVX =
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = 0u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = 1u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = 2u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = 3u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = 4u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = 5u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = 6u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = 7u

type VkObjectEntryTypeNVX =
    | VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = 0u
    | VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = 1u
    | VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = 2u
    | VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = 3u
    | VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = 4u

[<Flags>]
type VkDescriptorSetLayoutCreateFlagBits =
    /// Descriptors are pushed via flink:vkCmdPushDescriptorSetKHR
    | VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1u
    | VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2u

[<Flags>]
type VkExternalMemoryHandleTypeFlagBits =
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024u

[<Flags>]
type VkExternalMemoryFeatureFlagBits =
    | VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1u
    | VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2u
    | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4u

[<Flags>]
type VkExternalSemaphoreHandleTypeFlagBits =
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16u

[<Flags>]
type VkExternalSemaphoreFeatureFlagBits =
    | VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1u
    | VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2u

[<Flags>]
type VkSemaphoreImportFlagBits =
    | VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1u

[<Flags>]
type VkExternalFenceHandleTypeFlagBits =
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8u

[<Flags>]
type VkExternalFenceFeatureFlagBits =
    | VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1u
    | VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2u

[<Flags>]
type VkFenceImportFlagBits =
    | VK_FENCE_IMPORT_TEMPORARY_BIT = 1u

[<Flags>]
type VkSurfaceCounterFlagBitsEXT =
    | VK_SURFACE_COUNTER_VBLANK_EXT = 1u

type VkDisplayPowerStateEXT =
    | VK_DISPLAY_POWER_STATE_OFF_EXT = 0u
    | VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1u
    | VK_DISPLAY_POWER_STATE_ON_EXT = 2u

type VkDeviceEventTypeEXT =
    | VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0u

type VkDisplayEventTypeEXT =
    | VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0u

[<Flags>]
type VkPeerMemoryFeatureFlagBits =
    /// Can read with vkCmdCopy commands
    | VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1u
    /// Can write with vkCmdCopy commands
    | VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2u
    /// Can read with any access type/command
    | VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4u
    /// Can write with and access type/command
    | VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8u

[<Flags>]
type VkMemoryAllocateFlagBits =
    /// Force allocation on specific devices
    | VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1u

[<Flags>]
type VkDeviceGroupPresentModeFlagBitsKHR =
    /// Present from local memory
    | VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1u
    /// Present from remote memory
    | VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2u
    /// Present sum of local and/or remote memory
    | VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4u
    /// Each physical device presents from local memory
    | VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8u

[<Flags>]
type VkSwapchainCreateFlagBitsKHR =
    /// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
    | VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1u
    /// Swapchain is protected
    | VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2u
    | VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4u

type VkViewportCoordinateSwizzleNV =
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7u

type VkDiscardRectangleModeEXT =
    | VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0u
    | VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1u

[<Flags>]
type VkSubpassDescriptionFlagBits =
    | VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1u
    | VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2u
    | VK_SUBPASS_DESCRIPTION_RESERVED_2_BIT_QCOM = 4u
    | VK_SUBPASS_DESCRIPTION_RESERVED_3_BIT_QCOM = 8u

type VkPointClippingBehavior =
    | VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0u
    | VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1u

type VkSamplerReductionModeEXT =
    | VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0u
    | VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1u
    | VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2u

type VkTessellationDomainOrigin =
    | VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0u
    | VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1u

type VkSamplerYcbcrModelConversion =
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0u
    /// just range expansion
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1u
    /// aka HD YUV
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2u
    /// aka SD YUV
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3u
    /// aka UHD YUV
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4u

type VkSamplerYcbcrRange =
    /// Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
    | VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0u
    /// Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240
    | VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1u

type VkChromaLocation =
    | VK_CHROMA_LOCATION_COSITED_EVEN = 0u
    | VK_CHROMA_LOCATION_MIDPOINT = 1u

type VkBlendOverlapEXT =
    | VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0u
    | VK_BLEND_OVERLAP_DISJOINT_EXT = 1u
    | VK_BLEND_OVERLAP_CONJOINT_EXT = 2u

type VkCoverageModulationModeNV =
    | VK_COVERAGE_MODULATION_MODE_NONE_NV = 0u
    | VK_COVERAGE_MODULATION_MODE_RGB_NV = 1u
    | VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2u
    | VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3u

type VkCoverageReductionModeNV =
    | VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0u
    | VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1u

type VkValidationCacheHeaderVersionEXT =
    | VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1u

type VkShaderInfoTypeAMD =
    | VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0u
    | VK_SHADER_INFO_TYPE_BINARY_AMD = 1u
    | VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2u

type VkQueueGlobalPriorityEXT =
    | VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128u
    | VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256u
    | VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512u
    | VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024u

[<Flags>]
type VkDebugUtilsMessageSeverityFlagBitsEXT =
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1u
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16u
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256u
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096u

[<Flags>]
type VkDebugUtilsMessageTypeFlagBitsEXT =
    | VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1u
    | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2u
    | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4u

type VkConservativeRasterizationModeEXT =
    | VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0u
    | VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1u
    | VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2u

[<Flags>]
type VkDescriptorBindingFlagBitsEXT =
    | VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1u
    | VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2u
    | VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4u
    | VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8u

type VkVendorId =
    /// Vivante vendor ID
    | VK_VENDOR_ID_VIV = 65537u
    /// VeriSilicon vendor ID
    | VK_VENDOR_ID_VSI = 65538u
    /// Kazan Software Renderer
    | VK_VENDOR_ID_KAZAN = 65539u

type VkDriverIdKHR =
    /// Advanced Micro Devices, Inc.
    | VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1u
    /// Advanced Micro Devices, Inc.
    | VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2u
    /// Mesa open source project
    | VK_DRIVER_ID_MESA_RADV_KHR = 3u
    /// NVIDIA Corporation
    | VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4u
    /// Intel Corporation
    | VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5u
    /// Intel Corporation
    | VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6u
    /// Imagination Technologies
    | VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7u
    /// Qualcomm Technologies, Inc.
    | VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8u
    /// Arm Limited
    | VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9u
    /// Google LLC
    | VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10u
    /// Google LLC
    | VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11u
    /// Broadcom Inc.
    | VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12u

[<Flags>]
type VkConditionalRenderingFlagBitsEXT =
    | VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1u

[<Flags>]
type VkResolveModeFlagBitsKHR =
    | VK_RESOLVE_MODE_NONE_KHR = 0u
    | VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1u
    | VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2u
    | VK_RESOLVE_MODE_MIN_BIT_KHR = 4u
    | VK_RESOLVE_MODE_MAX_BIT_KHR = 8u

type VkShadingRatePaletteEntryNV =
    | VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0u
    | VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1u
    | VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2u
    | VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3u
    | VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11u

type VkCoarseSampleOrderTypeNV =
    | VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0u
    | VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1u
    | VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2u
    | VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3u

[<Flags>]
type VkGeometryInstanceFlagBitsNV =
    | VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1u
    | VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2u
    | VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4u
    | VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8u

[<Flags>]
type VkGeometryFlagBitsNV =
    | VK_GEOMETRY_OPAQUE_BIT_NV = 1u
    | VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2u

[<Flags>]
type VkBuildAccelerationStructureFlagBitsNV =
    | VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1u
    | VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2u
    | VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4u
    | VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8u
    | VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16u

type VkCopyAccelerationStructureModeNV =
    | VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0u
    | VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1u

type VkAccelerationStructureTypeNV =
    | VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0u
    | VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1u

type VkGeometryTypeNV =
    | VK_GEOMETRY_TYPE_TRIANGLES_NV = 0u
    | VK_GEOMETRY_TYPE_AABBS_NV = 1u

type VkAccelerationStructureMemoryRequirementsTypeNV =
    | VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0u
    | VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1u
    | VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2u

type VkRayTracingShaderGroupTypeNV =
    | VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0u
    | VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1u
    | VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2u

type VkMemoryOverallocationBehaviorAMD =
    | VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0u
    | VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1u
    | VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2u

[<Flags>]
type VkFramebufferCreateFlagBits =
    | VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1u

type VkScopeNV =
    | VK_SCOPE_DEVICE_NV = 1u
    | VK_SCOPE_WORKGROUP_NV = 2u
    | VK_SCOPE_SUBGROUP_NV = 3u
    | VK_SCOPE_QUEUE_FAMILY_NV = 5u

type VkComponentTypeNV =
    | VK_COMPONENT_TYPE_FLOAT16_NV = 0u
    | VK_COMPONENT_TYPE_FLOAT32_NV = 1u
    | VK_COMPONENT_TYPE_FLOAT64_NV = 2u
    | VK_COMPONENT_TYPE_SINT8_NV = 3u
    | VK_COMPONENT_TYPE_SINT16_NV = 4u
    | VK_COMPONENT_TYPE_SINT32_NV = 5u
    | VK_COMPONENT_TYPE_SINT64_NV = 6u
    | VK_COMPONENT_TYPE_UINT8_NV = 7u
    | VK_COMPONENT_TYPE_UINT16_NV = 8u
    | VK_COMPONENT_TYPE_UINT32_NV = 9u
    | VK_COMPONENT_TYPE_UINT64_NV = 10u

[<Flags>]
type VkPipelineCreationFeedbackFlagBitsEXT =
    | VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1u
    | VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2u
    | VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4u

type VkFullScreenExclusiveEXT =
    | VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0u
    | VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1u
    | VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2u
    | VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3u

type VkPerformanceConfigurationTypeINTEL =
    | VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0u

type VkQueryPoolSamplingModeINTEL =
    | VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0u

type VkPerformanceOverrideTypeINTEL =
    | VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0u
    | VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1u

type VkPerformanceParameterTypeINTEL =
    | VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0u
    | VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1u

type VkPerformanceValueTypeINTEL =
    | VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0u
    | VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1u
    | VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2u
    | VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3u
    | VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4u

type VkPipelineExecutableStatisticFormatKHR =
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0u
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1u
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2u
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3u

type VkShaderFloatControlsIndependenceKHR =
    | VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0u
    | VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1u
    | VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2u

type VkLineRasterizationModeEXT =
    | VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0u
    | VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1u
    | VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2u
    | VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3u

[<Flags>]
type VkShaderModuleCreateFlagBits =
    | VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV = 1u

type Display = nativeint

type VisualID = nativeint

type Window = nativeint

type RROutput = nativeint

type wl_display = nativeint

type wl_surface = nativeint

type HINSTANCE = nativeint

type HWND = nativeint

type HMONITOR = nativeint

type HANDLE = nativeint

type SECURITY_ATTRIBUTES = nativeint

type DWORD = nativeint

type LPCWSTR = nativeint

type xcb_connection_t = nativeint

type xcb_visualid_t = nativeint

type xcb_window_t = nativeint

type zx_handle_t = nativeint

type GgpStreamDescriptor = nativeint

type GgpFrameToken = nativeint

type VK_MAKE_VERSION = nativeint

type VK_VERSION_MAJOR = nativeint

type VK_VERSION_MINOR = nativeint

type VK_VERSION_PATCH = nativeint

type VK_API_VERSION = nativeint

type VK_API_VERSION_1_0 = nativeint

type VK_API_VERSION_1_1 = nativeint

type VK_HEADER_VERSION = nativeint

type VK_DEFINE_HANDLE = nativeint

type VK_NULL_HANDLE = nativeint

type ANativeWindow = nativeint

type AHardwareBuffer = nativeint

type CAMetalLayer = nativeint

type VkSampleMask = uint32

type VkBool32 = uint32

type VkFlags = uint32

type VkDeviceSize = uint64

type VkDeviceAddress = uint64

type VkFramebufferCreateFlags = VkFlags

type VkQueryPoolCreateFlags = VkFlags

type VkRenderPassCreateFlags = VkFlags

type VkSamplerCreateFlags = VkFlags

type VkPipelineLayoutCreateFlags = VkFlags

type VkPipelineCacheCreateFlags = VkFlags

type VkPipelineDepthStencilStateCreateFlags = VkFlags

type VkPipelineDynamicStateCreateFlags = VkFlags

type VkPipelineColorBlendStateCreateFlags = VkFlags

type VkPipelineMultisampleStateCreateFlags = VkFlags

type VkPipelineRasterizationStateCreateFlags = VkFlags

type VkPipelineViewportStateCreateFlags = VkFlags

type VkPipelineTessellationStateCreateFlags = VkFlags

type VkPipelineInputAssemblyStateCreateFlags = VkFlags

type VkPipelineVertexInputStateCreateFlags = VkFlags

type VkPipelineShaderStageCreateFlags = VkFlags

type VkDescriptorSetLayoutCreateFlags = VkFlags

type VkBufferViewCreateFlags = VkFlags

type VkInstanceCreateFlags = VkFlags

type VkDeviceCreateFlags = VkFlags

type VkDeviceQueueCreateFlags = VkFlags

type VkQueueFlags = VkFlags

type VkMemoryPropertyFlags = VkFlags

type VkMemoryHeapFlags = VkFlags

type VkAccessFlags = VkFlags

type VkBufferUsageFlags = VkFlags

type VkBufferCreateFlags = VkFlags

type VkShaderStageFlags = VkFlags

type VkImageUsageFlags = VkFlags

type VkImageCreateFlags = VkFlags

type VkImageViewCreateFlags = VkFlags

type VkPipelineCreateFlags = VkFlags

type VkColorComponentFlags = VkFlags

type VkFenceCreateFlags = VkFlags

type VkSemaphoreCreateFlags = VkFlags

type VkFormatFeatureFlags = VkFlags

type VkQueryControlFlags = VkFlags

type VkQueryResultFlags = VkFlags

type VkShaderModuleCreateFlags = VkFlags

type VkEventCreateFlags = VkFlags

type VkCommandPoolCreateFlags = VkFlags

type VkCommandPoolResetFlags = VkFlags

type VkCommandBufferResetFlags = VkFlags

type VkCommandBufferUsageFlags = VkFlags

type VkQueryPipelineStatisticFlags = VkFlags

type VkMemoryMapFlags = VkFlags

type VkImageAspectFlags = VkFlags

type VkSparseMemoryBindFlags = VkFlags

type VkSparseImageFormatFlags = VkFlags

type VkSubpassDescriptionFlags = VkFlags

type VkPipelineStageFlags = VkFlags

type VkSampleCountFlags = VkFlags

type VkAttachmentDescriptionFlags = VkFlags

type VkStencilFaceFlags = VkFlags

type VkCullModeFlags = VkFlags

type VkDescriptorPoolCreateFlags = VkFlags

type VkDescriptorPoolResetFlags = VkFlags

type VkDependencyFlags = VkFlags

type VkSubgroupFeatureFlags = VkFlags

type VkIndirectCommandsLayoutUsageFlagsNVX = VkFlags

type VkObjectEntryUsageFlagsNVX = VkFlags

type VkGeometryFlagsNV = VkFlags

type VkGeometryInstanceFlagsNV = VkFlags

type VkBuildAccelerationStructureFlagsNV = VkFlags

type VkDescriptorUpdateTemplateCreateFlags = VkFlags

type VkPipelineCreationFeedbackFlagsEXT = VkFlags

type VkPipelineCompilerControlFlagsAMD = VkFlags

type VkShaderCorePropertiesFlagsAMD = VkFlags

type VkCompositeAlphaFlagsKHR = VkFlags

type VkDisplayPlaneAlphaFlagsKHR = VkFlags

type VkSurfaceTransformFlagsKHR = VkFlags

type VkSwapchainCreateFlagsKHR = VkFlags

type VkDisplayModeCreateFlagsKHR = VkFlags

type VkDisplaySurfaceCreateFlagsKHR = VkFlags

type VkAndroidSurfaceCreateFlagsKHR = VkFlags

type VkViSurfaceCreateFlagsNN = VkFlags

type VkWaylandSurfaceCreateFlagsKHR = VkFlags

type VkWin32SurfaceCreateFlagsKHR = VkFlags

type VkXlibSurfaceCreateFlagsKHR = VkFlags

type VkXcbSurfaceCreateFlagsKHR = VkFlags

type VkIOSSurfaceCreateFlagsMVK = VkFlags

type VkMacOSSurfaceCreateFlagsMVK = VkFlags

type VkMetalSurfaceCreateFlagsEXT = VkFlags

type VkImagePipeSurfaceCreateFlagsFUCHSIA = VkFlags

type VkStreamDescriptorSurfaceCreateFlagsGGP = VkFlags

type VkHeadlessSurfaceCreateFlagsEXT = VkFlags

type VkPeerMemoryFeatureFlags = VkFlags

type VkMemoryAllocateFlags = VkFlags

type VkDeviceGroupPresentModeFlagsKHR = VkFlags

type VkDebugReportFlagsEXT = VkFlags

type VkCommandPoolTrimFlags = VkFlags

type VkExternalMemoryHandleTypeFlagsNV = VkFlags

type VkExternalMemoryFeatureFlagsNV = VkFlags

type VkExternalMemoryHandleTypeFlags = VkFlags

type VkExternalMemoryFeatureFlags = VkFlags

type VkExternalSemaphoreHandleTypeFlags = VkFlags

type VkExternalSemaphoreFeatureFlags = VkFlags

type VkSemaphoreImportFlags = VkFlags

type VkExternalFenceHandleTypeFlags = VkFlags

type VkExternalFenceFeatureFlags = VkFlags

type VkFenceImportFlags = VkFlags

type VkSurfaceCounterFlagsEXT = VkFlags

type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags

type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags

type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags

type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags

type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags

type VkValidationCacheCreateFlagsEXT = VkFlags

type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags

type VkDebugUtilsMessageTypeFlagsEXT = VkFlags

type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags

type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags

type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags

type VkDescriptorBindingFlagsEXT = VkFlags

type VkConditionalRenderingFlagsEXT = VkFlags

type VkResolveModeFlagsKHR = VkFlags

type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags

type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags

type VkSwapchainImageUsageFlagsANDROID = VkFlags

type VkInstance = nativeint

type VkPhysicalDevice = nativeint

type VkDevice = nativeint

type VkQueue = nativeint

type VkCommandBuffer = nativeint

type VkDeviceMemory = nativeint

type VkCommandPool = nativeint

type VkBuffer = nativeint

type VkBufferView = nativeint

type VkImage = nativeint

type VkImageView = nativeint

type VkShaderModule = nativeint

type VkPipeline = nativeint

type VkPipelineLayout = nativeint

type VkSampler = nativeint

type VkDescriptorSet = nativeint

type VkDescriptorSetLayout = nativeint

type VkDescriptorPool = nativeint

type VkFence = nativeint

type VkSemaphore = nativeint

type VkEvent = nativeint

type VkQueryPool = nativeint

type VkFramebuffer = nativeint

type VkRenderPass = nativeint

type VkPipelineCache = nativeint

type VkObjectTableNVX = nativeint

type VkIndirectCommandsLayoutNVX = nativeint

type VkDescriptorUpdateTemplate = nativeint

type VkSamplerYcbcrConversion = nativeint

type VkValidationCacheEXT = nativeint

type VkAccelerationStructureNV = nativeint

type VkPerformanceConfigurationINTEL = nativeint

type VkDisplayKHR = nativeint

type VkDisplayModeKHR = nativeint

type VkSurfaceKHR = nativeint

type VkSwapchainKHR = nativeint

type VkDebugReportCallbackEXT = nativeint

type VkDebugUtilsMessengerEXT = nativeint

type PFN_vkInternalAllocationNotification = delegate of nativeint * unativeint * VkInternalAllocationType * VkSystemAllocationScope -> unit

type PFN_vkInternalFreeNotification = delegate of nativeint * unativeint * VkInternalAllocationType * VkSystemAllocationScope -> unit

type PFN_vkReallocationFunction = delegate of nativeint * nativeint * unativeint * unativeint * VkSystemAllocationScope -> nativeint

type PFN_vkAllocationFunction = delegate of nativeint * unativeint * unativeint * VkSystemAllocationScope -> nativeint

type PFN_vkFreeFunction = delegate of nativeint * nativeint -> unit

type PFN_vkVoidFunction = delegate of unit -> unit

type PFN_vkDebugReportCallbackEXT = delegate of VkDebugReportFlagsEXT * VkDebugReportObjectTypeEXT * uint64 * unativeint * nativeptr<int> * nativeptr<char> * nativeptr<char> * nativeint -> VkBool32

type PFN_vkDebugUtilsMessengerCallbackEXT = delegate of VkDebugUtilsMessageSeverityFlagBitsEXT * nativeptr<VkDebugUtilsMessageTypeFlagsEXT> * nativeptr<VkDebugUtilsMessengerCallbackDataEXT> * nativeint -> VkBool32

[<Struct>]
type VkBaseOutStructure =
    val mutable sType: VkStructureType
    val mutable pNext: nativeptr<VkBaseOutStructure>

[<Struct>]
type VkBaseInStructure =
    val mutable sType: VkStructureType
    val pNext: nativeptr<VkBaseInStructure>

[<Struct>]
type VkOffset2D =
    val mutable x: int
    val mutable y: int

[<Struct>]
type VkOffset3D =
    val mutable x: int
    val mutable y: int
    val mutable z: int

[<Struct>]
type VkExtent2D =
    val mutable width: uint32
    val mutable height: uint32

[<Struct>]
type VkExtent3D =
    val mutable width: uint32
    val mutable height: uint32
    val mutable depth: uint32

[<Struct>]
type VkViewport =
    val mutable x: float32
    val mutable y: float32
    val mutable width: float32
    val mutable height: float32
    val mutable minDepth: float32
    val mutable maxDepth: float32

[<Struct>]
type VkRect2D =
    val mutable offset: VkOffset2D
    val mutable extent: VkExtent2D

[<Struct>]
type VkClearRect =
    val mutable rect: VkRect2D
    val mutable baseArrayLayer: uint32
    val mutable layerCount: uint32

[<Struct>]
type VkComponentMapping =
    val mutable r: VkComponentSwizzle
    val mutable g: VkComponentSwizzle
    val mutable b: VkComponentSwizzle
    val mutable a: VkComponentSwizzle

[<Struct>]
type VkPhysicalDeviceProperties =
    val mutable apiVersion: uint32
    val mutable driverVersion: uint32
    val mutable vendorID: uint32
    val mutable deviceID: uint32
    val mutable deviceType: VkPhysicalDeviceType
    val mutable deviceName: char
    val mutable pipelineCacheUUID: byte
    val mutable limits: VkPhysicalDeviceLimits
    val mutable sparseProperties: VkPhysicalDeviceSparseProperties

[<Struct>]
type VkExtensionProperties =
    /// extension name
    val mutable extensionName: char
    /// version of the extension specification implemented
    val mutable specVersion: uint32

[<Struct>]
type VkLayerProperties =
    /// layer name
    val mutable layerName: char
    /// version of the layer specification implemented
    val mutable specVersion: uint32
    /// build or release version of the layer's library
    val mutable implementationVersion: uint32
    /// Free-form description of the layer
    val mutable description: char

[<Struct>]
type VkApplicationInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val pApplicationName: nativeptr<char>
    val mutable applicationVersion: uint32
    val pEngineName: nativeptr<char>
    val mutable engineVersion: uint32
    val mutable apiVersion: uint32

[<Struct>]
type VkAllocationCallbacks =
    val mutable pUserData: nativeint
    val mutable pfnAllocation: PFN_vkAllocationFunction
    val mutable pfnReallocation: PFN_vkReallocationFunction
    val mutable pfnFree: PFN_vkFreeFunction
    val mutable pfnInternalAllocation: PFN_vkInternalAllocationNotification
    val mutable pfnInternalFree: PFN_vkInternalFreeNotification

[<Struct>]
type VkDeviceQueueCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDeviceQueueCreateFlags
    val mutable queueFamilyIndex: uint32
    val mutable queueCount: uint32
    val pQueuePriorities: nativeptr<float32>

[<Struct>]
type VkDeviceCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDeviceCreateFlags
    val mutable queueCreateInfoCount: uint32
    val pQueueCreateInfos: nativeptr<VkDeviceQueueCreateInfo>
    val mutable enabledLayerCount: uint32
    /// Ordered list of layer names to be enabled
    val ppEnabledLayerNames: nativeptr<char>
    val mutable enabledExtensionCount: uint32
    val ppEnabledExtensionNames: nativeptr<char>
    val pEnabledFeatures: nativeptr<VkPhysicalDeviceFeatures>

[<Struct>]
type VkInstanceCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkInstanceCreateFlags
    val pApplicationInfo: nativeptr<VkApplicationInfo>
    val mutable enabledLayerCount: uint32
    /// Ordered list of layer names to be enabled
    val ppEnabledLayerNames: nativeptr<char>
    val mutable enabledExtensionCount: uint32
    /// Extension names to be enabled
    val ppEnabledExtensionNames: nativeptr<char>

[<Struct>]
type VkQueueFamilyProperties =
    /// Queue flags
    val mutable queueFlags: VkQueueFlags
    val mutable queueCount: uint32
    val mutable timestampValidBits: uint32
    /// Minimum alignment requirement for image transfers
    val mutable minImageTransferGranularity: VkExtent3D

[<Struct>]
type VkPhysicalDeviceMemoryProperties =
    val mutable memoryTypeCount: uint32
    val mutable memoryTypes: VkMemoryType
    val mutable memoryHeapCount: uint32
    val mutable memoryHeaps: VkMemoryHeap

[<Struct>]
type VkMemoryAllocateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Size of memory allocation
    val mutable allocationSize: VkDeviceSize
    /// Index of the of the memory type to allocate from
    val mutable memoryTypeIndex: uint32

[<Struct>]
type VkMemoryRequirements =
    /// Specified in bytes
    val mutable size: VkDeviceSize
    /// Specified in bytes
    val mutable alignment: VkDeviceSize
    /// Bitmask of the allowed memory type indices into memoryTypes[] for this object
    val mutable memoryTypeBits: uint32

[<Struct>]
type VkSparseImageFormatProperties =
    val mutable aspectMask: VkImageAspectFlags
    val mutable imageGranularity: VkExtent3D
    val mutable flags: VkSparseImageFormatFlags

[<Struct>]
type VkSparseImageMemoryRequirements =
    val mutable formatProperties: VkSparseImageFormatProperties
    val mutable imageMipTailFirstLod: uint32
    /// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
    val mutable imageMipTailSize: VkDeviceSize
    /// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
    val mutable imageMipTailOffset: VkDeviceSize
    /// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
    val mutable imageMipTailStride: VkDeviceSize

[<Struct>]
type VkMemoryType =
    /// Memory properties of this memory type
    val mutable propertyFlags: VkMemoryPropertyFlags
    /// Index of the memory heap allocations of this memory type are taken from
    val mutable heapIndex: uint32

[<Struct>]
type VkMemoryHeap =
    /// Available memory in the heap
    val mutable size: VkDeviceSize
    /// Flags for the heap
    val mutable flags: VkMemoryHeapFlags

[<Struct>]
type VkMappedMemoryRange =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Mapped memory object
    val mutable memory: VkDeviceMemory
    /// Offset within the memory object where the range starts
    val mutable offset: VkDeviceSize
    /// Size of the range within the memory object
    val mutable size: VkDeviceSize

[<Struct>]
type VkFormatProperties =
    /// Format features in case of linear tiling
    val mutable linearTilingFeatures: VkFormatFeatureFlags
    /// Format features in case of optimal tiling
    val mutable optimalTilingFeatures: VkFormatFeatureFlags
    /// Format features supported by buffers
    val mutable bufferFeatures: VkFormatFeatureFlags

[<Struct>]
type VkImageFormatProperties =
    /// max image dimensions for this resource type
    val mutable maxExtent: VkExtent3D
    /// max number of mipmap levels for this resource type
    val mutable maxMipLevels: uint32
    /// max array size for this resource type
    val mutable maxArrayLayers: uint32
    /// supported sample counts for this resource type
    val mutable sampleCounts: VkSampleCountFlags
    /// max size (in bytes) of this resource type
    val mutable maxResourceSize: VkDeviceSize

[<Struct>]
type VkDescriptorBufferInfo =
    /// Buffer used for this descriptor slot.
    val mutable buffer: VkBuffer
    /// Base offset from buffer start in bytes to update in the descriptor set.
    val mutable offset: VkDeviceSize
    /// Size in bytes of the buffer resource for this descriptor update.
    val mutable range: VkDeviceSize

[<Struct>]
type VkDescriptorImageInfo =
    /// Sampler to write to the descriptor in case it is a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise.
    val mutable sampler: VkSampler
    /// Image view to write to the descriptor in case it is a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise.
    val mutable imageView: VkImageView
    /// Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE).
    val mutable imageLayout: VkImageLayout

[<Struct>]
type VkWriteDescriptorSet =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Destination descriptor set
    val mutable dstSet: VkDescriptorSet
    /// Binding within the destination descriptor set to write
    val mutable dstBinding: uint32
    /// Array element within the destination binding to write
    val mutable dstArrayElement: uint32
    /// Number of descriptors to write (determines the size of the array pointed by pDescriptors)
    val mutable descriptorCount: uint32
    /// Descriptor type to write (determines which members of the array pointed by pDescriptors are going to be used)
    val mutable descriptorType: VkDescriptorType
    /// Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types.
    val pImageInfo: nativeptr<VkDescriptorImageInfo>
    /// Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types.
    val pBufferInfo: nativeptr<VkDescriptorBufferInfo>
    /// Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types.
    val pTexelBufferView: nativeptr<VkBufferView>

[<Struct>]
type VkCopyDescriptorSet =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Source descriptor set
    val mutable srcSet: VkDescriptorSet
    /// Binding within the source descriptor set to copy from
    val mutable srcBinding: uint32
    /// Array element within the source binding to copy from
    val mutable srcArrayElement: uint32
    /// Destination descriptor set
    val mutable dstSet: VkDescriptorSet
    /// Binding within the destination descriptor set to copy to
    val mutable dstBinding: uint32
    /// Array element within the destination binding to copy to
    val mutable dstArrayElement: uint32
    /// Number of descriptors to write (determines the size of the array pointed by pDescriptors)
    val mutable descriptorCount: uint32

[<Struct>]
type VkBufferCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Buffer creation flags
    val mutable flags: VkBufferCreateFlags
    /// Specified in bytes
    val mutable size: VkDeviceSize
    /// Buffer usage flags
    val mutable usage: VkBufferUsageFlags
    val mutable sharingMode: VkSharingMode
    val mutable queueFamilyIndexCount: uint32
    val pQueueFamilyIndices: nativeptr<uint32>

[<Struct>]
type VkBufferViewCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkBufferViewCreateFlags
    val mutable buffer: VkBuffer
    /// Optionally specifies format of elements
    val mutable format: VkFormat
    /// Specified in bytes
    val mutable offset: VkDeviceSize
    /// View size specified in bytes
    val mutable range: VkDeviceSize

[<Struct>]
type VkImageSubresource =
    val mutable aspectMask: VkImageAspectFlags
    val mutable mipLevel: uint32
    val mutable arrayLayer: uint32

[<Struct>]
type VkImageSubresourceLayers =
    val mutable aspectMask: VkImageAspectFlags
    val mutable mipLevel: uint32
    val mutable baseArrayLayer: uint32
    val mutable layerCount: uint32

[<Struct>]
type VkImageSubresourceRange =
    val mutable aspectMask: VkImageAspectFlags
    val mutable baseMipLevel: uint32
    val mutable levelCount: uint32
    val mutable baseArrayLayer: uint32
    val mutable layerCount: uint32

[<Struct>]
type VkMemoryBarrier =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Memory accesses from the source of the dependency to synchronize
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    val mutable dstAccessMask: VkAccessFlags

[<Struct>]
type VkBufferMemoryBarrier =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Memory accesses from the source of the dependency to synchronize
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    val mutable dstAccessMask: VkAccessFlags
    /// Queue family to transition ownership from
    val mutable srcQueueFamilyIndex: uint32
    /// Queue family to transition ownership to
    val mutable dstQueueFamilyIndex: uint32
    /// Buffer to sync
    val mutable buffer: VkBuffer
    /// Offset within the buffer to sync
    val mutable offset: VkDeviceSize
    /// Amount of bytes to sync
    val mutable size: VkDeviceSize

[<Struct>]
type VkImageMemoryBarrier =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Memory accesses from the source of the dependency to synchronize
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    val mutable dstAccessMask: VkAccessFlags
    /// Current layout of the image
    val mutable oldLayout: VkImageLayout
    /// New layout to transition the image to
    val mutable newLayout: VkImageLayout
    /// Queue family to transition ownership from
    val mutable srcQueueFamilyIndex: uint32
    /// Queue family to transition ownership to
    val mutable dstQueueFamilyIndex: uint32
    /// Image to sync
    val mutable image: VkImage
    /// Subresource range to sync
    val mutable subresourceRange: VkImageSubresourceRange

[<Struct>]
type VkImageCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Image creation flags
    val mutable flags: VkImageCreateFlags
    val mutable imageType: VkImageType
    val mutable format: VkFormat
    val mutable extent: VkExtent3D
    val mutable mipLevels: uint32
    val mutable arrayLayers: uint32
    val mutable samples: VkSampleCountFlagBits
    val mutable tiling: VkImageTiling
    /// Image usage flags
    val mutable usage: VkImageUsageFlags
    /// Cross-queue-family sharing mode
    val mutable sharingMode: VkSharingMode
    /// Number of queue families to share across
    val mutable queueFamilyIndexCount: uint32
    /// Array of queue family indices to share across
    val pQueueFamilyIndices: nativeptr<uint32>
    /// Initial image layout for all subresources
    val mutable initialLayout: VkImageLayout

[<Struct>]
type VkSubresourceLayout =
    /// Specified in bytes
    val mutable offset: VkDeviceSize
    /// Specified in bytes
    val mutable size: VkDeviceSize
    /// Specified in bytes
    val mutable rowPitch: VkDeviceSize
    /// Specified in bytes
    val mutable arrayPitch: VkDeviceSize
    /// Specified in bytes
    val mutable depthPitch: VkDeviceSize

[<Struct>]
type VkImageViewCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkImageViewCreateFlags
    val mutable image: VkImage
    val mutable viewType: VkImageViewType
    val mutable format: VkFormat
    val mutable components: VkComponentMapping
    val mutable subresourceRange: VkImageSubresourceRange

[<Struct>]
type VkBufferCopy =
    /// Specified in bytes
    val mutable srcOffset: VkDeviceSize
    /// Specified in bytes
    val mutable dstOffset: VkDeviceSize
    /// Specified in bytes
    val mutable size: VkDeviceSize

[<Struct>]
type VkSparseMemoryBind =
    /// Specified in bytes
    val mutable resourceOffset: VkDeviceSize
    /// Specified in bytes
    val mutable size: VkDeviceSize
    val mutable memory: VkDeviceMemory
    /// Specified in bytes
    val mutable memoryOffset: VkDeviceSize
    val mutable flags: VkSparseMemoryBindFlags

[<Struct>]
type VkSparseImageMemoryBind =
    val mutable subresource: VkImageSubresource
    val mutable offset: VkOffset3D
    val mutable extent: VkExtent3D
    val mutable memory: VkDeviceMemory
    /// Specified in bytes
    val mutable memoryOffset: VkDeviceSize
    val mutable flags: VkSparseMemoryBindFlags

[<Struct>]
type VkSparseBufferMemoryBindInfo =
    val mutable buffer: VkBuffer
    val mutable bindCount: uint32
    val pBinds: nativeptr<VkSparseMemoryBind>

[<Struct>]
type VkSparseImageOpaqueMemoryBindInfo =
    val mutable image: VkImage
    val mutable bindCount: uint32
    val pBinds: nativeptr<VkSparseMemoryBind>

[<Struct>]
type VkSparseImageMemoryBindInfo =
    val mutable image: VkImage
    val mutable bindCount: uint32
    val pBinds: nativeptr<VkSparseImageMemoryBind>

[<Struct>]
type VkBindSparseInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable waitSemaphoreCount: uint32
    val pWaitSemaphores: nativeptr<VkSemaphore>
    val mutable bufferBindCount: uint32
    val pBufferBinds: nativeptr<VkSparseBufferMemoryBindInfo>
    val mutable imageOpaqueBindCount: uint32
    val pImageOpaqueBinds: nativeptr<VkSparseImageOpaqueMemoryBindInfo>
    val mutable imageBindCount: uint32
    val pImageBinds: nativeptr<VkSparseImageMemoryBindInfo>
    val mutable signalSemaphoreCount: uint32
    val pSignalSemaphores: nativeptr<VkSemaphore>

[<Struct>]
type VkImageCopy =
    val mutable srcSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    val mutable srcOffset: VkOffset3D
    val mutable dstSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    val mutable dstOffset: VkOffset3D
    /// Specified in pixels for both compressed and uncompressed images
    val mutable extent: VkExtent3D

[<Struct>]
type VkImageBlit =
    val mutable srcSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    val mutable srcOffsets: VkOffset3D
    val mutable dstSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    val mutable dstOffsets: VkOffset3D

[<Struct>]
type VkBufferImageCopy =
    /// Specified in bytes
    val mutable bufferOffset: VkDeviceSize
    /// Specified in texels
    val mutable bufferRowLength: uint32
    val mutable bufferImageHeight: uint32
    val mutable imageSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    val mutable imageOffset: VkOffset3D
    /// Specified in pixels for both compressed and uncompressed images
    val mutable imageExtent: VkExtent3D

[<Struct>]
type VkImageResolve =
    val mutable srcSubresource: VkImageSubresourceLayers
    val mutable srcOffset: VkOffset3D
    val mutable dstSubresource: VkImageSubresourceLayers
    val mutable dstOffset: VkOffset3D
    val mutable extent: VkExtent3D

[<Struct>]
type VkShaderModuleCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkShaderModuleCreateFlags
    /// Specified in bytes
    val mutable codeSize: unativeint
    /// Binary code of size codeSize
    val pCode: nativeptr<uint32>

[<Struct>]
type VkDescriptorSetLayoutBinding =
    /// Binding number for this entry
    val mutable binding: uint32
    /// Type of the descriptors in this binding
    val mutable descriptorType: VkDescriptorType
    /// Number of descriptors in this binding
    val mutable descriptorCount: uint32
    /// Shader stages this binding is visible to
    val mutable stageFlags: VkShaderStageFlags
    /// Immutable samplers (used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements)
    val pImmutableSamplers: nativeptr<VkSampler>

[<Struct>]
type VkDescriptorSetLayoutCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDescriptorSetLayoutCreateFlags
    /// Number of bindings in the descriptor set layout
    val mutable bindingCount: uint32
    /// Array of descriptor set layout bindings
    val pBindings: nativeptr<VkDescriptorSetLayoutBinding>

[<Struct>]
type VkDescriptorPoolSize =
    val mutable typ: VkDescriptorType
    val mutable descriptorCount: uint32

[<Struct>]
type VkDescriptorPoolCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDescriptorPoolCreateFlags
    val mutable maxSets: uint32
    val mutable poolSizeCount: uint32
    val pPoolSizes: nativeptr<VkDescriptorPoolSize>

[<Struct>]
type VkDescriptorSetAllocateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable descriptorPool: VkDescriptorPool
    val mutable descriptorSetCount: uint32
    val pSetLayouts: nativeptr<VkDescriptorSetLayout>

[<Struct>]
type VkSpecializationMapEntry =
    /// The SpecConstant ID specified in the BIL
    val constantID: uint32
    /// Offset of the value in the data block
    val mutable offset: uint32
    /// Size in bytes of the SpecConstant
    val mutable size: unativeint

[<Struct>]
type VkSpecializationInfo =
    /// Number of entries in the map
    val mutable mapEntryCount: uint32
    /// Array of map entries
    val pMapEntries: nativeptr<VkSpecializationMapEntry>
    /// Size in bytes of pData
    val mutable dataSize: unativeint
    /// Pointer to SpecConstant data
    val pData: nativeint

[<Struct>]
type VkPipelineShaderStageCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineShaderStageCreateFlags
    /// Shader stage
    val mutable stage: VkShaderStageFlagBits
    /// Module containing entry point
    val mutable modul: VkShaderModule
    /// Null-terminated entry point name
    val pName: nativeptr<char>
    val pSpecializationInfo: nativeptr<VkSpecializationInfo>

[<Struct>]
type VkComputePipelineCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Pipeline creation flags
    val mutable flags: VkPipelineCreateFlags
    val mutable stage: VkPipelineShaderStageCreateInfo
    /// Interface layout of the pipeline
    val mutable layout: VkPipelineLayout
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
    val mutable basePipelineHandle: VkPipeline
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
    val mutable basePipelineIndex: int

[<Struct>]
type VkVertexInputBindingDescription =
    /// Vertex buffer binding id
    val mutable binding: uint32
    /// Distance between vertices in bytes (0 = no advancement)
    val mutable stride: uint32
    /// The rate at which the vertex data is consumed
    val mutable inputRate: VkVertexInputRate

[<Struct>]
type VkVertexInputAttributeDescription =
    /// location of the shader vertex attrib
    val mutable location: uint32
    /// Vertex buffer binding id
    val mutable binding: uint32
    /// format of source data
    val mutable format: VkFormat
    /// Offset of first element in bytes from base of vertex
    val mutable offset: uint32

[<Struct>]
type VkPipelineVertexInputStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineVertexInputStateCreateFlags
    /// number of bindings
    val mutable vertexBindingDescriptionCount: uint32
    val pVertexBindingDescriptions: nativeptr<VkVertexInputBindingDescription>
    /// number of attributes
    val mutable vertexAttributeDescriptionCount: uint32
    val pVertexAttributeDescriptions: nativeptr<VkVertexInputAttributeDescription>

[<Struct>]
type VkPipelineInputAssemblyStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineInputAssemblyStateCreateFlags
    val mutable topology: VkPrimitiveTopology
    val mutable primitiveRestartEnable: VkBool32

[<Struct>]
type VkPipelineTessellationStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineTessellationStateCreateFlags
    val mutable patchControlPoints: uint32

[<Struct>]
type VkPipelineViewportStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineViewportStateCreateFlags
    val mutable viewportCount: uint32
    val pViewports: nativeptr<VkViewport>
    val mutable scissorCount: uint32
    val pScissors: nativeptr<VkRect2D>

[<Struct>]
type VkPipelineRasterizationStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineRasterizationStateCreateFlags
    val mutable depthClampEnable: VkBool32
    val mutable rasterizerDiscardEnable: VkBool32
    /// optional (GL45)
    val mutable polygonMode: VkPolygonMode
    val mutable cullMode: VkCullModeFlags
    val mutable frontFace: VkFrontFace
    val mutable depthBiasEnable: VkBool32
    val mutable depthBiasConstantFactor: float32
    val mutable depthBiasClamp: float32
    val mutable depthBiasSlopeFactor: float32
    val mutable lineWidth: float32

[<Struct>]
type VkPipelineMultisampleStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineMultisampleStateCreateFlags
    /// Number of samples used for rasterization
    val mutable rasterizationSamples: VkSampleCountFlagBits
    /// optional (GL45)
    val mutable sampleShadingEnable: VkBool32
    /// optional (GL45)
    val mutable minSampleShading: float32
    /// Array of sampleMask words
    val pSampleMask: nativeptr<VkSampleMask>
    val mutable alphaToCoverageEnable: VkBool32
    val mutable alphaToOneEnable: VkBool32

[<Struct>]
type VkPipelineColorBlendAttachmentState =
    val mutable blendEnable: VkBool32
    val mutable srcColorBlendFactor: VkBlendFactor
    val mutable dstColorBlendFactor: VkBlendFactor
    val mutable colorBlendOp: VkBlendOp
    val mutable srcAlphaBlendFactor: VkBlendFactor
    val mutable dstAlphaBlendFactor: VkBlendFactor
    val mutable alphaBlendOp: VkBlendOp
    val mutable colorWriteMask: VkColorComponentFlags

[<Struct>]
type VkPipelineColorBlendStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineColorBlendStateCreateFlags
    val mutable logicOpEnable: VkBool32
    val mutable logicOp: VkLogicOp
    /// # of pAttachments
    val mutable attachmentCount: uint32
    val pAttachments: nativeptr<VkPipelineColorBlendAttachmentState>
    val mutable blendConstants: float32

[<Struct>]
type VkPipelineDynamicStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineDynamicStateCreateFlags
    val mutable dynamicStateCount: uint32
    val pDynamicStates: nativeptr<VkDynamicState>

[<Struct>]
type VkStencilOpState =
    val mutable failOp: VkStencilOp
    val mutable passOp: VkStencilOp
    val mutable depthFailOp: VkStencilOp
    val mutable compareOp: VkCompareOp
    val mutable compareMask: uint32
    val mutable writeMask: uint32
    val mutable reference: uint32

[<Struct>]
type VkPipelineDepthStencilStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineDepthStencilStateCreateFlags
    val mutable depthTestEnable: VkBool32
    val mutable depthWriteEnable: VkBool32
    val mutable depthCompareOp: VkCompareOp
    /// optional (depth_bounds_test)
    val mutable depthBoundsTestEnable: VkBool32
    val mutable stencilTestEnable: VkBool32
    val mutable front: VkStencilOpState
    val mutable back: VkStencilOpState
    val mutable minDepthBounds: float32
    val mutable maxDepthBounds: float32

[<Struct>]
type VkGraphicsPipelineCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Pipeline creation flags
    val mutable flags: VkPipelineCreateFlags
    val mutable stageCount: uint32
    /// One entry for each active shader stage
    val pStages: nativeptr<VkPipelineShaderStageCreateInfo>
    val pVertexInputState: nativeptr<VkPipelineVertexInputStateCreateInfo>
    val pInputAssemblyState: nativeptr<VkPipelineInputAssemblyStateCreateInfo>
    val pTessellationState: nativeptr<VkPipelineTessellationStateCreateInfo>
    val pViewportState: nativeptr<VkPipelineViewportStateCreateInfo>
    val pRasterizationState: nativeptr<VkPipelineRasterizationStateCreateInfo>
    val pMultisampleState: nativeptr<VkPipelineMultisampleStateCreateInfo>
    val pDepthStencilState: nativeptr<VkPipelineDepthStencilStateCreateInfo>
    val pColorBlendState: nativeptr<VkPipelineColorBlendStateCreateInfo>
    val pDynamicState: nativeptr<VkPipelineDynamicStateCreateInfo>
    /// Interface layout of the pipeline
    val mutable layout: VkPipelineLayout
    val mutable renderPass: VkRenderPass
    val mutable subpass: uint32
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
    val mutable basePipelineHandle: VkPipeline
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
    val mutable basePipelineIndex: int

[<Struct>]
type VkPipelineCacheCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineCacheCreateFlags
    /// Size of initial data to populate cache, in bytes
    val mutable initialDataSize: unativeint
    /// Initial data to populate cache
    val pInitialData: nativeint

[<Struct>]
type VkPushConstantRange =
    /// Which stages use the range
    val mutable stageFlags: VkShaderStageFlags
    /// Start of the range, in bytes
    val mutable offset: uint32
    /// Size of the range, in bytes
    val mutable size: uint32

[<Struct>]
type VkPipelineLayoutCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineLayoutCreateFlags
    /// Number of descriptor sets interfaced by the pipeline
    val mutable setLayoutCount: uint32
    /// Array of setCount number of descriptor set layout objects defining the layout of the
    val pSetLayouts: nativeptr<VkDescriptorSetLayout>
    /// Number of push-constant ranges used by the pipeline
    val pushConstantRangeCount: uint32
    /// Array of pushConstantRangeCount number of ranges used by various shader stages
    val pPushConstantRanges: nativeptr<VkPushConstantRange>

[<Struct>]
type VkSamplerCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkSamplerCreateFlags
    /// Filter mode for magnification
    val mutable magFilter: VkFilter
    /// Filter mode for minifiation
    val mutable minFilter: VkFilter
    /// Mipmap selection mode
    val mutable mipmapMode: VkSamplerMipmapMode
    val mutable addressModeU: VkSamplerAddressMode
    val mutable addressModeV: VkSamplerAddressMode
    val mutable addressModeW: VkSamplerAddressMode
    val mutable mipLodBias: float32
    val mutable anisotropyEnable: VkBool32
    val mutable maxAnisotropy: float32
    val mutable compareEnable: VkBool32
    val mutable compareOp: VkCompareOp
    val mutable minLod: float32
    val mutable maxLod: float32
    val mutable borderColor: VkBorderColor
    val mutable unnormalizedCoordinates: VkBool32

[<Struct>]
type VkCommandPoolCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Command pool creation flags
    val mutable flags: VkCommandPoolCreateFlags
    val mutable queueFamilyIndex: uint32

[<Struct>]
type VkCommandBufferAllocateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable commandPool: VkCommandPool
    val mutable level: VkCommandBufferLevel
    val mutable commandBufferCount: uint32

[<Struct>]
type VkCommandBufferInheritanceInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Render pass for secondary command buffers
    val mutable renderPass: VkRenderPass
    val mutable subpass: uint32
    /// Framebuffer for secondary command buffers
    val mutable framebuffer: VkFramebuffer
    /// Whether this secondary command buffer may be executed during an occlusion query
    val mutable occlusionQueryEnable: VkBool32
    /// Query flags used by this secondary command buffer, if executed during an occlusion query
    val mutable queryFlags: VkQueryControlFlags
    /// Pipeline statistics that may be counted for this secondary command buffer
    val mutable pipelineStatistics: VkQueryPipelineStatisticFlags

[<Struct>]
type VkCommandBufferBeginInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Command buffer usage flags
    val mutable flags: VkCommandBufferUsageFlags
    /// Pointer to inheritance info for secondary command buffers
    val pInheritanceInfo: nativeptr<VkCommandBufferInheritanceInfo>

[<Struct>]
type VkRenderPassBeginInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable renderPass: VkRenderPass
    val mutable framebuffer: VkFramebuffer
    val mutable renderArea: VkRect2D
    val mutable clearValueCount: uint32
    val pClearValues: nativeptr<VkClearValue>

/// // Union allowing specification of floating point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared.
[<Struct;StructLayout(LayoutKind.Explicit)>]
type VkClearColorValue =
    [<FieldOffset(0)>] val mutable float32: float32
    [<FieldOffset(0)>] val mutable int32: int
    [<FieldOffset(0)>] val mutable uint32: uint32

[<Struct>]
type VkClearDepthStencilValue =
    val mutable depth: float32
    val mutable stencil: uint32

/// // Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared.
[<Struct;StructLayout(LayoutKind.Explicit)>]
type VkClearValue =
    [<FieldOffset(0)>] val mutable color: VkClearColorValue
    [<FieldOffset(0)>] val mutable depthStencil: VkClearDepthStencilValue

[<Struct>]
type VkClearAttachment =
    val mutable aspectMask: VkImageAspectFlags
    val mutable colorAttachment: uint32
    val mutable clearValue: VkClearValue

[<Struct>]
type VkAttachmentDescription =
    val mutable flags: VkAttachmentDescriptionFlags
    val mutable format: VkFormat
    val mutable samples: VkSampleCountFlagBits
    /// Load operation for color or depth data
    val mutable loadOp: VkAttachmentLoadOp
    /// Store operation for color or depth data
    val mutable storeOp: VkAttachmentStoreOp
    /// Load operation for stencil data
    val mutable stencilLoadOp: VkAttachmentLoadOp
    /// Store operation for stencil data
    val mutable stencilStoreOp: VkAttachmentStoreOp
    val mutable initialLayout: VkImageLayout
    val mutable finalLayout: VkImageLayout

[<Struct>]
type VkAttachmentReference =
    val mutable attachment: uint32
    val mutable layout: VkImageLayout

[<Struct>]
type VkSubpassDescription =
    val mutable flags: VkSubpassDescriptionFlags
    /// Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now
    val mutable pipelineBindPoint: VkPipelineBindPoint
    val mutable inputAttachmentCount: uint32
    val pInputAttachments: nativeptr<VkAttachmentReference>
    val mutable colorAttachmentCount: uint32
    val pColorAttachments: nativeptr<VkAttachmentReference>
    val pResolveAttachments: nativeptr<VkAttachmentReference>
    val pDepthStencilAttachment: nativeptr<VkAttachmentReference>
    val mutable preserveAttachmentCount: uint32
    val pPreserveAttachments: nativeptr<uint32>

[<Struct>]
type VkSubpassDependency =
    val mutable srcSubpass: uint32
    val mutable dstSubpass: uint32
    val mutable srcStageMask: VkPipelineStageFlags
    val mutable dstStageMask: VkPipelineStageFlags
    /// Memory accesses from the source of the dependency to synchronize
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    val mutable dstAccessMask: VkAccessFlags
    val mutable dependencyFlags: VkDependencyFlags

[<Struct>]
type VkRenderPassCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkRenderPassCreateFlags
    val mutable attachmentCount: uint32
    val pAttachments: nativeptr<VkAttachmentDescription>
    val mutable subpassCount: uint32
    val pSubpasses: nativeptr<VkSubpassDescription>
    val mutable dependencyCount: uint32
    val pDependencies: nativeptr<VkSubpassDependency>

[<Struct>]
type VkEventCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Event creation flags
    val mutable flags: VkEventCreateFlags

[<Struct>]
type VkFenceCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Fence creation flags
    val mutable flags: VkFenceCreateFlags

[<Struct>]
type VkPhysicalDeviceFeatures =
    /// out of bounds buffer accesses are well defined
    val mutable robustBufferAccess: VkBool32
    /// full 32-bit range of indices for indexed draw calls
    val mutable fullDrawIndexUint32: VkBool32
    /// image views which are arrays of cube maps
    val mutable imageCubeArray: VkBool32
    /// blending operations are controlled per-attachment
    val mutable independentBlend: VkBool32
    /// geometry stage
    val mutable geometryShader: VkBool32
    /// tessellation control and evaluation stage
    val mutable tessellationShader: VkBool32
    /// per-sample shading and interpolation
    val mutable sampleRateShading: VkBool32
    /// blend operations which take two sources
    val mutable dualSrcBlend: VkBool32
    /// logic operations
    val mutable logicOp: VkBool32
    /// multi draw indirect
    val mutable multiDrawIndirect: VkBool32
    /// indirect draws can use non-zero firstInstance
    val mutable drawIndirectFirstInstance: VkBool32
    /// depth clamping
    val mutable depthClamp: VkBool32
    /// depth bias clamping
    val mutable depthBiasClamp: VkBool32
    /// point and wireframe fill modes
    val mutable fillModeNonSolid: VkBool32
    /// depth bounds test
    val mutable depthBounds: VkBool32
    /// lines with width greater than 1
    val mutable wideLines: VkBool32
    /// points with size greater than 1
    val mutable largePoints: VkBool32
    /// the fragment alpha component can be forced to maximum representable alpha value
    val mutable alphaToOne: VkBool32
    /// viewport arrays
    val mutable multiViewport: VkBool32
    /// anisotropic sampler filtering
    val mutable samplerAnisotropy: VkBool32
    /// ETC texture compression formats
    val mutable textureCompressionETC2: VkBool32
    /// ASTC LDR texture compression formats
    val mutable textureCompressionASTC_LDR: VkBool32
    /// BC1-7 texture compressed formats
    val mutable textureCompressionBC: VkBool32
    /// precise occlusion queries returning actual sample counts
    val mutable occlusionQueryPrecise: VkBool32
    /// pipeline statistics query
    val mutable pipelineStatisticsQuery: VkBool32
    /// stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages
    val mutable vertexPipelineStoresAndAtomics: VkBool32
    /// stores and atomic ops on storage buffers and images are supported in the fragment stage
    val mutable fragmentStoresAndAtomics: VkBool32
    /// tessellation and geometry stages can export point size
    val mutable shaderTessellationAndGeometryPointSize: VkBool32
    /// image gather with run-time values and independent offsets
    val mutable shaderImageGatherExtended: VkBool32
    /// the extended set of formats can be used for storage images
    val mutable shaderStorageImageExtendedFormats: VkBool32
    /// multisample images can be used for storage images
    val mutable shaderStorageImageMultisample: VkBool32
    /// read from storage image does not require format qualifier
    val mutable shaderStorageImageReadWithoutFormat: VkBool32
    /// write to storage image does not require format qualifier
    val mutable shaderStorageImageWriteWithoutFormat: VkBool32
    /// arrays of uniform buffers can be accessed with dynamically uniform indices
    val mutable shaderUniformBufferArrayDynamicIndexing: VkBool32
    /// arrays of sampled images can be accessed with dynamically uniform indices
    val mutable shaderSampledImageArrayDynamicIndexing: VkBool32
    /// arrays of storage buffers can be accessed with dynamically uniform indices
    val mutable shaderStorageBufferArrayDynamicIndexing: VkBool32
    /// arrays of storage images can be accessed with dynamically uniform indices
    val mutable shaderStorageImageArrayDynamicIndexing: VkBool32
    /// clip distance in shaders
    val mutable shaderClipDistance: VkBool32
    /// cull distance in shaders
    val mutable shaderCullDistance: VkBool32
    /// 64-bit floats (doubles) in shaders
    val mutable shaderFloat64: VkBool32
    /// 64-bit integers in shaders
    val mutable shaderInt64: VkBool32
    /// 16-bit integers in shaders
    val mutable shaderInt16: VkBool32
    /// shader can use texture operations that return resource residency information (requires sparseNonResident support)
    val mutable shaderResourceResidency: VkBool32
    /// shader can use texture operations that specify minimum resource LOD
    val mutable shaderResourceMinLod: VkBool32
    /// Sparse resources support: Resource memory can be managed at opaque page level rather than object level
    val mutable sparseBinding: VkBool32
    /// Sparse resources support: GPU can access partially resident buffers 
    val mutable sparseResidencyBuffer: VkBool32
    /// Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images 
    val mutable sparseResidencyImage2D: VkBool32
    /// Sparse resources support: GPU can access partially resident 3D images 
    val mutable sparseResidencyImage3D: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples
    val mutable sparseResidency2Samples: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples
    val mutable sparseResidency4Samples: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples
    val mutable sparseResidency8Samples: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples
    val mutable sparseResidency16Samples: VkBool32
    /// Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in)
    val mutable sparseResidencyAliased: VkBool32
    /// multisample rate must be the same for all pipelines in a subpass
    val mutable variableMultisampleRate: VkBool32
    /// Queries may be inherited from primary to secondary command buffers
    val mutable inheritedQueries: VkBool32

[<Struct>]
type VkPhysicalDeviceSparseProperties =
    /// Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard sparse image block shapes (based on pixel format)
    val mutable residencyStandard2DBlockShape: VkBool32
    /// Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard sparse image block shapes (based on pixel format)
    val mutable residencyStandard2DMultisampleBlockShape: VkBool32
    /// Sparse resources support: GPU will access all 3D sparse resources using the standard sparse image block shapes (based on pixel format)
    val mutable residencyStandard3DBlockShape: VkBool32
    /// Sparse resources support: Images with mip level dimensions that are NOT a multiple of the sparse image block dimensions will be placed in the mip tail
    val mutable residencyAlignedMipSize: VkBool32
    /// Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded
    val mutable residencyNonResidentStrict: VkBool32

[<Struct>]
type VkPhysicalDeviceLimits =
    /// max 1D image dimension
    val mutable maxImageDimension1D: uint32
    /// max 2D image dimension
    val mutable maxImageDimension2D: uint32
    /// max 3D image dimension
    val mutable maxImageDimension3D: uint32
    /// max cubemap image dimension
    val mutable maxImageDimensionCube: uint32
    /// max layers for image arrays
    val mutable maxImageArrayLayers: uint32
    /// max texel buffer size (fstexels)
    val mutable maxTexelBufferElements: uint32
    /// max uniform buffer range (bytes)
    val mutable maxUniformBufferRange: uint32
    /// max storage buffer range (bytes)
    val mutable maxStorageBufferRange: uint32
    /// max size of the push constants pool (bytes)
    val maxPushConstantsSize: uint32
    /// max number of device memory allocations supported
    val mutable maxMemoryAllocationCount: uint32
    /// max number of samplers that can be allocated on a device
    val mutable maxSamplerAllocationCount: uint32
    /// Granularity (in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage
    val mutable bufferImageGranularity: VkDeviceSize
    /// Total address space available for sparse allocations (bytes)
    val mutable sparseAddressSpaceSize: VkDeviceSize
    /// max number of descriptors sets that can be bound to a pipeline
    val mutable maxBoundDescriptorSets: uint32
    /// max number of samplers allowed per-stage in a descriptor set
    val mutable maxPerStageDescriptorSamplers: uint32
    /// max number of uniform buffers allowed per-stage in a descriptor set
    val mutable maxPerStageDescriptorUniformBuffers: uint32
    /// max number of storage buffers allowed per-stage in a descriptor set
    val mutable maxPerStageDescriptorStorageBuffers: uint32
    /// max number of sampled images allowed per-stage in a descriptor set
    val mutable maxPerStageDescriptorSampledImages: uint32
    /// max number of storage images allowed per-stage in a descriptor set
    val mutable maxPerStageDescriptorStorageImages: uint32
    /// max number of input attachments allowed per-stage in a descriptor set
    val mutable maxPerStageDescriptorInputAttachments: uint32
    /// max number of resources allowed by a single stage
    val mutable maxPerStageResources: uint32
    /// max number of samplers allowed in all stages in a descriptor set
    val mutable maxDescriptorSetSamplers: uint32
    /// max number of uniform buffers allowed in all stages in a descriptor set
    val mutable maxDescriptorSetUniformBuffers: uint32
    /// max number of dynamic uniform buffers allowed in all stages in a descriptor set
    val mutable maxDescriptorSetUniformBuffersDynamic: uint32
    /// max number of storage buffers allowed in all stages in a descriptor set
    val mutable maxDescriptorSetStorageBuffers: uint32
    /// max number of dynamic storage buffers allowed in all stages in a descriptor set
    val mutable maxDescriptorSetStorageBuffersDynamic: uint32
    /// max number of sampled images allowed in all stages in a descriptor set
    val mutable maxDescriptorSetSampledImages: uint32
    /// max number of storage images allowed in all stages in a descriptor set
    val mutable maxDescriptorSetStorageImages: uint32
    /// max number of input attachments allowed in all stages in a descriptor set
    val mutable maxDescriptorSetInputAttachments: uint32
    /// max number of vertex input attribute slots
    val mutable maxVertexInputAttributes: uint32
    /// max number of vertex input binding slots
    val mutable maxVertexInputBindings: uint32
    /// max vertex input attribute offset added to vertex buffer offset
    val mutable maxVertexInputAttributeOffset: uint32
    /// max vertex input binding stride
    val mutable maxVertexInputBindingStride: uint32
    /// max number of output components written by vertex shader
    val mutable maxVertexOutputComponents: uint32
    /// max level supported by tessellation primitive generator
    val mutable maxTessellationGenerationLevel: uint32
    /// max patch size (vertices)
    val mutable maxTessellationPatchSize: uint32
    /// max number of input components per-vertex in TCS
    val mutable maxTessellationControlPerVertexInputComponents: uint32
    /// max number of output components per-vertex in TCS
    val mutable maxTessellationControlPerVertexOutputComponents: uint32
    /// max number of output components per-patch in TCS
    val mutable maxTessellationControlPerPatchOutputComponents: uint32
    /// max total number of per-vertex and per-patch output components in TCS
    val mutable maxTessellationControlTotalOutputComponents: uint32
    /// max number of input components per vertex in TES
    val mutable maxTessellationEvaluationInputComponents: uint32
    /// max number of output components per vertex in TES
    val mutable maxTessellationEvaluationOutputComponents: uint32
    /// max invocation count supported in geometry shader
    val mutable maxGeometryShaderInvocations: uint32
    /// max number of input components read in geometry stage
    val mutable maxGeometryInputComponents: uint32
    /// max number of output components written in geometry stage
    val mutable maxGeometryOutputComponents: uint32
    /// max number of vertices that can be emitted in geometry stage
    val mutable maxGeometryOutputVertices: uint32
    /// max total number of components (all vertices) written in geometry stage
    val mutable maxGeometryTotalOutputComponents: uint32
    /// max number of input components read in fragment stage
    val mutable maxFragmentInputComponents: uint32
    /// max number of output attachments written in fragment stage
    val mutable maxFragmentOutputAttachments: uint32
    /// max number of output attachments written when using dual source blending
    val mutable maxFragmentDualSrcAttachments: uint32
    /// max total number of storage buffers, storage images and output buffers
    val mutable maxFragmentCombinedOutputResources: uint32
    /// max total storage size of work group local storage (bytes)
    val mutable maxComputeSharedMemorySize: uint32
    /// max num of compute work groups that may be dispatched by a single command (x,y,z)
    val mutable maxComputeWorkGroupCount: uint32
    /// max total compute invocations in a single local work group
    val mutable maxComputeWorkGroupInvocations: uint32
    /// max local size of a compute work group (x,y,z)
    val mutable maxComputeWorkGroupSize: uint32
    /// number bits of subpixel precision in screen x and y
    val mutable subPixelPrecisionBits: uint32
    /// number bits of precision for selecting texel weights
    val mutable subTexelPrecisionBits: uint32
    /// number bits of precision for selecting mipmap weights
    val mutable mipmapPrecisionBits: uint32
    /// max index value for indexed draw calls (for 32-bit indices)
    val mutable maxDrawIndexedIndexValue: uint32
    /// max draw count for indirect draw calls
    val mutable maxDrawIndirectCount: uint32
    /// max absolute sampler LOD bias
    val mutable maxSamplerLodBias: float32
    /// max degree of sampler anisotropy
    val mutable maxSamplerAnisotropy: float32
    /// max number of active viewports
    val mutable maxViewports: uint32
    /// max viewport dimensions (x,y)
    val mutable maxViewportDimensions: uint32
    /// viewport bounds range (min,max)
    val mutable viewportBoundsRange: float32
    /// number bits of subpixel precision for viewport
    val mutable viewportSubPixelBits: uint32
    /// min required alignment of pointers returned by MapMemory (bytes)
    val mutable minMemoryMapAlignment: unativeint
    /// min required alignment for texel buffer offsets (bytes) 
    val mutable minTexelBufferOffsetAlignment: VkDeviceSize
    /// min required alignment for uniform buffer sizes and offsets (bytes)
    val mutable minUniformBufferOffsetAlignment: VkDeviceSize
    /// min required alignment for storage buffer offsets (bytes)
    val mutable minStorageBufferOffsetAlignment: VkDeviceSize
    /// min texel offset for OpTextureSampleOffset
    val mutable minTexelOffset: int
    /// max texel offset for OpTextureSampleOffset
    val mutable maxTexelOffset: uint32
    /// min texel offset for OpTextureGatherOffset
    val mutable minTexelGatherOffset: int
    /// max texel offset for OpTextureGatherOffset
    val mutable maxTexelGatherOffset: uint32
    /// furthest negative offset for interpolateAtOffset
    val mutable minInterpolationOffset: float32
    /// furthest positive offset for interpolateAtOffset
    val mutable maxInterpolationOffset: float32
    /// number of subpixel bits for interpolateAtOffset
    val mutable subPixelInterpolationOffsetBits: uint32
    /// max width for a framebuffer
    val mutable maxFramebufferWidth: uint32
    /// max height for a framebuffer
    val mutable maxFramebufferHeight: uint32
    /// max layer count for a layered framebuffer
    val mutable maxFramebufferLayers: uint32
    /// supported color sample counts for a framebuffer
    val mutable framebufferColorSampleCounts: VkSampleCountFlags
    /// supported depth sample counts for a framebuffer
    val mutable framebufferDepthSampleCounts: VkSampleCountFlags
    /// supported stencil sample counts for a framebuffer
    val mutable framebufferStencilSampleCounts: VkSampleCountFlags
    /// supported sample counts for a framebuffer with no attachments
    val mutable framebufferNoAttachmentsSampleCounts: VkSampleCountFlags
    /// max number of color attachments per subpass
    val mutable maxColorAttachments: uint32
    /// supported color sample counts for a non-integer sampled image
    val mutable sampledImageColorSampleCounts: VkSampleCountFlags
    /// supported sample counts for an integer image
    val mutable sampledImageIntegerSampleCounts: VkSampleCountFlags
    /// supported depth sample counts for a sampled image
    val mutable sampledImageDepthSampleCounts: VkSampleCountFlags
    /// supported stencil sample counts for a sampled image
    val mutable sampledImageStencilSampleCounts: VkSampleCountFlags
    /// supported sample counts for a storage image
    val mutable storageImageSampleCounts: VkSampleCountFlags
    /// max number of sample mask words
    val mutable maxSampleMaskWords: uint32
    /// timestamps on graphics and compute queues
    val mutable timestampComputeAndGraphics: VkBool32
    /// number of nanoseconds it takes for timestamp query value to increment by 1
    val mutable timestampPeriod: float32
    /// max number of clip distances
    val mutable maxClipDistances: uint32
    /// max number of cull distances
    val mutable maxCullDistances: uint32
    /// max combined number of user clipping
    val mutable maxCombinedClipAndCullDistances: uint32
    /// distinct queue priorities available 
    val mutable discreteQueuePriorities: uint32
    /// range (min,max) of supported point sizes
    val mutable pointSizeRange: float32
    /// range (min,max) of supported line widths
    val mutable lineWidthRange: float32
    /// granularity of supported point sizes
    val mutable pointSizeGranularity: float32
    /// granularity of supported line widths
    val mutable lineWidthGranularity: float32
    /// line rasterization follows preferred rules
    val mutable strictLines: VkBool32
    /// supports standard sample locations for all supported sample counts
    val mutable standardSampleLocations: VkBool32
    /// optimal offset of buffer copies
    val mutable optimalBufferCopyOffsetAlignment: VkDeviceSize
    /// optimal pitch of buffer copies
    val mutable optimalBufferCopyRowPitchAlignment: VkDeviceSize
    /// minimum size and alignment for non-coherent host-mapped device memory access
    val mutable nonCoherentAtomSize: VkDeviceSize

[<Struct>]
type VkSemaphoreCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Semaphore creation flags
    val mutable flags: VkSemaphoreCreateFlags

[<Struct>]
type VkQueryPoolCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkQueryPoolCreateFlags
    val mutable queryType: VkQueryType
    val mutable queryCount: uint32
    /// Optional
    val mutable pipelineStatistics: VkQueryPipelineStatisticFlags

[<Struct>]
type VkFramebufferCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkFramebufferCreateFlags
    val mutable renderPass: VkRenderPass
    val mutable attachmentCount: uint32
    val pAttachments: nativeptr<VkImageView>
    val mutable width: uint32
    val mutable height: uint32
    val mutable layers: uint32

[<Struct>]
type VkDrawIndirectCommand =
    val mutable vertexCount: uint32
    val mutable instanceCount: uint32
    val mutable firstVertex: uint32
    val mutable firstInstance: uint32

[<Struct>]
type VkDrawIndexedIndirectCommand =
    val mutable indexCount: uint32
    val mutable instanceCount: uint32
    val mutable firstIndex: uint32
    val mutable vertexOffset: int
    val mutable firstInstance: uint32

[<Struct>]
type VkDispatchIndirectCommand =
    val mutable x: uint32
    val mutable y: uint32
    val mutable z: uint32

[<Struct>]
type VkSubmitInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable waitSemaphoreCount: uint32
    val pWaitSemaphores: nativeptr<VkSemaphore>
    val pWaitDstStageMask: nativeptr<VkPipelineStageFlags>
    val mutable commandBufferCount: uint32
    val pCommandBuffers: nativeptr<VkCommandBuffer>
    val mutable signalSemaphoreCount: uint32
    val pSignalSemaphores: nativeptr<VkSemaphore>

[<Struct>]
type VkDisplayPropertiesKHR =
    /// Handle of the display object
    val mutable display: VkDisplayKHR
    /// Name of the display
    val displayName: nativeptr<char>
    /// In millimeters?
    val mutable physicalDimensions: VkExtent2D
    /// Max resolution for CRT?
    val mutable physicalResolution: VkExtent2D
    /// one or more bits from VkSurfaceTransformFlagsKHR
    val mutable supportedTransforms: VkSurfaceTransformFlagsKHR
    /// VK_TRUE if the overlay plane's z-order can be changed on this display.
    val mutable planeReorderPossible: VkBool32
    /// VK_TRUE if this is a "smart" display that supports self-refresh/internal buffering.
    val mutable persistentContent: VkBool32

[<Struct>]
type VkDisplayPlanePropertiesKHR =
    /// Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use.
    val mutable currentDisplay: VkDisplayKHR
    /// Current z-order of the plane.
    val mutable currentStackIndex: uint32

[<Struct>]
type VkDisplayModeParametersKHR =
    /// Visible scanout region.
    val mutable visibleRegion: VkExtent2D
    /// Number of times per second the display is updated.
    val mutable refreshRate: uint32

[<Struct>]
type VkDisplayModePropertiesKHR =
    /// Handle of this display mode.
    val mutable displayMode: VkDisplayModeKHR
    /// The parameters this mode uses.
    val mutable parameters: VkDisplayModeParametersKHR

[<Struct>]
type VkDisplayModeCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDisplayModeCreateFlagsKHR
    /// The parameters this mode uses.
    val mutable parameters: VkDisplayModeParametersKHR

[<Struct>]
type VkDisplayPlaneCapabilitiesKHR =
    /// Types of alpha blending supported, if any.
    val mutable supportedAlpha: VkDisplayPlaneAlphaFlagsKHR
    /// Does the plane have any position and extent restrictions?
    val mutable minSrcPosition: VkOffset2D
    val mutable maxSrcPosition: VkOffset2D
    val mutable minSrcExtent: VkExtent2D
    val mutable maxSrcExtent: VkExtent2D
    val mutable minDstPosition: VkOffset2D
    val mutable maxDstPosition: VkOffset2D
    val mutable minDstExtent: VkExtent2D
    val mutable maxDstExtent: VkExtent2D

[<Struct>]
type VkDisplaySurfaceCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDisplaySurfaceCreateFlagsKHR
    /// The mode to use when displaying this surface
    val mutable displayMode: VkDisplayModeKHR
    /// The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount.
    val mutable planeIndex: uint32
    /// The z-order of the plane.
    val mutable planeStackIndex: uint32
    /// Transform to apply to the images as part of the scanout operation
    val mutable transform: VkSurfaceTransformFlagBitsKHR
    /// Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR
    val mutable globalAlpha: float32
    /// What type of alpha blending to use.  Must be a bit from vkGetDisplayPlanePropertiesKHR::supportedAlpha.
    val mutable alphaMode: VkDisplayPlaneAlphaFlagBitsKHR
    /// size of the images to use with this surface
    val mutable imageExtent: VkExtent2D

[<Struct>]
type VkDisplayPresentInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Rectangle within the presentable image to read pixel data from when presenting to the display.
    val mutable srcRect: VkRect2D
    /// Rectangle within the current display mode's visible region to display srcRectangle in.
    val mutable dstRect: VkRect2D
    /// For smart displays, use buffered mode.  If the display properties member "persistentMode" is VK_FALSE, this member must always be VK_FALSE.
    val mutable persistent: VkBool32

[<Struct>]
type VkSurfaceCapabilitiesKHR =
    /// Supported minimum number of images for the surface
    val mutable minImageCount: uint32
    /// Supported maximum number of images for the surface, 0 for unlimited
    val mutable maxImageCount: uint32
    /// Current image width and height for the surface, (0, 0) if undefined
    val mutable currentExtent: VkExtent2D
    /// Supported minimum image width and height for the surface
    val mutable minImageExtent: VkExtent2D
    /// Supported maximum image width and height for the surface
    val mutable maxImageExtent: VkExtent2D
    /// Supported maximum number of image layers for the surface
    val mutable maxImageArrayLayers: uint32
    /// 1 or more bits representing the transforms supported
    val mutable supportedTransforms: VkSurfaceTransformFlagsKHR
    /// The surface's current transform relative to the device's natural orientation
    val mutable currentTransform: VkSurfaceTransformFlagBitsKHR
    /// 1 or more bits representing the alpha compositing modes supported
    val mutable supportedCompositeAlpha: VkCompositeAlphaFlagsKHR
    /// Supported image usage flags for the surface
    val mutable supportedUsageFlags: VkImageUsageFlags

[<Struct>]
type VkAndroidSurfaceCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkAndroidSurfaceCreateFlagsKHR
    val mutable window: nativeptr<ANativeWindow>

[<Struct>]
type VkViSurfaceCreateInfoNN =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkViSurfaceCreateFlagsNN
    val mutable window: nativeint

[<Struct>]
type VkWaylandSurfaceCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkWaylandSurfaceCreateFlagsKHR
    val mutable display: nativeptr<wl_display>
    val mutable surface: nativeptr<wl_surface>

[<Struct>]
type VkWin32SurfaceCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkWin32SurfaceCreateFlagsKHR
    val mutable hinstance: HINSTANCE
    val mutable hwnd: HWND

[<Struct>]
type VkXlibSurfaceCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkXlibSurfaceCreateFlagsKHR
    val mutable dpy: nativeptr<Display>
    val mutable window: Window

[<Struct>]
type VkXcbSurfaceCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkXcbSurfaceCreateFlagsKHR
    val mutable connection: nativeptr<xcb_connection_t>
    val mutable window: xcb_window_t

[<Struct>]
type VkImagePipeSurfaceCreateInfoFUCHSIA =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkImagePipeSurfaceCreateFlagsFUCHSIA
    val mutable imagePipeHandle: zx_handle_t

[<Struct>]
type VkStreamDescriptorSurfaceCreateInfoGGP =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkStreamDescriptorSurfaceCreateFlagsGGP
    val mutable streamDescriptor: GgpStreamDescriptor

[<Struct>]
type VkSurfaceFormatKHR =
    /// Supported pair of rendering format
    val mutable format: VkFormat
    /// and color space for the surface
    val mutable colorSpace: VkColorSpaceKHR

[<Struct>]
type VkSwapchainCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkSwapchainCreateFlagsKHR
    /// The swapchain's target surface
    val mutable surface: VkSurfaceKHR
    /// Minimum number of presentation images the application needs
    val mutable minImageCount: uint32
    /// Format of the presentation images
    val mutable imageFormat: VkFormat
    /// Colorspace of the presentation images
    val mutable imageColorSpace: VkColorSpaceKHR
    /// Dimensions of the presentation images
    val mutable imageExtent: VkExtent2D
    /// Determines the number of views for multiview/stereo presentation
    val mutable imageArrayLayers: uint32
    /// Bits indicating how the presentation images will be used
    val mutable imageUsage: VkImageUsageFlags
    /// Sharing mode used for the presentation images
    val mutable imageSharingMode: VkSharingMode
    /// Number of queue families having access to the images in case of concurrent sharing mode
    val mutable queueFamilyIndexCount: uint32
    /// Array of queue family indices having access to the images in case of concurrent sharing mode
    val pQueueFamilyIndices: nativeptr<uint32>
    /// The transform, relative to the device's natural orientation, applied to the image content prior to presentation
    val mutable preTransform: VkSurfaceTransformFlagBitsKHR
    /// The alpha blending mode used when compositing this surface with other surfaces in the window system
    val mutable compositeAlpha: VkCompositeAlphaFlagBitsKHR
    /// Which presentation mode to use for presents on this swap chain
    val mutable presentMode: VkPresentModeKHR
    /// Specifies whether presentable images may be affected by window clip regions
    val mutable clipped: VkBool32
    /// Existing swap chain to replace, if any
    val mutable oldSwapchain: VkSwapchainKHR

[<Struct>]
type VkPresentInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Number of semaphores to wait for before presenting
    val mutable waitSemaphoreCount: uint32
    /// Semaphores to wait for before presenting
    val pWaitSemaphores: nativeptr<VkSemaphore>
    /// Number of swapchains to present in this call
    val mutable swapchainCount: uint32
    /// Swapchains to present an image from
    val pSwapchains: nativeptr<VkSwapchainKHR>
    /// Indices of which presentable images to present
    val pImageIndices: nativeptr<uint32>
    /// Optional (i.e. if non-NULL) VkResult for each swapchain
    val mutable pResults: nativeptr<VkResult>

[<Struct>]
type VkDebugReportCallbackCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Indicates which events call this callback
    val mutable flags: VkDebugReportFlagsEXT
    /// Function pointer of a callback function
    val mutable pfnCallback: PFN_vkDebugReportCallbackEXT
    /// User data provided to callback function
    val mutable pUserData: nativeint

[<Struct>]
type VkValidationFlagsEXT =
    /// Must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Number of validation checks to disable
    val mutable disabledValidationCheckCount: uint32
    /// Validation checks to disable
    val pDisabledValidationChecks: nativeptr<VkValidationCheckEXT>

[<Struct>]
type VkValidationFeaturesEXT =
    /// Must be VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Number of validation features to enable
    val mutable enabledValidationFeatureCount: uint32
    /// Validation features to enable
    val pEnabledValidationFeatures: nativeptr<VkValidationFeatureEnableEXT>
    /// Number of validation features to disable
    val mutable disabledValidationFeatureCount: uint32
    /// Validation features to disable
    val pDisabledValidationFeatures: nativeptr<VkValidationFeatureDisableEXT>

[<Struct>]
type VkPipelineRasterizationStateRasterizationOrderAMD =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Rasterization order to use for the pipeline
    val mutable rasterizationOrder: VkRasterizationOrderAMD

[<Struct>]
type VkDebugMarkerObjectNameInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// The type of the object
    val mutable objectType: VkDebugReportObjectTypeEXT
    /// The handle of the object, cast to uint64_t
    val mutable object: uint64
    /// Name to apply to the object
    val pObjectName: nativeptr<char>

[<Struct>]
type VkDebugMarkerObjectTagInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// The type of the object
    val mutable objectType: VkDebugReportObjectTypeEXT
    /// The handle of the object, cast to uint64_t
    val mutable object: uint64
    /// The name of the tag to set on the object
    val mutable tagName: uint64
    /// The length in bytes of the tag data
    val mutable tagSize: unativeint
    /// Tag data to attach to the object
    val pTag: nativeint

[<Struct>]
type VkDebugMarkerMarkerInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Name of the debug marker
    val pMarkerName: nativeptr<char>
    /// Optional color for debug marker
    val mutable color: float32

[<Struct>]
type VkDedicatedAllocationImageCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Whether this image uses a dedicated allocation
    val mutable dedicatedAllocation: VkBool32

[<Struct>]
type VkDedicatedAllocationBufferCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Whether this buffer uses a dedicated allocation
    val mutable dedicatedAllocation: VkBool32

[<Struct>]
type VkDedicatedAllocationMemoryAllocateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Image that this allocation will be bound to
    val mutable image: VkImage
    /// Buffer that this allocation will be bound to
    val mutable buffer: VkBuffer

[<Struct>]
type VkExternalImageFormatPropertiesNV =
    val mutable imageFormatProperties: VkImageFormatProperties
    val mutable externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV
    val mutable exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV
    val mutable compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV

[<Struct>]
type VkExternalMemoryImageCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleTypes: VkExternalMemoryHandleTypeFlagsNV

[<Struct>]
type VkExportMemoryAllocateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleTypes: VkExternalMemoryHandleTypeFlagsNV

[<Struct>]
type VkImportMemoryWin32HandleInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleType: VkExternalMemoryHandleTypeFlagsNV
    val mutable handle: HANDLE

[<Struct>]
type VkExportMemoryWin32HandleInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    val mutable dwAccess: DWORD

[<Struct>]
type VkWin32KeyedMutexAcquireReleaseInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable acquireCount: uint32
    val pAcquireSyncs: nativeptr<VkDeviceMemory>
    val pAcquireKeys: nativeptr<uint64>
    val pAcquireTimeoutMilliseconds: nativeptr<uint32>
    val mutable releaseCount: uint32
    val pReleaseSyncs: nativeptr<VkDeviceMemory>
    val pReleaseKeys: nativeptr<uint64>

[<Struct>]
type VkDeviceGeneratedCommandsFeaturesNVX =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable computeBindingPointSupport: VkBool32

[<Struct>]
type VkDeviceGeneratedCommandsLimitsNVX =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable maxIndirectCommandsLayoutTokenCount: uint32
    val mutable maxObjectEntryCounts: uint32
    val mutable minSequenceCountBufferOffsetAlignment: uint32
    val mutable minSequenceIndexBufferOffsetAlignment: uint32
    val mutable minCommandsTokenBufferOffsetAlignment: uint32

[<Struct>]
type VkIndirectCommandsTokenNVX =
    val mutable tokenType: VkIndirectCommandsTokenTypeNVX
    /// buffer containing tableEntries and additional data for indirectCommands
    val mutable buffer: VkBuffer
    /// offset from the base address of the buffer
    val mutable offset: VkDeviceSize

[<Struct>]
type VkIndirectCommandsLayoutTokenNVX =
    val mutable tokenType: VkIndirectCommandsTokenTypeNVX
    /// Binding unit for vertex attribute / descriptor set, offset for pushconstants
    val bindingUnit: uint32
    /// Number of variable dynamic values for descriptor set / push constants
    val dynamicCount: uint32
    /// Rate the which the array is advanced per element (must be power of 2, minimum 1)
    val mutable divisor: uint32

[<Struct>]
type VkIndirectCommandsLayoutCreateInfoNVX =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable pipelineBindPoint: VkPipelineBindPoint
    val mutable flags: VkIndirectCommandsLayoutUsageFlagsNVX
    val mutable tokenCount: uint32
    val pTokens: nativeptr<VkIndirectCommandsLayoutTokenNVX>

[<Struct>]
type VkCmdProcessCommandsInfoNVX =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable objectTable: VkObjectTableNVX
    val mutable indirectCommandsLayout: VkIndirectCommandsLayoutNVX
    val mutable indirectCommandsTokenCount: uint32
    val pIndirectCommandsTokens: nativeptr<VkIndirectCommandsTokenNVX>
    val mutable maxSequencesCount: uint32
    val mutable targetCommandBuffer: VkCommandBuffer
    val mutable sequencesCountBuffer: VkBuffer
    val mutable sequencesCountOffset: VkDeviceSize
    val mutable sequencesIndexBuffer: VkBuffer
    val mutable sequencesIndexOffset: VkDeviceSize

[<Struct>]
type VkCmdReserveSpaceForCommandsInfoNVX =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable objectTable: VkObjectTableNVX
    val mutable indirectCommandsLayout: VkIndirectCommandsLayoutNVX
    val mutable maxSequencesCount: uint32

[<Struct>]
type VkObjectTableCreateInfoNVX =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable objectCount: uint32
    val pObjectEntryTypes: nativeptr<VkObjectEntryTypeNVX>
    val pObjectEntryCounts: nativeptr<uint32>
    val pObjectEntryUsageFlags: nativeptr<VkObjectEntryUsageFlagsNVX>
    val mutable maxUniformBuffersPerDescriptor: uint32
    val mutable maxStorageBuffersPerDescriptor: uint32
    val mutable maxStorageImagesPerDescriptor: uint32
    val mutable maxSampledImagesPerDescriptor: uint32
    val mutable maxPipelineLayouts: uint32

[<Struct>]
type VkObjectTableEntryNVX =
    val mutable typ: VkObjectEntryTypeNVX
    val mutable flags: VkObjectEntryUsageFlagsNVX

[<Struct>]
type VkObjectTablePipelineEntryNVX =
    val mutable typ: VkObjectEntryTypeNVX
    val mutable flags: VkObjectEntryUsageFlagsNVX
    val mutable pipeline: VkPipeline

[<Struct>]
type VkObjectTableDescriptorSetEntryNVX =
    val mutable typ: VkObjectEntryTypeNVX
    val mutable flags: VkObjectEntryUsageFlagsNVX
    val mutable pipelineLayout: VkPipelineLayout
    val mutable descriptorSet: VkDescriptorSet

[<Struct>]
type VkObjectTableVertexBufferEntryNVX =
    val mutable typ: VkObjectEntryTypeNVX
    val mutable flags: VkObjectEntryUsageFlagsNVX
    val mutable buffer: VkBuffer

[<Struct>]
type VkObjectTableIndexBufferEntryNVX =
    val mutable typ: VkObjectEntryTypeNVX
    val mutable flags: VkObjectEntryUsageFlagsNVX
    val mutable buffer: VkBuffer
    val mutable indexType: VkIndexType

[<Struct>]
type VkObjectTablePushConstantEntryNVX =
    val mutable typ: VkObjectEntryTypeNVX
    val mutable flags: VkObjectEntryUsageFlagsNVX
    val mutable pipelineLayout: VkPipelineLayout
    val mutable stageFlags: VkShaderStageFlags

[<Struct>]
type VkPhysicalDeviceFeatures2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable features: VkPhysicalDeviceFeatures

type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2

[<Struct>]
type VkPhysicalDeviceProperties2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable properties: VkPhysicalDeviceProperties

type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2

[<Struct>]
type VkFormatProperties2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable formatProperties: VkFormatProperties

type VkFormatProperties2KHR = VkFormatProperties2

[<Struct>]
type VkImageFormatProperties2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable imageFormatProperties: VkImageFormatProperties

type VkImageFormatProperties2KHR = VkImageFormatProperties2

[<Struct>]
type VkPhysicalDeviceImageFormatInfo2 =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable format: VkFormat
    val mutable typ: VkImageType
    val mutable tiling: VkImageTiling
    val mutable usage: VkImageUsageFlags
    val mutable flags: VkImageCreateFlags

type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2

[<Struct>]
type VkQueueFamilyProperties2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable queueFamilyProperties: VkQueueFamilyProperties

type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2

[<Struct>]
type VkPhysicalDeviceMemoryProperties2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable memoryProperties: VkPhysicalDeviceMemoryProperties

type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2

[<Struct>]
type VkSparseImageFormatProperties2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable properties: VkSparseImageFormatProperties

type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2

[<Struct>]
type VkPhysicalDeviceSparseImageFormatInfo2 =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable format: VkFormat
    val mutable typ: VkImageType
    val mutable samples: VkSampleCountFlagBits
    val mutable usage: VkImageUsageFlags
    val mutable tiling: VkImageTiling

type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2

[<Struct>]
type VkPhysicalDevicePushDescriptorPropertiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxPushDescriptors: uint32

[<Struct>]
type VkConformanceVersionKHR =
    val mutable major: byte
    val mutable minor: byte
    val mutable subminor: byte
    val mutable patch: byte

[<Struct>]
type VkPhysicalDeviceDriverPropertiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable driverID: VkDriverIdKHR
    val mutable driverName: char
    val mutable driverInfo: char
    val mutable conformanceVersion: VkConformanceVersionKHR

[<Struct>]
type VkPresentRegionsKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Copy of VkPresentInfoKHR::swapchainCount
    val mutable swapchainCount: uint32
    /// The regions that have changed
    val pRegions: nativeptr<VkPresentRegionKHR>

[<Struct>]
type VkPresentRegionKHR =
    /// Number of rectangles in pRectangles
    val mutable rectangleCount: uint32
    /// Array of rectangles that have changed in a swapchain's image(s)
    val pRectangles: nativeptr<VkRectLayerKHR>

[<Struct>]
type VkRectLayerKHR =
    /// upper-left corner of a rectangle that has not changed, in pixels of a presentation images
    val mutable offset: VkOffset2D
    /// Dimensions of a rectangle that has not changed, in pixels of a presentation images
    val mutable extent: VkExtent2D
    /// Layer of a swapchain's image(s), for stereoscopic-3D images
    val mutable layer: uint32

[<Struct>]
type VkPhysicalDeviceVariablePointersFeatures =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable variablePointersStorageBuffer: VkBool32
    val mutable variablePointers: VkBool32

type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures

type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures

type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures

[<Struct>]
type VkExternalMemoryProperties =
    val mutable externalMemoryFeatures: VkExternalMemoryFeatureFlags
    val mutable exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags
    val mutable compatibleHandleTypes: VkExternalMemoryHandleTypeFlags

type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties

[<Struct>]
type VkPhysicalDeviceExternalImageFormatInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo

[<Struct>]
type VkExternalImageFormatProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable externalMemoryProperties: VkExternalMemoryProperties

type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties

[<Struct>]
type VkPhysicalDeviceExternalBufferInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkBufferCreateFlags
    val mutable usage: VkBufferUsageFlags
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo

[<Struct>]
type VkExternalBufferProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable externalMemoryProperties: VkExternalMemoryProperties

type VkExternalBufferPropertiesKHR = VkExternalBufferProperties

[<Struct>]
type VkPhysicalDeviceIDProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable deviceUUID: byte
    val mutable driverUUID: byte
    val mutable deviceLUID: byte
    val mutable deviceNodeMask: uint32
    val mutable deviceLUIDValid: VkBool32

type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties

[<Struct>]
type VkExternalMemoryImageCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleTypes: VkExternalMemoryHandleTypeFlags

type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo

[<Struct>]
type VkExternalMemoryBufferCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleTypes: VkExternalMemoryHandleTypeFlags

type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo

[<Struct>]
type VkExportMemoryAllocateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleTypes: VkExternalMemoryHandleTypeFlags

type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo

[<Struct>]
type VkImportMemoryWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits
    val mutable handle: HANDLE
    val mutable name: LPCWSTR

[<Struct>]
type VkExportMemoryWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    val mutable dwAccess: DWORD
    val mutable name: LPCWSTR

[<Struct>]
type VkMemoryWin32HandlePropertiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable memoryTypeBits: uint32

[<Struct>]
type VkMemoryGetWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable memory: VkDeviceMemory
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

[<Struct>]
type VkImportMemoryFdInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits
    val mutable fd: int

[<Struct>]
type VkMemoryFdPropertiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable memoryTypeBits: uint32

[<Struct>]
type VkMemoryGetFdInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable memory: VkDeviceMemory
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

[<Struct>]
type VkWin32KeyedMutexAcquireReleaseInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable acquireCount: uint32
    val pAcquireSyncs: nativeptr<VkDeviceMemory>
    val pAcquireKeys: nativeptr<uint64>
    val pAcquireTimeouts: nativeptr<uint32>
    val mutable releaseCount: uint32
    val pReleaseSyncs: nativeptr<VkDeviceMemory>
    val pReleaseKeys: nativeptr<uint64>

[<Struct>]
type VkPhysicalDeviceExternalSemaphoreInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits

type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo

[<Struct>]
type VkExternalSemaphoreProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags
    val mutable compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags
    val mutable externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags

type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties

[<Struct>]
type VkExportSemaphoreCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleTypes: VkExternalSemaphoreHandleTypeFlags

type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo

[<Struct>]
type VkImportSemaphoreWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable semaphore: VkSemaphore
    val mutable flags: VkSemaphoreImportFlags
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits
    val mutable handle: HANDLE
    val mutable name: LPCWSTR

[<Struct>]
type VkExportSemaphoreWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    val mutable dwAccess: DWORD
    val mutable name: LPCWSTR

[<Struct>]
type VkD3D12FenceSubmitInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable waitSemaphoreValuesCount: uint32
    val pWaitSemaphoreValues: nativeptr<uint64>
    val mutable signalSemaphoreValuesCount: uint32
    val pSignalSemaphoreValues: nativeptr<uint64>

[<Struct>]
type VkSemaphoreGetWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable semaphore: VkSemaphore
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits

[<Struct>]
type VkImportSemaphoreFdInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable semaphore: VkSemaphore
    val mutable flags: VkSemaphoreImportFlags
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits
    val mutable fd: int

[<Struct>]
type VkSemaphoreGetFdInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable semaphore: VkSemaphore
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits

[<Struct>]
type VkPhysicalDeviceExternalFenceInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleType: VkExternalFenceHandleTypeFlagBits

type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo

[<Struct>]
type VkExternalFenceProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags
    val mutable compatibleHandleTypes: VkExternalFenceHandleTypeFlags
    val mutable externalFenceFeatures: VkExternalFenceFeatureFlags

type VkExternalFencePropertiesKHR = VkExternalFenceProperties

[<Struct>]
type VkExportFenceCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleTypes: VkExternalFenceHandleTypeFlags

type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo

[<Struct>]
type VkImportFenceWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable fence: VkFence
    val mutable flags: VkFenceImportFlags
    val mutable handleType: VkExternalFenceHandleTypeFlagBits
    val mutable handle: HANDLE
    val mutable name: LPCWSTR

[<Struct>]
type VkExportFenceWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    val mutable dwAccess: DWORD
    val mutable name: LPCWSTR

[<Struct>]
type VkFenceGetWin32HandleInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable fence: VkFence
    val mutable handleType: VkExternalFenceHandleTypeFlagBits

[<Struct>]
type VkImportFenceFdInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable fence: VkFence
    val mutable flags: VkFenceImportFlags
    val mutable handleType: VkExternalFenceHandleTypeFlagBits
    val mutable fd: int

[<Struct>]
type VkFenceGetFdInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable fence: VkFence
    val mutable handleType: VkExternalFenceHandleTypeFlagBits

[<Struct>]
type VkPhysicalDeviceMultiviewFeatures =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// Multiple views in a renderpass
    val mutable multiview: VkBool32
    /// Multiple views in a renderpass w/ geometry shader
    val mutable multiviewGeometryShader: VkBool32
    /// Multiple views in a renderpass w/ tessellation shader
    val mutable multiviewTessellationShader: VkBool32

type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures

[<Struct>]
type VkPhysicalDeviceMultiviewProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// max number of views in a subpass
    val mutable maxMultiviewViewCount: uint32
    /// max instance index for a draw in a multiview subpass
    val mutable maxMultiviewInstanceIndex: uint32

type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties

[<Struct>]
type VkRenderPassMultiviewCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable subpassCount: uint32
    val pViewMasks: nativeptr<uint32>
    val mutable dependencyCount: uint32
    val pViewOffsets: nativeptr<int>
    val mutable correlationMaskCount: uint32
    val pCorrelationMasks: nativeptr<uint32>

type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo

[<Struct>]
type VkSurfaceCapabilities2EXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// Supported minimum number of images for the surface
    val mutable minImageCount: uint32
    /// Supported maximum number of images for the surface, 0 for unlimited
    val mutable maxImageCount: uint32
    /// Current image width and height for the surface, (0, 0) if undefined
    val mutable currentExtent: VkExtent2D
    /// Supported minimum image width and height for the surface
    val mutable minImageExtent: VkExtent2D
    /// Supported maximum image width and height for the surface
    val mutable maxImageExtent: VkExtent2D
    /// Supported maximum number of image layers for the surface
    val mutable maxImageArrayLayers: uint32
    /// 1 or more bits representing the transforms supported
    val mutable supportedTransforms: VkSurfaceTransformFlagsKHR
    /// The surface's current transform relative to the device's natural orientation
    val mutable currentTransform: VkSurfaceTransformFlagBitsKHR
    /// 1 or more bits representing the alpha compositing modes supported
    val mutable supportedCompositeAlpha: VkCompositeAlphaFlagsKHR
    /// Supported image usage flags for the surface
    val mutable supportedUsageFlags: VkImageUsageFlags
    val mutable supportedSurfaceCounters: VkSurfaceCounterFlagsEXT

[<Struct>]
type VkDisplayPowerInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable powerState: VkDisplayPowerStateEXT

[<Struct>]
type VkDeviceEventInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable deviceEvent: VkDeviceEventTypeEXT

[<Struct>]
type VkDisplayEventInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable displayEvent: VkDisplayEventTypeEXT

[<Struct>]
type VkSwapchainCounterCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable surfaceCounters: VkSurfaceCounterFlagsEXT

[<Struct>]
type VkPhysicalDeviceGroupProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable physicalDeviceCount: uint32
    val mutable physicalDevices: VkPhysicalDevice
    val mutable subsetAllocation: VkBool32

type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties

[<Struct>]
type VkMemoryAllocateFlagsInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkMemoryAllocateFlags
    val mutable deviceMask: uint32

type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo

[<Struct>]
type VkBindBufferMemoryInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable buffer: VkBuffer
    val mutable memory: VkDeviceMemory
    val mutable memoryOffset: VkDeviceSize

type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo

[<Struct>]
type VkBindBufferMemoryDeviceGroupInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable deviceIndexCount: uint32
    val pDeviceIndices: nativeptr<uint32>

type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo

[<Struct>]
type VkBindImageMemoryInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable image: VkImage
    val mutable memory: VkDeviceMemory
    val mutable memoryOffset: VkDeviceSize

type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo

[<Struct>]
type VkBindImageMemoryDeviceGroupInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable deviceIndexCount: uint32
    val pDeviceIndices: nativeptr<uint32>
    val mutable splitInstanceBindRegionCount: uint32
    val pSplitInstanceBindRegions: nativeptr<VkRect2D>

type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo

[<Struct>]
type VkDeviceGroupRenderPassBeginInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable deviceMask: uint32
    val mutable deviceRenderAreaCount: uint32
    val pDeviceRenderAreas: nativeptr<VkRect2D>

type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo

[<Struct>]
type VkDeviceGroupCommandBufferBeginInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable deviceMask: uint32

type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo

[<Struct>]
type VkDeviceGroupSubmitInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable waitSemaphoreCount: uint32
    val pWaitSemaphoreDeviceIndices: nativeptr<uint32>
    val mutable commandBufferCount: uint32
    val pCommandBufferDeviceMasks: nativeptr<uint32>
    val mutable signalSemaphoreCount: uint32
    val pSignalSemaphoreDeviceIndices: nativeptr<uint32>

type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo

[<Struct>]
type VkDeviceGroupBindSparseInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable resourceDeviceIndex: uint32
    val mutable memoryDeviceIndex: uint32

type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo

[<Struct>]
type VkDeviceGroupPresentCapabilitiesKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable presentMask: uint32
    val mutable modes: VkDeviceGroupPresentModeFlagsKHR

[<Struct>]
type VkImageSwapchainCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable swapchain: VkSwapchainKHR

[<Struct>]
type VkBindImageMemorySwapchainInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable swapchain: VkSwapchainKHR
    val mutable imageIndex: uint32

[<Struct>]
type VkAcquireNextImageInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable swapchain: VkSwapchainKHR
    val mutable timeout: uint64
    val mutable semaphore: VkSemaphore
    val mutable fence: VkFence
    val mutable deviceMask: uint32

[<Struct>]
type VkDeviceGroupPresentInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable swapchainCount: uint32
    val pDeviceMasks: nativeptr<uint32>
    val mutable mode: VkDeviceGroupPresentModeFlagBitsKHR

[<Struct>]
type VkDeviceGroupDeviceCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable physicalDeviceCount: uint32
    val pPhysicalDevices: nativeptr<VkPhysicalDevice>

type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo

[<Struct>]
type VkDeviceGroupSwapchainCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable modes: VkDeviceGroupPresentModeFlagsKHR

[<Struct>]
type VkDescriptorUpdateTemplateEntry =
    /// Binding within the destination descriptor set to write
    val mutable dstBinding: uint32
    /// Array element within the destination binding to write
    val mutable dstArrayElement: uint32
    /// Number of descriptors to write
    val mutable descriptorCount: uint32
    /// Descriptor type to write
    val mutable descriptorType: VkDescriptorType
    /// Offset into pData where the descriptors to update are stored
    val mutable offset: unativeint
    /// Stride between two descriptors in pData when writing more than one descriptor
    val mutable stride: unativeint

type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry

[<Struct>]
type VkDescriptorUpdateTemplateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDescriptorUpdateTemplateCreateFlags
    /// Number of descriptor update entries to use for the update template
    val mutable descriptorUpdateEntryCount: uint32
    /// Descriptor update entries for the template
    val pDescriptorUpdateEntries: nativeptr<VkDescriptorUpdateTemplateEntry>
    val mutable templateType: VkDescriptorUpdateTemplateType
    val mutable descriptorSetLayout: VkDescriptorSetLayout
    val mutable pipelineBindPoint: VkPipelineBindPoint
    /// If used for push descriptors, this is the only allowed layout
    val mutable pipelineLayout: VkPipelineLayout
    val mutable set: uint32

type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo

/// Chromaticity coordinate
[<Struct>]
type VkXYColorEXT =
    val mutable x: float32
    val mutable y: float32

[<Struct>]
type VkHdrMetadataEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Display primary's Red
    val mutable displayPrimaryRed: VkXYColorEXT
    /// Display primary's Green
    val mutable displayPrimaryGreen: VkXYColorEXT
    /// Display primary's Blue
    val mutable displayPrimaryBlue: VkXYColorEXT
    /// Display primary's Blue
    val mutable whitePoint: VkXYColorEXT
    /// Display maximum luminance
    val mutable maxLuminance: float32
    /// Display minimum luminance
    val mutable minLuminance: float32
    /// Content maximum luminance
    val mutable maxContentLightLevel: float32
    val mutable maxFrameAverageLightLevel: float32

[<Struct>]
type VkDisplayNativeHdrSurfaceCapabilitiesAMD =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable localDimmingSupport: VkBool32

[<Struct>]
type VkSwapchainDisplayNativeHdrCreateInfoAMD =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable localDimmingEnable: VkBool32

[<Struct>]
type VkRefreshCycleDurationGOOGLE =
    /// Number of nanoseconds from the start of one refresh cycle to the next
    val mutable refreshDuration: uint64

[<Struct>]
type VkPastPresentationTimingGOOGLE =
    /// Application-provided identifier, previously given to vkQueuePresentKHR
    val mutable presentID: uint32
    /// Earliest time an image should have been presented, previously given to vkQueuePresentKHR
    val mutable desiredPresentTime: uint64
    /// Time the image was actually displayed
    val mutable actualPresentTime: uint64
    /// Earliest time the image could have been displayed
    val mutable earliestPresentTime: uint64
    /// How early vkQueuePresentKHR was processed vs. how soon it needed to be and make earliestPresentTime
    val mutable presentMargin: uint64

[<Struct>]
type VkPresentTimesInfoGOOGLE =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Copy of VkPresentInfoKHR::swapchainCount
    val mutable swapchainCount: uint32
    /// The earliest times to present images
    val pTimes: nativeptr<VkPresentTimeGOOGLE>

[<Struct>]
type VkPresentTimeGOOGLE =
    /// Application-provided identifier
    val mutable presentID: uint32
    /// Earliest time an image should be presented
    val mutable desiredPresentTime: uint64

[<Struct>]
type VkIOSSurfaceCreateInfoMVK =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkIOSSurfaceCreateFlagsMVK
    val pView: nativeint

[<Struct>]
type VkMacOSSurfaceCreateInfoMVK =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkMacOSSurfaceCreateFlagsMVK
    val pView: nativeint

[<Struct>]
type VkMetalSurfaceCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkMetalSurfaceCreateFlagsEXT
    val pLayer: nativeptr<CAMetalLayer>

[<Struct>]
type VkViewportWScalingNV =
    val mutable xcoeff: float32
    val mutable ycoeff: float32

[<Struct>]
type VkPipelineViewportWScalingStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable viewportWScalingEnable: VkBool32
    val mutable viewportCount: uint32
    val pViewportWScalings: nativeptr<VkViewportWScalingNV>

[<Struct>]
type VkViewportSwizzleNV =
    val mutable x: VkViewportCoordinateSwizzleNV
    val mutable y: VkViewportCoordinateSwizzleNV
    val mutable z: VkViewportCoordinateSwizzleNV
    val mutable w: VkViewportCoordinateSwizzleNV

[<Struct>]
type VkPipelineViewportSwizzleStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineViewportSwizzleStateCreateFlagsNV
    val mutable viewportCount: uint32
    val pViewportSwizzles: nativeptr<VkViewportSwizzleNV>

[<Struct>]
type VkPhysicalDeviceDiscardRectanglePropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// max number of active discard rectangles
    val mutable maxDiscardRectangles: uint32

[<Struct>]
type VkPipelineDiscardRectangleStateCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineDiscardRectangleStateCreateFlagsEXT
    val mutable discardRectangleMode: VkDiscardRectangleModeEXT
    val mutable discardRectangleCount: uint32
    val pDiscardRectangles: nativeptr<VkRect2D>

[<Struct>]
type VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable perViewPositionAllComponents: VkBool32

[<Struct>]
type VkInputAttachmentAspectReference =
    val mutable subpass: uint32
    val mutable inputAttachmentIndex: uint32
    val mutable aspectMask: VkImageAspectFlags

type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference

[<Struct>]
type VkRenderPassInputAttachmentAspectCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable aspectReferenceCount: uint32
    val pAspectReferences: nativeptr<VkInputAttachmentAspectReference>

type VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo

[<Struct>]
type VkPhysicalDeviceSurfaceInfo2KHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable surface: VkSurfaceKHR

[<Struct>]
type VkSurfaceCapabilities2KHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable surfaceCapabilities: VkSurfaceCapabilitiesKHR

[<Struct>]
type VkSurfaceFormat2KHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable surfaceFormat: VkSurfaceFormatKHR

[<Struct>]
type VkDisplayProperties2KHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable displayProperties: VkDisplayPropertiesKHR

[<Struct>]
type VkDisplayPlaneProperties2KHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable displayPlaneProperties: VkDisplayPlanePropertiesKHR

[<Struct>]
type VkDisplayModeProperties2KHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable displayModeProperties: VkDisplayModePropertiesKHR

[<Struct>]
type VkDisplayPlaneInfo2KHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable mode: VkDisplayModeKHR
    val mutable planeIndex: uint32

[<Struct>]
type VkDisplayPlaneCapabilities2KHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable capabilities: VkDisplayPlaneCapabilitiesKHR

[<Struct>]
type VkSharedPresentSurfaceCapabilitiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// Supported image usage flags if swapchain created using a shared present mode
    val mutable sharedPresentSupportedUsageFlags: VkImageUsageFlags

[<Struct>]
type VkPhysicalDevice16BitStorageFeatures =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// 16-bit integer/floating-point variables supported in BufferBlock
    val mutable storageBuffer16BitAccess: VkBool32
    /// 16-bit integer/floating-point variables supported in BufferBlock and Block
    val mutable uniformAndStorageBuffer16BitAccess: VkBool32
    /// 16-bit integer/floating-point variables supported in PushConstant
    val mutable storagePushConstant16: VkBool32
    /// 16-bit integer/floating-point variables supported in shader inputs and outputs
    val mutable storageInputOutput16: VkBool32

type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures

[<Struct>]
type VkPhysicalDeviceSubgroupProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// The size of a subgroup for this queue.
    val mutable subgroupSize: uint32
    /// Bitfield of what shader stages support subgroup operations
    val mutable supportedStages: VkShaderStageFlags
    /// Bitfield of what subgroup operations are supported.
    val mutable supportedOperations: VkSubgroupFeatureFlags
    /// Flag to specify whether quad operations are available in all stages.
    val mutable quadOperationsInAllStages: VkBool32

[<Struct>]
type VkBufferMemoryRequirementsInfo2 =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable buffer: VkBuffer

type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2

[<Struct>]
type VkImageMemoryRequirementsInfo2 =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable image: VkImage

type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2

[<Struct>]
type VkImageSparseMemoryRequirementsInfo2 =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable image: VkImage

type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2

[<Struct>]
type VkMemoryRequirements2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable memoryRequirements: VkMemoryRequirements

type VkMemoryRequirements2KHR = VkMemoryRequirements2

[<Struct>]
type VkSparseImageMemoryRequirements2 =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable memoryRequirements: VkSparseImageMemoryRequirements

type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2

[<Struct>]
type VkPhysicalDevicePointClippingProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable pointClippingBehavior: VkPointClippingBehavior

type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties

[<Struct>]
type VkMemoryDedicatedRequirements =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable prefersDedicatedAllocation: VkBool32
    val mutable requiresDedicatedAllocation: VkBool32

type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements

[<Struct>]
type VkMemoryDedicatedAllocateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Image that this allocation will be bound to
    val mutable image: VkImage
    /// Buffer that this allocation will be bound to
    val mutable buffer: VkBuffer

type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo

[<Struct>]
type VkImageViewUsageCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable usage: VkImageUsageFlags

type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo

[<Struct>]
type VkPipelineTessellationDomainOriginStateCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable domainOrigin: VkTessellationDomainOrigin

type VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo

[<Struct>]
type VkSamplerYcbcrConversionInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable conversion: VkSamplerYcbcrConversion

type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo

[<Struct>]
type VkSamplerYcbcrConversionCreateInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable format: VkFormat
    val mutable ycbcrModel: VkSamplerYcbcrModelConversion
    val mutable ycbcrRange: VkSamplerYcbcrRange
    val mutable components: VkComponentMapping
    val mutable xChromaOffset: VkChromaLocation
    val mutable yChromaOffset: VkChromaLocation
    val mutable chromaFilter: VkFilter
    val forceExplicitReconstruction: VkBool32

type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo

[<Struct>]
type VkBindImagePlaneMemoryInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable planeAspect: VkImageAspectFlagBits

type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo

[<Struct>]
type VkImagePlaneMemoryRequirementsInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable planeAspect: VkImageAspectFlagBits

type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo

[<Struct>]
type VkPhysicalDeviceSamplerYcbcrConversionFeatures =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// Sampler color conversion supported
    val mutable samplerYcbcrConversion: VkBool32

type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures

[<Struct>]
type VkSamplerYcbcrConversionImageFormatProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable combinedImageSamplerDescriptorCount: uint32

type VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties

[<Struct>]
type VkTextureLODGatherFormatPropertiesAMD =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable supportsTextureGatherLODBiasAMD: VkBool32

[<Struct>]
type VkConditionalRenderingBeginInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable buffer: VkBuffer
    val mutable offset: VkDeviceSize
    val mutable flags: VkConditionalRenderingFlagsEXT

[<Struct>]
type VkProtectedSubmitInfo =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Submit protected command buffers
    val mutable protectedSubmit: VkBool32

[<Struct>]
type VkPhysicalDeviceProtectedMemoryFeatures =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable protectedMemory: VkBool32

[<Struct>]
type VkPhysicalDeviceProtectedMemoryProperties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable protectedNoFault: VkBool32

[<Struct>]
type VkDeviceQueueInfo2 =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDeviceQueueCreateFlags
    val mutable queueFamilyIndex: uint32
    val mutable queueIndex: uint32

[<Struct>]
type VkPipelineCoverageToColorStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineCoverageToColorStateCreateFlagsNV
    val mutable coverageToColorEnable: VkBool32
    val mutable coverageToColorLocation: uint32

[<Struct>]
type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable filterMinmaxSingleComponentFormats: VkBool32
    val mutable filterMinmaxImageComponentMapping: VkBool32

[<Struct>]
type VkSampleLocationEXT =
    val mutable x: float32
    val mutable y: float32

[<Struct>]
type VkSampleLocationsInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable sampleLocationsPerPixel: VkSampleCountFlagBits
    val mutable sampleLocationGridSize: VkExtent2D
    val mutable sampleLocationsCount: uint32
    val pSampleLocations: nativeptr<VkSampleLocationEXT>

[<Struct>]
type VkAttachmentSampleLocationsEXT =
    val mutable attachmentIndex: uint32
    val mutable sampleLocationsInfo: VkSampleLocationsInfoEXT

[<Struct>]
type VkSubpassSampleLocationsEXT =
    val mutable subpassIndex: uint32
    val mutable sampleLocationsInfo: VkSampleLocationsInfoEXT

[<Struct>]
type VkRenderPassSampleLocationsBeginInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable attachmentInitialSampleLocationsCount: uint32
    val pAttachmentInitialSampleLocations: nativeptr<VkAttachmentSampleLocationsEXT>
    val mutable postSubpassSampleLocationsCount: uint32
    val pPostSubpassSampleLocations: nativeptr<VkSubpassSampleLocationsEXT>

[<Struct>]
type VkPipelineSampleLocationsStateCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable sampleLocationsEnable: VkBool32
    val mutable sampleLocationsInfo: VkSampleLocationsInfoEXT

[<Struct>]
type VkPhysicalDeviceSampleLocationsPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable sampleLocationSampleCounts: VkSampleCountFlags
    val mutable maxSampleLocationGridSize: VkExtent2D
    val mutable sampleLocationCoordinateRange: float32
    val mutable sampleLocationSubPixelBits: uint32
    val mutable variableSampleLocations: VkBool32

[<Struct>]
type VkMultisamplePropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxSampleLocationGridSize: VkExtent2D

[<Struct>]
type VkSamplerReductionModeCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable reductionMode: VkSamplerReductionModeEXT

[<Struct>]
type VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable advancedBlendCoherentOperations: VkBool32

[<Struct>]
type VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable advancedBlendMaxColorAttachments: uint32
    val mutable advancedBlendIndependentBlend: VkBool32
    val mutable advancedBlendNonPremultipliedSrcColor: VkBool32
    val mutable advancedBlendNonPremultipliedDstColor: VkBool32
    val mutable advancedBlendCorrelatedOverlap: VkBool32
    val mutable advancedBlendAllOperations: VkBool32

[<Struct>]
type VkPipelineColorBlendAdvancedStateCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable srcPremultiplied: VkBool32
    val mutable dstPremultiplied: VkBool32
    val mutable blendOverlap: VkBlendOverlapEXT

[<Struct>]
type VkPhysicalDeviceInlineUniformBlockFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable inlineUniformBlock: VkBool32
    val mutable descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32

[<Struct>]
type VkPhysicalDeviceInlineUniformBlockPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxInlineUniformBlockSize: uint32
    val mutable maxPerStageDescriptorInlineUniformBlocks: uint32
    val mutable maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32
    val mutable maxDescriptorSetInlineUniformBlocks: uint32
    val mutable maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32

[<Struct>]
type VkWriteDescriptorSetInlineUniformBlockEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable dataSize: uint32
    val pData: nativeint

[<Struct>]
type VkDescriptorPoolInlineUniformBlockCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable maxInlineUniformBlockBindings: uint32

[<Struct>]
type VkPipelineCoverageModulationStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineCoverageModulationStateCreateFlagsNV
    val mutable coverageModulationMode: VkCoverageModulationModeNV
    val mutable coverageModulationTableEnable: VkBool32
    val mutable coverageModulationTableCount: uint32
    val pCoverageModulationTable: nativeptr<float32>

[<Struct>]
type VkImageFormatListCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable viewFormatCount: uint32
    val pViewFormats: nativeptr<VkFormat>

[<Struct>]
type VkValidationCacheCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkValidationCacheCreateFlagsEXT
    val mutable initialDataSize: unativeint
    val pInitialData: nativeint

[<Struct>]
type VkShaderModuleValidationCacheCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable validationCache: VkValidationCacheEXT

[<Struct>]
type VkPhysicalDeviceMaintenance3Properties =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxPerSetDescriptors: uint32
    val mutable maxMemoryAllocationSize: VkDeviceSize

type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties

[<Struct>]
type VkDescriptorSetLayoutSupport =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable supported: VkBool32

type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport

[<Struct>]
type VkPhysicalDeviceShaderDrawParametersFeatures =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderDrawParameters: VkBool32

type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures

[<Struct>]
type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderFloat16: VkBool32
    val mutable shaderInt8: VkBool32

type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8FeaturesKHR

[<Struct>]
type VkPhysicalDeviceFloatControlsPropertiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable denormBehaviorIndependence: VkShaderFloatControlsIndependenceKHR
    val mutable roundingModeIndependence: VkShaderFloatControlsIndependenceKHR
    val mutable shaderSignedZeroInfNanPreserveFloat16: VkBool32
    val mutable shaderSignedZeroInfNanPreserveFloat32: VkBool32
    val mutable shaderSignedZeroInfNanPreserveFloat64: VkBool32
    val mutable shaderDenormPreserveFloat16: VkBool32
    val mutable shaderDenormPreserveFloat32: VkBool32
    val mutable shaderDenormPreserveFloat64: VkBool32
    val mutable shaderDenormFlushToZeroFloat16: VkBool32
    val mutable shaderDenormFlushToZeroFloat32: VkBool32
    val mutable shaderDenormFlushToZeroFloat64: VkBool32
    val mutable shaderRoundingModeRTEFloat16: VkBool32
    val mutable shaderRoundingModeRTEFloat32: VkBool32
    val mutable shaderRoundingModeRTEFloat64: VkBool32
    val mutable shaderRoundingModeRTZFloat16: VkBool32
    val mutable shaderRoundingModeRTZFloat32: VkBool32
    val mutable shaderRoundingModeRTZFloat64: VkBool32

[<Struct>]
type VkPhysicalDeviceHostQueryResetFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable hostQueryReset: VkBool32

[<Struct>]
type VkNativeBufferUsage2ANDROID =
    val mutable consumer: uint64
    val mutable producer: uint64

[<Struct>]
type VkNativeBufferANDROID =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val handle: nativeint
    val mutable stride: int
    val mutable format: int
    val mutable usage: int
    val mutable usage2: VkNativeBufferUsage2ANDROID

[<Struct>]
type VkSwapchainImageCreateInfoANDROID =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable usage: VkSwapchainImageUsageFlagsANDROID

[<Struct>]
type VkPhysicalDevicePresentationPropertiesANDROID =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable sharedImage: VkBool32

[<Struct>]
type VkShaderResourceUsageAMD =
    val mutable numUsedVgprs: uint32
    val mutable numUsedSgprs: uint32
    val mutable ldsSizePerLocalWorkGroup: uint32
    val mutable ldsUsageSizeInBytes: unativeint
    val mutable scratchMemUsageInBytes: unativeint

[<Struct>]
type VkShaderStatisticsInfoAMD =
    val mutable shaderStageMask: VkShaderStageFlags
    val mutable resourceUsage: VkShaderResourceUsageAMD
    val mutable numPhysicalVgprs: uint32
    val mutable numPhysicalSgprs: uint32
    val mutable numAvailableVgprs: uint32
    val mutable numAvailableSgprs: uint32
    val mutable computeWorkGroupSize: uint32

[<Struct>]
type VkDeviceQueueGlobalPriorityCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable globalPriority: VkQueueGlobalPriorityEXT

[<Struct>]
type VkDebugUtilsObjectNameInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable objectType: VkObjectType
    val mutable objectHandle: uint64
    val pObjectName: nativeptr<char>

[<Struct>]
type VkDebugUtilsObjectTagInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable objectType: VkObjectType
    val mutable objectHandle: uint64
    val mutable tagName: uint64
    val mutable tagSize: unativeint
    val pTag: nativeint

[<Struct>]
type VkDebugUtilsLabelEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val pLabelName: nativeptr<char>
    val mutable color: float32

[<Struct>]
type VkDebugUtilsMessengerCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDebugUtilsMessengerCreateFlagsEXT
    val mutable messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT
    val mutable messageType: VkDebugUtilsMessageTypeFlagsEXT
    val mutable pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT
    val mutable pUserData: nativeint

[<Struct>]
type VkDebugUtilsMessengerCallbackDataEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkDebugUtilsMessengerCallbackDataFlagsEXT
    val pMessageIdName: nativeptr<char>
    val mutable messageIdNumber: int
    val pMessage: nativeptr<char>
    val mutable queueLabelCount: uint32
    val pQueueLabels: nativeptr<VkDebugUtilsLabelEXT>
    val mutable cmdBufLabelCount: uint32
    val pCmdBufLabels: nativeptr<VkDebugUtilsLabelEXT>
    val mutable objectCount: uint32
    val pObjects: nativeptr<VkDebugUtilsObjectNameInfoEXT>

[<Struct>]
type VkImportMemoryHostPointerInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits
    val mutable pHostPointer: nativeint

[<Struct>]
type VkMemoryHostPointerPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable memoryTypeBits: uint32

[<Struct>]
type VkPhysicalDeviceExternalMemoryHostPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable minImportedHostPointerAlignment: VkDeviceSize

[<Struct>]
type VkPhysicalDeviceConservativeRasterizationPropertiesEXT =
    val mutable sType: VkStructureType
    /// Pointer to next structure
    val mutable pNext: nativeint
    /// The size in pixels the primitive is enlarged at each edge during conservative rasterization
    val mutable primitiveOverestimationSize: float32
    /// The maximum additional overestimation the client can specify in the pipeline state
    val mutable maxExtraPrimitiveOverestimationSize: float32
    /// The granularity of extra overestimation sizes the implementations supports between 0 and maxExtraOverestimationSize
    val mutable extraPrimitiveOverestimationSizeGranularity: float32
    /// true if the implementation supports conservative rasterization underestimation mode
    val mutable primitiveUnderestimation: VkBool32
    /// true if conservative rasterization also applies to points and lines
    val mutable conservativePointAndLineRasterization: VkBool32
    /// true if degenerate triangles (those with zero area after snap) are rasterized
    val mutable degenerateTrianglesRasterized: VkBool32
    /// true if degenerate lines (those with zero length after snap) are rasterized
    val mutable degenerateLinesRasterized: VkBool32
    /// true if the implementation supports the FullyCoveredEXT SPIR-V builtin fragment shader input variable
    val mutable fullyCoveredFragmentShaderInputVariable: VkBool32
    /// true if the implementation supports both conservative rasterization and post depth coverage sample coverage mask
    val mutable conservativeRasterizationPostDepthCoverage: VkBool32

[<Struct>]
type VkCalibratedTimestampInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable timeDomain: VkTimeDomainEXT

[<Struct>]
type VkPhysicalDeviceShaderCorePropertiesAMD =
    val mutable sType: VkStructureType
    /// Pointer to next structure
    val mutable pNext: nativeint
    /// number of shader engines
    val mutable shaderEngineCount: uint32
    /// number of shader arrays
    val mutable shaderArraysPerEngineCount: uint32
    /// number of physical CUs per shader array
    val mutable computeUnitsPerShaderArray: uint32
    /// number of SIMDs per compute unit
    val mutable simdPerComputeUnit: uint32
    /// number of wavefront slots in each SIMD
    val mutable wavefrontsPerSimd: uint32
    /// maximum number of threads per wavefront
    val mutable wavefrontSize: uint32
    /// number of physical SGPRs per SIMD
    val mutable sgprsPerSimd: uint32
    /// minimum number of SGPRs that can be allocated by a wave
    val mutable minSgprAllocation: uint32
    /// number of available SGPRs
    val mutable maxSgprAllocation: uint32
    /// SGPRs are allocated in groups of this size
    val mutable sgprAllocationGranularity: uint32
    /// number of physical VGPRs per SIMD
    val mutable vgprsPerSimd: uint32
    /// minimum number of VGPRs that can be allocated by a wave
    val mutable minVgprAllocation: uint32
    /// number of available VGPRs
    val mutable maxVgprAllocation: uint32
    /// VGPRs are allocated in groups of this size
    val mutable vgprAllocationGranularity: uint32

[<Struct>]
type VkPhysicalDeviceShaderCoreProperties2AMD =
    val mutable sType: VkStructureType
    /// Pointer to next structure
    val mutable pNext: nativeint
    /// features supported by the shader core
    val mutable shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD
    /// number of active compute units across all shader engines/arrays
    val mutable activeComputeUnitCount: uint32

[<Struct>]
type VkPipelineRasterizationConservativeStateCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT
    val mutable conservativeRasterizationMode: VkConservativeRasterizationModeEXT
    val mutable extraPrimitiveOverestimationSize: float32

[<Struct>]
type VkPhysicalDeviceDescriptorIndexingFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderInputAttachmentArrayDynamicIndexing: VkBool32
    val mutable shaderUniformTexelBufferArrayDynamicIndexing: VkBool32
    val mutable shaderStorageTexelBufferArrayDynamicIndexing: VkBool32
    val mutable shaderUniformBufferArrayNonUniformIndexing: VkBool32
    val mutable shaderSampledImageArrayNonUniformIndexing: VkBool32
    val mutable shaderStorageBufferArrayNonUniformIndexing: VkBool32
    val mutable shaderStorageImageArrayNonUniformIndexing: VkBool32
    val mutable shaderInputAttachmentArrayNonUniformIndexing: VkBool32
    val mutable shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32
    val mutable shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32
    val mutable descriptorBindingUniformBufferUpdateAfterBind: VkBool32
    val mutable descriptorBindingSampledImageUpdateAfterBind: VkBool32
    val mutable descriptorBindingStorageImageUpdateAfterBind: VkBool32
    val mutable descriptorBindingStorageBufferUpdateAfterBind: VkBool32
    val mutable descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32
    val mutable descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32
    val mutable descriptorBindingUpdateUnusedWhilePending: VkBool32
    val mutable descriptorBindingPartiallyBound: VkBool32
    val mutable descriptorBindingVariableDescriptorCount: VkBool32
    val mutable runtimeDescriptorArray: VkBool32

[<Struct>]
type VkPhysicalDeviceDescriptorIndexingPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxUpdateAfterBindDescriptorsInAllPools: uint32
    val mutable shaderUniformBufferArrayNonUniformIndexingNative: VkBool32
    val mutable shaderSampledImageArrayNonUniformIndexingNative: VkBool32
    val mutable shaderStorageBufferArrayNonUniformIndexingNative: VkBool32
    val mutable shaderStorageImageArrayNonUniformIndexingNative: VkBool32
    val mutable shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32
    val mutable robustBufferAccessUpdateAfterBind: VkBool32
    val mutable quadDivergentImplicitLod: VkBool32
    val mutable maxPerStageDescriptorUpdateAfterBindSamplers: uint32
    val mutable maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32
    val mutable maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32
    val mutable maxPerStageDescriptorUpdateAfterBindSampledImages: uint32
    val mutable maxPerStageDescriptorUpdateAfterBindStorageImages: uint32
    val mutable maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32
    val mutable maxPerStageUpdateAfterBindResources: uint32
    val mutable maxDescriptorSetUpdateAfterBindSamplers: uint32
    val mutable maxDescriptorSetUpdateAfterBindUniformBuffers: uint32
    val mutable maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32
    val mutable maxDescriptorSetUpdateAfterBindStorageBuffers: uint32
    val mutable maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32
    val mutable maxDescriptorSetUpdateAfterBindSampledImages: uint32
    val mutable maxDescriptorSetUpdateAfterBindStorageImages: uint32
    val mutable maxDescriptorSetUpdateAfterBindInputAttachments: uint32

[<Struct>]
type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable bindingCount: uint32
    val pBindingFlags: nativeptr<VkDescriptorBindingFlagsEXT>

[<Struct>]
type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable descriptorSetCount: uint32
    val pDescriptorCounts: nativeptr<uint32>

[<Struct>]
type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxVariableDescriptorCount: uint32

[<Struct>]
type VkAttachmentDescription2KHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkAttachmentDescriptionFlags
    val mutable format: VkFormat
    val mutable samples: VkSampleCountFlagBits
    /// Load operation for color or depth data
    val mutable loadOp: VkAttachmentLoadOp
    /// Store operation for color or depth data
    val mutable storeOp: VkAttachmentStoreOp
    /// Load operation for stencil data
    val mutable stencilLoadOp: VkAttachmentLoadOp
    /// Store operation for stencil data
    val mutable stencilStoreOp: VkAttachmentStoreOp
    val mutable initialLayout: VkImageLayout
    val mutable finalLayout: VkImageLayout

[<Struct>]
type VkAttachmentReference2KHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable attachment: uint32
    val mutable layout: VkImageLayout
    val mutable aspectMask: VkImageAspectFlags

[<Struct>]
type VkSubpassDescription2KHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkSubpassDescriptionFlags
    val mutable pipelineBindPoint: VkPipelineBindPoint
    val mutable viewMask: uint32
    val mutable inputAttachmentCount: uint32
    val pInputAttachments: nativeptr<VkAttachmentReference2KHR>
    val mutable colorAttachmentCount: uint32
    val pColorAttachments: nativeptr<VkAttachmentReference2KHR>
    val pResolveAttachments: nativeptr<VkAttachmentReference2KHR>
    val pDepthStencilAttachment: nativeptr<VkAttachmentReference2KHR>
    val mutable preserveAttachmentCount: uint32
    val pPreserveAttachments: nativeptr<uint32>

[<Struct>]
type VkSubpassDependency2KHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable srcSubpass: uint32
    val mutable dstSubpass: uint32
    val mutable srcStageMask: VkPipelineStageFlags
    val mutable dstStageMask: VkPipelineStageFlags
    val mutable srcAccessMask: VkAccessFlags
    val mutable dstAccessMask: VkAccessFlags
    val mutable dependencyFlags: VkDependencyFlags
    val mutable viewOffset: int

[<Struct>]
type VkRenderPassCreateInfo2KHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkRenderPassCreateFlags
    val mutable attachmentCount: uint32
    val pAttachments: nativeptr<VkAttachmentDescription2KHR>
    val mutable subpassCount: uint32
    val pSubpasses: nativeptr<VkSubpassDescription2KHR>
    val mutable dependencyCount: uint32
    val pDependencies: nativeptr<VkSubpassDependency2KHR>
    val mutable correlatedViewMaskCount: uint32
    val pCorrelatedViewMasks: nativeptr<uint32>

[<Struct>]
type VkSubpassBeginInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable contents: VkSubpassContents

[<Struct>]
type VkSubpassEndInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint

[<Struct>]
type VkVertexInputBindingDivisorDescriptionEXT =
    val mutable binding: uint32
    val mutable divisor: uint32

[<Struct>]
type VkPipelineVertexInputDivisorStateCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable vertexBindingDivisorCount: uint32
    val pVertexBindingDivisors: nativeptr<VkVertexInputBindingDivisorDescriptionEXT>

[<Struct>]
type VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// max value of vertex attribute divisor
    val mutable maxVertexAttribDivisor: uint32

[<Struct>]
type VkPhysicalDevicePCIBusInfoPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable pciDomain: uint32
    val mutable pciBus: uint32
    val mutable pciDevice: uint32
    val mutable pciFunction: uint32

[<Struct>]
type VkImportAndroidHardwareBufferInfoANDROID =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable buffer: nativeptr<AHardwareBuffer>

[<Struct>]
type VkAndroidHardwareBufferUsageANDROID =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable androidHardwareBufferUsage: uint64

[<Struct>]
type VkAndroidHardwareBufferPropertiesANDROID =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable allocationSize: VkDeviceSize
    val mutable memoryTypeBits: uint32

[<Struct>]
type VkMemoryGetAndroidHardwareBufferInfoANDROID =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable memory: VkDeviceMemory

[<Struct>]
type VkAndroidHardwareBufferFormatPropertiesANDROID =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable format: VkFormat
    val mutable externalFormat: uint64
    val mutable formatFeatures: VkFormatFeatureFlags
    val mutable samplerYcbcrConversionComponents: VkComponentMapping
    val mutable suggestedYcbcrModel: VkSamplerYcbcrModelConversion
    val mutable suggestedYcbcrRange: VkSamplerYcbcrRange
    val mutable suggestedXChromaOffset: VkChromaLocation
    val mutable suggestedYChromaOffset: VkChromaLocation

[<Struct>]
type VkCommandBufferInheritanceConditionalRenderingInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Whether this secondary command buffer may be executed during an active conditional rendering
    val mutable conditionalRenderingEnable: VkBool32

[<Struct>]
type VkExternalFormatANDROID =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable externalFormat: uint64

[<Struct>]
type VkPhysicalDevice8BitStorageFeaturesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// 8-bit integer variables supported in StorageBuffer
    val mutable storageBuffer8BitAccess: VkBool32
    /// 8-bit integer variables supported in StorageBuffer and Uniform
    val mutable uniformAndStorageBuffer8BitAccess: VkBool32
    /// 8-bit integer variables supported in PushConstant
    val mutable storagePushConstant8: VkBool32

[<Struct>]
type VkPhysicalDeviceConditionalRenderingFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable conditionalRendering: VkBool32
    val mutable inheritedConditionalRendering: VkBool32

[<Struct>]
type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable vulkanMemoryModel: VkBool32
    val mutable vulkanMemoryModelDeviceScope: VkBool32
    val mutable vulkanMemoryModelAvailabilityVisibilityChains: VkBool32

[<Struct>]
type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderBufferInt64Atomics: VkBool32
    val mutable shaderSharedInt64Atomics: VkBool32

[<Struct>]
type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable vertexAttributeInstanceRateDivisor: VkBool32
    val mutable vertexAttributeInstanceRateZeroDivisor: VkBool32

[<Struct>]
type VkQueueFamilyCheckpointPropertiesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable checkpointExecutionStageMask: VkPipelineStageFlags

[<Struct>]
type VkCheckpointDataNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable stage: VkPipelineStageFlagBits
    val mutable pCheckpointMarker: nativeint

[<Struct>]
type VkPhysicalDeviceDepthStencilResolvePropertiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// supported depth resolve modes
    val mutable supportedDepthResolveModes: VkResolveModeFlagsKHR
    /// supported stencil resolve modes
    val mutable supportedStencilResolveModes: VkResolveModeFlagsKHR
    /// depth and stencil resolve modes can be set independently if one of them is none
    val mutable independentResolveNone: VkBool32
    /// depth and stencil resolve modes can be set independently
    val mutable independentResolve: VkBool32

[<Struct>]
type VkSubpassDescriptionDepthStencilResolveKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// depth resolve mode
    val mutable depthResolveMode: VkResolveModeFlagBitsKHR
    /// stencil resolve mode
    val mutable stencilResolveMode: VkResolveModeFlagBitsKHR
    /// depth/stencil resolve attachment
    val pDepthStencilResolveAttachment: nativeptr<VkAttachmentReference2KHR>

[<Struct>]
type VkImageViewASTCDecodeModeEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable decodeMode: VkFormat

[<Struct>]
type VkPhysicalDeviceASTCDecodeFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable decodeModeSharedExponent: VkBool32

[<Struct>]
type VkPhysicalDeviceTransformFeedbackFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable transformFeedback: VkBool32
    val mutable geometryStreams: VkBool32

[<Struct>]
type VkPhysicalDeviceTransformFeedbackPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxTransformFeedbackStreams: uint32
    val mutable maxTransformFeedbackBuffers: uint32
    val mutable maxTransformFeedbackBufferSize: VkDeviceSize
    val mutable maxTransformFeedbackStreamDataSize: uint32
    val mutable maxTransformFeedbackBufferDataSize: uint32
    val mutable maxTransformFeedbackBufferDataStride: uint32
    val mutable transformFeedbackQueries: VkBool32
    val mutable transformFeedbackStreamsLinesTriangles: VkBool32
    val mutable transformFeedbackRasterizationStreamSelect: VkBool32
    val mutable transformFeedbackDraw: VkBool32

[<Struct>]
type VkPipelineRasterizationStateStreamCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineRasterizationStateStreamCreateFlagsEXT
    val mutable rasterizationStream: uint32

[<Struct>]
type VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable representativeFragmentTest: VkBool32

[<Struct>]
type VkPipelineRepresentativeFragmentTestStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable representativeFragmentTestEnable: VkBool32

[<Struct>]
type VkPhysicalDeviceExclusiveScissorFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable exclusiveScissor: VkBool32

[<Struct>]
type VkPipelineViewportExclusiveScissorStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable exclusiveScissorCount: uint32
    val pExclusiveScissors: nativeptr<VkRect2D>

[<Struct>]
type VkPhysicalDeviceCornerSampledImageFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable cornerSampledImage: VkBool32

[<Struct>]
type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable computeDerivativeGroupQuads: VkBool32
    val mutable computeDerivativeGroupLinear: VkBool32

[<Struct>]
type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable fragmentShaderBarycentric: VkBool32

[<Struct>]
type VkPhysicalDeviceShaderImageFootprintFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable imageFootprint: VkBool32

[<Struct>]
type VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable dedicatedAllocationImageAliasing: VkBool32

[<Struct>]
type VkShadingRatePaletteNV =
    val mutable shadingRatePaletteEntryCount: uint32
    val pShadingRatePaletteEntries: nativeptr<VkShadingRatePaletteEntryNV>

[<Struct>]
type VkPipelineViewportShadingRateImageStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable shadingRateImageEnable: VkBool32
    val mutable viewportCount: uint32
    val pShadingRatePalettes: nativeptr<VkShadingRatePaletteNV>

[<Struct>]
type VkPhysicalDeviceShadingRateImageFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shadingRateImage: VkBool32
    val mutable shadingRateCoarseSampleOrder: VkBool32

[<Struct>]
type VkPhysicalDeviceShadingRateImagePropertiesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shadingRateTexelSize: VkExtent2D
    val mutable shadingRatePaletteSize: uint32
    val mutable shadingRateMaxCoarseSamples: uint32

[<Struct>]
type VkCoarseSampleLocationNV =
    val mutable pixelX: uint32
    val mutable pixelY: uint32
    val mutable sample: uint32

[<Struct>]
type VkCoarseSampleOrderCustomNV =
    val mutable shadingRate: VkShadingRatePaletteEntryNV
    val mutable sampleCount: uint32
    val mutable sampleLocationCount: uint32
    val pSampleLocations: nativeptr<VkCoarseSampleLocationNV>

[<Struct>]
type VkPipelineViewportCoarseSampleOrderStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable sampleOrderType: VkCoarseSampleOrderTypeNV
    val mutable customSampleOrderCount: uint32
    val pCustomSampleOrders: nativeptr<VkCoarseSampleOrderCustomNV>

[<Struct>]
type VkPhysicalDeviceMeshShaderFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable taskShader: VkBool32
    val mutable meshShader: VkBool32

[<Struct>]
type VkPhysicalDeviceMeshShaderPropertiesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable maxDrawMeshTasksCount: uint32
    val mutable maxTaskWorkGroupInvocations: uint32
    val mutable maxTaskWorkGroupSize: uint32
    val mutable maxTaskTotalMemorySize: uint32
    val mutable maxTaskOutputCount: uint32
    val mutable maxMeshWorkGroupInvocations: uint32
    val mutable maxMeshWorkGroupSize: uint32
    val mutable maxMeshTotalMemorySize: uint32
    val mutable maxMeshOutputVertices: uint32
    val mutable maxMeshOutputPrimitives: uint32
    val mutable maxMeshMultiviewViewCount: uint32
    val mutable meshOutputPerVertexGranularity: uint32
    val mutable meshOutputPerPrimitiveGranularity: uint32

[<Struct>]
type VkDrawMeshTasksIndirectCommandNV =
    val mutable taskCount: uint32
    val mutable firstTask: uint32

[<Struct>]
type VkRayTracingShaderGroupCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable typ: VkRayTracingShaderGroupTypeNV
    val mutable generalShader: uint32
    val mutable closestHitShader: uint32
    val mutable anyHitShader: uint32
    val mutable intersectionShader: uint32

[<Struct>]
type VkRayTracingPipelineCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Pipeline creation flags
    val mutable flags: VkPipelineCreateFlags
    val mutable stageCount: uint32
    /// One entry for each active shader stage
    val pStages: nativeptr<VkPipelineShaderStageCreateInfo>
    val mutable groupCount: uint32
    val pGroups: nativeptr<VkRayTracingShaderGroupCreateInfoNV>
    val mutable maxRecursionDepth: uint32
    /// Interface layout of the pipeline
    val mutable layout: VkPipelineLayout
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
    val mutable basePipelineHandle: VkPipeline
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
    val mutable basePipelineIndex: int

[<Struct>]
type VkGeometryTrianglesNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable vertexData: VkBuffer
    val mutable vertexOffset: VkDeviceSize
    val mutable vertexCount: uint32
    val mutable vertexStride: VkDeviceSize
    val mutable vertexFormat: VkFormat
    val mutable indexData: VkBuffer
    val mutable indexOffset: VkDeviceSize
    val mutable indexCount: uint32
    val mutable indexType: VkIndexType
    /// Optional reference to array of floats representing a 3x4 row major affine transformation matrix.
    val mutable transformData: VkBuffer
    val mutable transformOffset: VkDeviceSize

[<Struct>]
type VkGeometryAABBNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable aabbData: VkBuffer
    val mutable numAABBs: uint32
    /// Stride in bytes between AABBs
    val mutable stride: uint32
    /// Offset in bytes of the first AABB in aabbData
    val mutable offset: VkDeviceSize

[<Struct>]
type VkGeometryDataNV =
    val mutable triangles: VkGeometryTrianglesNV
    val mutable aabbs: VkGeometryAABBNV

[<Struct>]
type VkGeometryNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable geometryType: VkGeometryTypeNV
    val mutable geometry: VkGeometryDataNV
    val mutable flags: VkGeometryFlagsNV

[<Struct>]
type VkAccelerationStructureInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable typ: VkAccelerationStructureTypeNV
    val mutable flags: VkBuildAccelerationStructureFlagsNV
    val mutable instanceCount: uint32
    val mutable geometryCount: uint32
    val pGeometries: nativeptr<VkGeometryNV>

[<Struct>]
type VkAccelerationStructureCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable compactedSize: VkDeviceSize
    val mutable info: VkAccelerationStructureInfoNV

[<Struct>]
type VkBindAccelerationStructureMemoryInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable accelerationStructure: VkAccelerationStructureNV
    val mutable memory: VkDeviceMemory
    val mutable memoryOffset: VkDeviceSize
    val mutable deviceIndexCount: uint32
    val pDeviceIndices: nativeptr<uint32>

[<Struct>]
type VkWriteDescriptorSetAccelerationStructureNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable accelerationStructureCount: uint32
    val pAccelerationStructures: nativeptr<VkAccelerationStructureNV>

[<Struct>]
type VkAccelerationStructureMemoryRequirementsInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable typ: VkAccelerationStructureMemoryRequirementsTypeNV
    val mutable accelerationStructure: VkAccelerationStructureNV

[<Struct>]
type VkPhysicalDeviceRayTracingPropertiesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderGroupHandleSize: uint32
    val mutable maxRecursionDepth: uint32
    val mutable maxShaderGroupStride: uint32
    val mutable shaderGroupBaseAlignment: uint32
    val mutable maxGeometryCount: uint64
    val mutable maxInstanceCount: uint64
    val mutable maxTriangleCount: uint64
    val mutable maxDescriptorSetAccelerationStructures: uint32

[<Struct>]
type VkDrmFormatModifierPropertiesListEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable drmFormatModifierCount: uint32
    val mutable pDrmFormatModifierProperties: nativeptr<VkDrmFormatModifierPropertiesEXT>

[<Struct>]
type VkDrmFormatModifierPropertiesEXT =
    val mutable drmFormatModifier: uint64
    val mutable drmFormatModifierPlaneCount: uint32
    val mutable drmFormatModifierTilingFeatures: VkFormatFeatureFlags

[<Struct>]
type VkPhysicalDeviceImageDrmFormatModifierInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable drmFormatModifier: uint64
    val mutable sharingMode: VkSharingMode
    val mutable queueFamilyIndexCount: uint32
    val pQueueFamilyIndices: nativeptr<uint32>

[<Struct>]
type VkImageDrmFormatModifierListCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable drmFormatModifierCount: uint32
    val pDrmFormatModifiers: nativeptr<uint64>

[<Struct>]
type VkImageDrmFormatModifierExplicitCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable drmFormatModifier: uint64
    val mutable drmFormatModifierPlaneCount: uint32
    val pPlaneLayouts: nativeptr<VkSubresourceLayout>

[<Struct>]
type VkImageDrmFormatModifierPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable drmFormatModifier: uint64

[<Struct>]
type VkImageStencilUsageCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable stencilUsage: VkImageUsageFlags

[<Struct>]
type VkDeviceMemoryOverallocationCreateInfoAMD =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable overallocationBehavior: VkMemoryOverallocationBehaviorAMD

[<Struct>]
type VkPhysicalDeviceFragmentDensityMapFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable fragmentDensityMap: VkBool32
    val mutable fragmentDensityMapDynamic: VkBool32
    val mutable fragmentDensityMapNonSubsampledImages: VkBool32

[<Struct>]
type VkPhysicalDeviceFragmentDensityMapPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable minFragmentDensityTexelSize: VkExtent2D
    val mutable maxFragmentDensityTexelSize: VkExtent2D
    val mutable fragmentDensityInvocations: VkBool32

[<Struct>]
type VkRenderPassFragmentDensityMapCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable fragmentDensityMapAttachment: VkAttachmentReference

[<Struct>]
type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable scalarBlockLayout: VkBool32

[<Struct>]
type VkSurfaceProtectedCapabilitiesKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Represents if surface can be protected
    val mutable supportsProtected: VkBool32

[<Struct>]
type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable uniformBufferStandardLayout: VkBool32

[<Struct>]
type VkPhysicalDeviceDepthClipEnableFeaturesEXT =
    val mutable sType: VkStructureType
    /// Pointer to next structure
    val mutable pNext: nativeint
    val mutable depthClipEnable: VkBool32

[<Struct>]
type VkPipelineRasterizationDepthClipStateCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT
    val mutable depthClipEnable: VkBool32

[<Struct>]
type VkPhysicalDeviceMemoryBudgetPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable heapBudget: VkDeviceSize
    val mutable heapUsage: VkDeviceSize

[<Struct>]
type VkPhysicalDeviceMemoryPriorityFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable memoryPriority: VkBool32

[<Struct>]
type VkMemoryPriorityAllocateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable priority: float32

[<Struct>]
type VkPhysicalDeviceBufferDeviceAddressFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable bufferDeviceAddress: VkBool32
    val mutable bufferDeviceAddressCaptureReplay: VkBool32
    val mutable bufferDeviceAddressMultiDevice: VkBool32

type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT

[<Struct>]
type VkBufferDeviceAddressInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable buffer: VkBuffer

[<Struct>]
type VkBufferDeviceAddressCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable deviceAddress: VkDeviceAddress

[<Struct>]
type VkPhysicalDeviceImageViewImageFormatInfoEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable imageViewType: VkImageViewType

[<Struct>]
type VkFilterCubicImageViewImageFormatPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable filterCubic: VkBool32
    val mutable filterCubicMinmax: VkBool32

[<Struct>]
type VkPhysicalDeviceImagelessFramebufferFeaturesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable imagelessFramebuffer: VkBool32

[<Struct>]
type VkFramebufferAttachmentsCreateInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable attachmentImageInfoCount: uint32
    val pAttachmentImageInfos: nativeptr<VkFramebufferAttachmentImageInfoKHR>

[<Struct>]
type VkFramebufferAttachmentImageInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Image creation flags
    val mutable flags: VkImageCreateFlags
    /// Image usage flags
    val mutable usage: VkImageUsageFlags
    val mutable width: uint32
    val mutable height: uint32
    val mutable layerCount: uint32
    val mutable viewFormatCount: uint32
    val pViewFormats: nativeptr<VkFormat>

[<Struct>]
type VkRenderPassAttachmentBeginInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable attachmentCount: uint32
    val pAttachments: nativeptr<VkImageView>

[<Struct>]
type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable textureCompressionASTC_HDR: VkBool32

[<Struct>]
type VkPhysicalDeviceCooperativeMatrixFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable cooperativeMatrix: VkBool32
    val mutable cooperativeMatrixRobustBufferAccess: VkBool32

[<Struct>]
type VkPhysicalDeviceCooperativeMatrixPropertiesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable cooperativeMatrixSupportedStages: VkShaderStageFlags

[<Struct>]
type VkCooperativeMatrixPropertiesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable MSize: uint32
    val mutable NSize: uint32
    val mutable KSize: uint32
    val mutable AType: VkComponentTypeNV
    val mutable BType: VkComponentTypeNV
    val mutable CType: VkComponentTypeNV
    val mutable DType: VkComponentTypeNV
    val mutable scope: VkScopeNV

[<Struct>]
type VkPhysicalDeviceYcbcrImageArraysFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable ycbcrImageArrays: VkBool32

[<Struct>]
type VkImageViewHandleInfoNVX =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable imageView: VkImageView
    val mutable descriptorType: VkDescriptorType
    val mutable sampler: VkSampler

[<Struct>]
type VkPresentFrameTokenGGP =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable frameToken: GgpFrameToken

[<Struct>]
type VkPipelineCreationFeedbackEXT =
    val mutable flags: VkPipelineCreationFeedbackFlagsEXT
    val mutable duration: uint64

[<Struct>]
type VkPipelineCreationFeedbackCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    /// Output pipeline creation feedback.
    val mutable pPipelineCreationFeedback: nativeptr<VkPipelineCreationFeedbackEXT>
    val mutable pipelineStageCreationFeedbackCount: uint32
    /// One entry for each shader stage specified in the parent Vk*PipelineCreateInfo struct
    val mutable pPipelineStageCreationFeedbacks: nativeptr<VkPipelineCreationFeedbackEXT>

[<Struct>]
type VkSurfaceFullScreenExclusiveInfoEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable fullScreenExclusive: VkFullScreenExclusiveEXT

[<Struct>]
type VkSurfaceFullScreenExclusiveWin32InfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable hmonitor: HMONITOR

[<Struct>]
type VkSurfaceCapabilitiesFullScreenExclusiveEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable fullScreenExclusiveSupported: VkBool32

[<Struct>]
type VkHeadlessSurfaceCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkHeadlessSurfaceCreateFlagsEXT

[<Struct>]
type VkPhysicalDeviceCoverageReductionModeFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable coverageReductionMode: VkBool32

[<Struct>]
type VkPipelineCoverageReductionStateCreateInfoNV =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable flags: VkPipelineCoverageReductionStateCreateFlagsNV
    val mutable coverageReductionMode: VkCoverageReductionModeNV

[<Struct>]
type VkFramebufferMixedSamplesCombinationNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable coverageReductionMode: VkCoverageReductionModeNV
    val mutable rasterizationSamples: VkSampleCountFlagBits
    val mutable depthStencilSamples: VkSampleCountFlags
    val mutable colorSamples: VkSampleCountFlags

[<Struct>]
type VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderIntegerFunctions2: VkBool32

[<Struct;StructLayout(LayoutKind.Explicit)>]
type VkPerformanceValueDataINTEL =
    [<FieldOffset(0)>] val mutable value32: uint32
    [<FieldOffset(0)>] val mutable value64: uint64
    [<FieldOffset(0)>] val mutable valueFloat: float32
    [<FieldOffset(0)>] val mutable valueBool: VkBool32
    [<FieldOffset(0)>] val valueString: char

[<Struct>]
type VkPerformanceValueINTEL =
    val mutable typ: VkPerformanceValueTypeINTEL
    val mutable data: VkPerformanceValueDataINTEL

[<Struct>]
type VkInitializePerformanceApiInfoINTEL =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable pUserData: nativeint

[<Struct>]
type VkQueryPoolCreateInfoINTEL =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable performanceCountersSampling: VkQueryPoolSamplingModeINTEL

[<Struct>]
type VkPerformanceMarkerInfoINTEL =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable marker: uint64

[<Struct>]
type VkPerformanceStreamMarkerInfoINTEL =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable marker: uint32

[<Struct>]
type VkPerformanceOverrideInfoINTEL =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable typ: VkPerformanceOverrideTypeINTEL
    val mutable enable: VkBool32
    val mutable parameter: uint64

[<Struct>]
type VkPerformanceConfigurationAcquireInfoINTEL =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable typ: VkPerformanceConfigurationTypeINTEL

[<Struct>]
type VkPhysicalDeviceIndexTypeUint8FeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable indexTypeUint8: VkBool32

[<Struct>]
type VkPhysicalDeviceShaderSMBuiltinsPropertiesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderSMCount: uint32
    val mutable shaderWarpsPerSM: uint32

[<Struct>]
type VkPhysicalDeviceShaderSMBuiltinsFeaturesNV =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderSMBuiltins: VkBool32

[<Struct>]
type VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT =
    val mutable sType: VkStructureType
    /// Pointer to next structure
    val mutable pNext: nativeint
    val mutable fragmentShaderSampleInterlock: VkBool32
    val mutable fragmentShaderPixelInterlock: VkBool32
    val mutable fragmentShaderShadingRateInterlock: VkBool32

[<Struct>]
type VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable pipelineExecutableInfo: VkBool32

[<Struct>]
type VkPipelineInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable pipeline: VkPipeline

[<Struct>]
type VkPipelineExecutablePropertiesKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable stages: VkShaderStageFlags
    val mutable name: char
    val mutable description: char
    val mutable subgroupSize: uint32

[<Struct>]
type VkPipelineExecutableInfoKHR =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable pipeline: VkPipeline
    val mutable executableIndex: uint32

[<Struct;StructLayout(LayoutKind.Explicit)>]
type VkPipelineExecutableStatisticValueKHR =
    [<FieldOffset(0)>] val mutable b32: VkBool32
    [<FieldOffset(0)>] val mutable i64: int64
    [<FieldOffset(0)>] val mutable u64: uint64
    [<FieldOffset(0)>] val mutable f64: float

[<Struct>]
type VkPipelineExecutableStatisticKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable name: char
    val mutable description: char
    val mutable format: VkPipelineExecutableStatisticFormatKHR
    val mutable value: VkPipelineExecutableStatisticValueKHR

[<Struct>]
type VkPipelineExecutableInternalRepresentationKHR =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable name: char
    val mutable description: char
    val mutable isText: VkBool32
    val mutable dataSize: unativeint
    val mutable pData: nativeint

[<Struct>]
type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable shaderDemoteToHelperInvocation: VkBool32

[<Struct>]
type VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable texelBufferAlignment: VkBool32

[<Struct>]
type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable storageTexelBufferOffsetAlignmentBytes: VkDeviceSize
    val mutable storageTexelBufferOffsetSingleTexelAlignment: VkBool32
    val mutable uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize
    val mutable uniformTexelBufferOffsetSingleTexelAlignment: VkBool32

[<Struct>]
type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable subgroupSizeControl: VkBool32
    val mutable computeFullSubgroups: VkBool32

[<Struct>]
type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    /// The minimum subgroup size supported by this device
    val mutable minSubgroupSize: uint32
    /// The maximum subgroup size supported by this device
    val mutable maxSubgroupSize: uint32
    /// The maximum number of subgroups supported in a workgroup
    val mutable maxComputeWorkgroupSubgroups: uint32
    /// The shader stages that support specifying a subgroup size
    val mutable requiredSubgroupSizeStages: VkShaderStageFlags

[<Struct>]
type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable requiredSubgroupSize: uint32

[<Struct>]
type VkPhysicalDeviceLineRasterizationFeaturesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable rectangularLines: VkBool32
    val mutable bresenhamLines: VkBool32
    val mutable smoothLines: VkBool32
    val mutable stippledRectangularLines: VkBool32
    val mutable stippledBresenhamLines: VkBool32
    val mutable stippledSmoothLines: VkBool32

[<Struct>]
type VkPhysicalDeviceLineRasterizationPropertiesEXT =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable lineSubPixelPrecisionBits: uint32

[<Struct>]
type VkPipelineRasterizationLineStateCreateInfoEXT =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable lineRasterizationMode: VkLineRasterizationModeEXT
    val mutable stippledLineEnable: VkBool32
    val mutable lineStippleFactor: uint32
    val mutable lineStipplePattern: uint16

[<Struct>]
type VkPipelineCompilerControlCreateInfoAMD =
    val mutable sType: VkStructureType
    val pNext: nativeint
    val mutable compilerControlFlags: VkPipelineCompilerControlFlagsAMD

[<Struct>]
type VkPhysicalDeviceCoherentMemoryFeaturesAMD =
    val mutable sType: VkStructureType
    val mutable pNext: nativeint
    val mutable deviceCoherentMemory: VkBool32

let VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256
let VK_UUID_SIZE = 16
let VK_LUID_SIZE = 8
let VK_LUID_SIZE_KHR = VK_LUID_SIZE
let VK_MAX_EXTENSION_NAME_SIZE = 256
let VK_MAX_DESCRIPTION_SIZE = 256
let VK_MAX_MEMORY_TYPES = 32
/// The maximum number of unique memory heaps, each of which supporting 1 or more memory types
let VK_MAX_MEMORY_HEAPS = 16
let VK_LOD_CLAMP_NONE = 1000.0f
let VK_REMAINING_MIP_LEVELS = ~~~0u
let VK_REMAINING_ARRAY_LAYERS = ~~~0u
let VK_WHOLE_SIZE = ~~~0UL
let VK_ATTACHMENT_UNUSED = ~~~0u
let VK_TRUE = 1
let VK_FALSE = 0
let VK_QUEUE_FAMILY_IGNORED = ~~~0u
let VK_QUEUE_FAMILY_EXTERNAL = ~~~0u-1u
let VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL
let VK_QUEUE_FAMILY_FOREIGN_EXT = ~~~0u-2u
let VK_SUBPASS_EXTERNAL = ~~~0u
let VK_MAX_DEVICE_GROUP_SIZE = 32
let VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE
let VK_MAX_DRIVER_NAME_SIZE_KHR = 256
let VK_MAX_DRIVER_INFO_SIZE_KHR = 256
let VK_SHADER_UNUSED_NV = ~~~0u

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateInstance(VkInstanceCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkInstance& pInstance)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32& pPhysicalDeviceCount, VkPhysicalDevice& pPhysicalDevices)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, char& pName)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, char& pName)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32& pQueueFamilyPropertyCount, VkQueueFamilyProperties& pQueueFamilyProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties& pMemoryProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures& pFeatures)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties& pFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType typ, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties& pImageFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkDevice& pDevice)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyDevice(VkDevice device, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEnumerateInstanceVersion(uint32& pApiVersion)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEnumerateInstanceLayerProperties(uint32& pPropertyCount, VkLayerProperties& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEnumerateInstanceExtensionProperties(char& pLayerName, uint32& pPropertyCount, VkExtensionProperties& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32& pPropertyCount, VkLayerProperties& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, char& pLayerName, uint32& pPropertyCount, VkExtensionProperties& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetDeviceQueue(VkDevice device, uint32 queueFamilyIndex, uint32 queueIndex, VkQueue& pQueue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkQueueSubmit(VkQueue queue, uint32 submitCount, VkSubmitInfo& pSubmits, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkQueueWaitIdle(VkQueue queue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkDeviceWaitIdle(VkDevice device)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo& pAllocateInfo, VkAllocationCallbacks& pAllocator, VkDeviceMemory& pMemory)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void* ppData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange& pMemoryRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange& pMemoryRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize& pCommittedMemoryInBytes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements& pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements& pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32& pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements& pSparseMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType typ, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32& pPropertyCount, VkSparseImageFormatProperties& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkQueueBindSparse(VkQueue queue, uint32 bindInfoCount, VkBindSparseInfo& pBindInfo, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkFence& pFence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkResetFences(VkDevice device, uint32 fenceCount, VkFence& pFences)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetFenceStatus(VkDevice device, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkWaitForFences(VkDevice device, uint32 fenceCount, VkFence& pFences, VkBool32 waitAll, uint64 timeout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSemaphore& pSemaphore)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkEvent& pEvent)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyEvent(VkDevice device, VkEvent event, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetEventStatus(VkDevice device, VkEvent event)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkSetEvent(VkDevice device, VkEvent event)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkResetEvent(VkDevice device, VkEvent event)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkQueryPool& pQueryPool)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, unativeint dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkBuffer& pBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkBufferView& pView)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkImage& pImage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource& pSubresource, VkSubresourceLayout& pLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkImageView& pView)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkShaderModule& pShaderModule)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkPipelineCache& pPipelineCache)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, unativeint& pDataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32 srcCacheCount, VkPipelineCache& pSrcCaches)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkGraphicsPipelineCreateInfo& pCreateInfos, VkAllocationCallbacks& pAllocator, VkPipeline& pPipelines)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkComputePipelineCreateInfo& pCreateInfos, VkAllocationCallbacks& pAllocator, VkPipeline& pPipelines)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkPipelineLayout& pPipelineLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSampler& pSampler)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkDescriptorSetLayout& pSetLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkDescriptorPool& pDescriptorPool)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo& pAllocateInfo, VkDescriptorSet& pDescriptorSets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32 descriptorSetCount, VkDescriptorSet& pDescriptorSets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkUpdateDescriptorSets(VkDevice device, uint32 descriptorWriteCount, VkWriteDescriptorSet& pDescriptorWrites, uint32 descriptorCopyCount, VkCopyDescriptorSet& pDescriptorCopies)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkFramebuffer& pFramebuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkRenderPass& pRenderPass)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D& pGranularity)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkCommandPool& pCommandPool)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo& pAllocateInfo, VkCommandBuffer& pCommandBuffers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32 commandBufferCount, VkCommandBuffer& pCommandBuffers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo& pBeginInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewport& pViewports)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32 firstScissor, uint32 scissorCount, VkRect2D& pScissors)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float32 lineWidth)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float32 depthBiasConstantFactor, float32 depthBiasClamp, float32 depthBiasSlopeFactor)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float32 blendConstants)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float32 minDepthBounds, float32 maxDepthBounds)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 compareMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 writeMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 reference)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, uint32 descriptorSetCount, VkDescriptorSet& pDescriptorSets, uint32 dynamicOffsetCount, uint32& pDynamicOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer& pBuffers, VkDeviceSize& pOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDraw(VkCommandBuffer commandBuffer, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int vertexOffset, uint32 firstInstance)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32 regionCount, VkBufferCopy& pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageCopy& pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageBlit& pRegions, VkFilter filter)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkBufferImageCopy& pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32 regionCount, VkBufferImageCopy& pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData)

/// transfer support is only available when VK_KHR_maintenance1 is enabled, as documented in valid usage language in the specification
[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32 data)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue& pColor, uint32 rangeCount, VkImageSubresourceRange& pRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue& pDepthStencil, uint32 rangeCount, VkImageSubresourceRange& pRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32 attachmentCount, VkClearAttachment& pAttachments, uint32 rectCount, VkClearRect& pRects)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageResolve& pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent& pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32 memoryBarrierCount, VkMemoryBarrier& pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier& pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier& pImageMemoryBarriers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32 memoryBarrierCount, VkMemoryBarrier& pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier& pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier& pImageMemoryBarriers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT& pConditionalRenderingBegin)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32 query)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32 offset, uint32 size, void* pValues)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo& pRenderPassBegin, VkSubpassContents contents)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32 commandBufferCount, VkCommandBuffer& pCommandBuffers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32& pPropertyCount, VkDisplayPropertiesKHR& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32& pPropertyCount, VkDisplayPlanePropertiesKHR& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32 planeIndex, uint32& pDisplayCount, VkDisplayKHR& pDisplays)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32& pPropertyCount, VkDisplayModePropertiesKHR& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkDisplayModeKHR& pMode)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32 planeIndex, VkDisplayPlaneCapabilitiesKHR& pCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32 swapchainCount, VkSwapchainCreateInfoKHR& pCreateInfos, VkAllocationCallbacks& pAllocator, VkSwapchainKHR& pSwapchains)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, VkSurfaceKHR surface, VkBool32& pSupported)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR& pSurfaceCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32& pSurfaceFormatCount, VkSurfaceFormatKHR& pSurfaceFormats)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32& pPresentModeCount, VkPresentModeKHR& pPresentModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSwapchainKHR& pSwapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32& pSwapchainImageCount, VkImage& pSwapchainImages)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64 timeout, VkSemaphore semaphore, VkFence fence, uint32& pImageIndex)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfoKHR& pPresentInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateViSurfaceNN(VkInstance instance, VkViSurfaceCreateInfoNN& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, wl_display& display)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, Display& dpy, VisualID visualID)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateXcbSurfaceKHR(VkInstance instance, VkXcbSurfaceCreateInfoKHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, xcb_connection_t& connection, xcb_visualid_t visual_id)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance, VkImagePipeSurfaceCreateInfoFUCHSIA& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateStreamDescriptorSurfaceGGP(VkInstance instance, VkStreamDescriptorSurfaceCreateInfoGGP& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT& pCreateInfo, VkAllocationCallbacks& pAllocator, VkDebugReportCallbackEXT& pCallback)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64 object, unativeint location, int messageCode, char& pLayerPrefix, char& pMessage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT& pNameInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT& pTagInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT& pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT& pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType typ, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV& pExternalImageFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE& pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdProcessCommandsNVX(VkCommandBuffer commandBuffer, VkCmdProcessCommandsInfoNVX& pProcessCommandsInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdReserveSpaceForCommandsNVX(VkCommandBuffer commandBuffer, VkCmdReserveSpaceForCommandsInfoNVX& pReserveSpaceInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutCreateInfoNVX& pCreateInfo, VkAllocationCallbacks& pAllocator, VkIndirectCommandsLayoutNVX& pIndirectCommandsLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutNVX indirectCommandsLayout, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateObjectTableNVX(VkDevice device, VkObjectTableCreateInfoNVX& pCreateInfo, VkAllocationCallbacks& pAllocator, VkObjectTableNVX& pObjectTable)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyObjectTableNVX(VkDevice device, VkObjectTableNVX objectTable, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkRegisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint32 objectCount, VkObjectTableEntryNVX& ppObjectTableEntries, uint32& pObjectIndices)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkUnregisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint32 objectCount, VkObjectEntryTypeNVX& pObjectEntryTypes, uint32& pObjectIndices)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice physicalDevice, VkDeviceGeneratedCommandsFeaturesNVX& pFeatures, VkDeviceGeneratedCommandsLimitsNVX& pLimits)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2& pFeatures)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2& pFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2& pImageFormatInfo, VkImageFormatProperties2& pImageFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32& pQueueFamilyPropertyCount, VkQueueFamilyProperties2& pQueueFamilyProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2& pMemoryProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2& pFormatInfo, uint32& pPropertyCount, VkSparseImageFormatProperties2& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set, uint32 descriptorWriteCount, VkWriteDescriptorSet& pDescriptorWrites)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo& pExternalBufferInfo, VkExternalBufferProperties& pExternalBufferProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetMemoryWin32HandleKHR(VkDevice device, VkMemoryGetWin32HandleInfoKHR& pGetWin32HandleInfo, HANDLE& pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR& pMemoryWin32HandleProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfoKHR& pGetFdInfo, int& pFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR& pMemoryFdProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo& pExternalSemaphoreInfo, VkExternalSemaphoreProperties& pExternalSemaphoreProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetSemaphoreWin32HandleKHR(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR& pGetWin32HandleInfo, HANDLE& pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR& pImportSemaphoreWin32HandleInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfoKHR& pGetFdInfo, int& pFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfoKHR& pImportSemaphoreFdInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo& pExternalFenceInfo, VkExternalFenceProperties& pExternalFenceProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetFenceWin32HandleKHR(VkDevice device, VkFenceGetWin32HandleInfoKHR& pGetWin32HandleInfo, HANDLE& pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkImportFenceWin32HandleKHR(VkDevice device, VkImportFenceWin32HandleInfoKHR& pImportFenceWin32HandleInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfoKHR& pGetFdInfo, int& pFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkImportFenceFdKHR(VkDevice device, VkImportFenceFdInfoKHR& pImportFenceFdInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display& dpy, VkDisplayKHR display)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, Display& dpy, RROutput rrOutput, VkDisplayKHR& pDisplay)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT& pDisplayPowerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT& pDeviceEventInfo, VkAllocationCallbacks& pAllocator, VkFence& pFence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT& pDisplayEventInfo, VkAllocationCallbacks& pAllocator, VkFence& pFence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64& pCounterValue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT& pSurfaceCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32& pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties& pPhysicalDeviceGroupProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32 heapIndex, uint32 localDeviceIndex, uint32 remoteDeviceIndex, VkPeerMemoryFeatureFlags& pPeerMemoryFeatures)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkBindBufferMemory2(VkDevice device, uint32 bindInfoCount, VkBindBufferMemoryInfo& pBindInfos)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkBindImageMemory2(VkDevice device, uint32 bindInfoCount, VkBindImageMemoryInfo& pBindInfos)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32 deviceMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR& pDeviceGroupPresentCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR& pModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR& pAcquireInfo, uint32& pImageIndex)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32 baseGroupX, uint32 baseGroupY, uint32 baseGroupZ, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32& pRectCount, VkRect2D& pRects)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkDescriptorUpdateTemplate& pDescriptorUpdateTemplate)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32 set, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkSetHdrMetadataEXT(VkDevice device, uint32 swapchainCount, VkSwapchainKHR& pSwapchains, VkHdrMetadataEXT& pMetadata)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE& pDisplayTimingProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32& pPresentationTimingCount, VkPastPresentationTimingGOOGLE& pPresentationTimings)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateIOSSurfaceMVK(VkInstance instance, VkIOSSurfaceCreateInfoMVK& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateMacOSSurfaceMVK(VkInstance instance, VkMacOSSurfaceCreateInfoMVK& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfoEXT& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewportWScalingNV& pViewportWScalings)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32 firstDiscardRectangle, uint32 discardRectangleCount, VkRect2D& pDiscardRectangles)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT& pSampleLocationsInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT& pMultisampleProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR& pSurfaceInfo, VkSurfaceCapabilities2KHR& pSurfaceCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR& pSurfaceInfo, uint32& pSurfaceFormatCount, VkSurfaceFormat2KHR& pSurfaceFormats)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32& pPropertyCount, VkDisplayProperties2KHR& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32& pPropertyCount, VkDisplayPlaneProperties2KHR& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32& pPropertyCount, VkDisplayModeProperties2KHR& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR& pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR& pCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2& pInfo, VkMemoryRequirements2& pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2& pInfo, VkMemoryRequirements2& pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2& pInfo, uint32& pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2& pSparseMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSamplerYcbcrConversion& pYcbcrConversion)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2& pQueueInfo, VkQueue& pQueue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT& pCreateInfo, VkAllocationCallbacks& pAllocator, VkValidationCacheEXT& pValidationCache)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, unativeint& pDataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32 srcCacheCount, VkValidationCacheEXT& pSrcCaches)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo& pCreateInfo, VkDescriptorSetLayoutSupport& pSupport)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetSwapchainGrallocUsageANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, int& grallocUsage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetSwapchainGrallocUsage2ANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, VkSwapchainImageUsageFlagsANDROID swapchainImageUsage, uint64& grallocConsumerUsage, uint64& grallocProducerUsage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAcquireImageANDROID(VkDevice device, VkImage image, int nativeFenceFd, VkSemaphore semaphore, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkQueueSignalReleaseImageANDROID(VkQueue queue, uint32 waitSemaphoreCount, VkSemaphore& pWaitSemaphores, VkImage image, int& pNativeFenceFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, unativeint& pInfoSize, void* pInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32& pTimeDomainCount, VkTimeDomainEXT& pTimeDomains)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32 timestampCount, VkCalibratedTimestampInfoEXT& pTimestampInfos, uint64& pTimestamps, uint64& pMaxDeviation)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT& pNameInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfoEXT& pTagInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT& pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT& pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT& pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT& pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT& pCreateInfo, VkAllocationCallbacks& pAllocator, VkDebugUtilsMessengerEXT& pMessenger)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT& pCallbackData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT& pMemoryHostPointerProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32 marker)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2KHR& pCreateInfo, VkAllocationCallbacks& pAllocator, VkRenderPass& pRenderPass)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo& pRenderPassBegin, VkSubpassBeginInfoKHR& pSubpassBeginInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfoKHR& pSubpassBeginInfo, VkSubpassEndInfoKHR& pSubpassEndInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, VkSubpassEndInfoKHR& pSubpassEndInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, AHardwareBuffer& buffer, VkAndroidHardwareBufferPropertiesANDROID& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, VkMemoryGetAndroidHardwareBufferInfoANDROID& pInfo, AHardwareBuffer& pBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* pCheckpointMarker)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetQueueCheckpointDataNV(VkQueue queue, uint32& pCheckpointDataCount, VkCheckpointDataNV& pCheckpointData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer& pBuffers, VkDeviceSize& pOffsets, VkDeviceSize& pSizes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, uint32 counterBufferCount, VkBuffer& pCounterBuffers, VkDeviceSize& pCounterBufferOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, uint32 counterBufferCount, VkBuffer& pCounterBuffers, VkDeviceSize& pCounterBufferOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags, uint32 index)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, uint32 index)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32 instanceCount, uint32 firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32 counterOffset, uint32 vertexStride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32 firstExclusiveScissor, uint32 exclusiveScissorCount, VkRect2D& pExclusiveScissors)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkShadingRatePaletteNV& pShadingRatePalettes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32 customSampleOrderCount, VkCoarseSampleOrderCustomNV& pCustomSampleOrders)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32 taskCount, uint32 firstTask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32 shader)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV& pCreateInfo, VkAllocationCallbacks& pAllocator, VkAccelerationStructureNV& pAccelerationStructure)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks& pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV& pInfo, VkMemoryRequirements2KHR& pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32 bindInfoCount, VkBindAccelerationStructureMemoryInfoNV& pBindInfos)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeNV mode)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32 accelerationStructureCount, VkAccelerationStructureNV& pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV& pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32 width, uint32 height, uint32 depth)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32 firstGroup, uint32 groupCount, unativeint dataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, unativeint dataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkRayTracingPipelineCreateInfoNV& pCreateInfos, VkAllocationCallbacks& pAllocator, VkPipeline& pPipelines)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, VkBufferDeviceAddressInfoEXT& pInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32& pPropertyCount, VkCooperativeMatrixPropertiesNV& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern uint32 vkGetImageViewHandleNVX(VkDevice device, VkImageViewHandleInfoNVX& pInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR& pSurfaceInfo, uint32& pPresentModeCount, VkPresentModeKHR& pPresentModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, VkPhysicalDeviceSurfaceInfo2KHR& pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR& pModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT& pCreateInfo, VkAllocationCallbacks& pAllocator, VkSurfaceKHR& pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32& pCombinationCount, VkFramebufferMixedSamplesCombinationNV& pCombinations)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkInitializePerformanceApiINTEL(VkDevice device, VkInitializePerformanceApiInfoINTEL& pInitializeInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkUninitializePerformanceApiINTEL(VkDevice device)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL& pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL& pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL& pOverrideInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL& pAcquireInfo, VkPerformanceConfigurationINTEL& pConfiguration)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL& pValue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR& pPipelineInfo, uint32& pExecutableCount, VkPipelineExecutablePropertiesKHR& pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR& pExecutableInfo, uint32& pStatisticCount, VkPipelineExecutableStatisticKHR& pStatistics)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR& pExecutableInfo, uint32& pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR& pInternalRepresentations)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi)>]
extern void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32 lineStippleFactor, uint16 lineStipplePattern)

let VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
let VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES