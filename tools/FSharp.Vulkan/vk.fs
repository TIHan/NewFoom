// File is generated. Do not modify.
module rec FSharp.Vulkan.Interop

open System
open System.Threading
open System.Runtime.CompilerServices
open System.Runtime.InteropServices
open System.Security
open System.Diagnostics
open System.Text
open FSharp.NativeInterop

#nowarn "9" 
#nowarn "40" 
#nowarn "51" 

type VkImageLayout =
    /// Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
    | VK_IMAGE_LAYOUT_UNDEFINED = 0u
    /// General layout when image can be used for any kind of access
    | VK_IMAGE_LAYOUT_GENERAL = 1u
    /// Optimal layout when image is only used for color attachment read/write
    | VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2u
    /// Optimal layout when image is only used for depth/stencil attachment read/write
    | VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3u
    /// Optimal layout when image is used for read only depth/stencil attachment and shader access
    | VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4u
    /// Optimal layout when image is used for read only shader access
    | VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5u
    /// Optimal layout when image is used only as source of transfer operations
    | VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6u
    /// Optimal layout when image is used only as destination of transfer operations
    | VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7u
    /// Initial layout used when the data is populated by the CPU
    | VK_IMAGE_LAYOUT_PREINITIALIZED = 8u
    | VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002u
    | VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000u
    | VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000u
    | VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001u
    | VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003u
    | VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000u
    | VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001u
    | VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000u

type VkAttachmentLoadOp =
    | VK_ATTACHMENT_LOAD_OP_LOAD = 0u
    | VK_ATTACHMENT_LOAD_OP_CLEAR = 1u
    | VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2u

type VkAttachmentStoreOp =
    | VK_ATTACHMENT_STORE_OP_STORE = 0u
    | VK_ATTACHMENT_STORE_OP_DONT_CARE = 1u

type VkImageType =
    | VK_IMAGE_TYPE_1D = 0u
    | VK_IMAGE_TYPE_2D = 1u
    | VK_IMAGE_TYPE_3D = 2u

type VkImageTiling =
    | VK_IMAGE_TILING_OPTIMAL = 0u
    | VK_IMAGE_TILING_LINEAR = 1u
    | VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000u

type VkImageViewType =
    | VK_IMAGE_VIEW_TYPE_1D = 0u
    | VK_IMAGE_VIEW_TYPE_2D = 1u
    | VK_IMAGE_VIEW_TYPE_3D = 2u
    | VK_IMAGE_VIEW_TYPE_CUBE = 3u
    | VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4u
    | VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5u
    | VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6u

type VkCommandBufferLevel =
    | VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0u
    | VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1u

type VkComponentSwizzle =
    | VK_COMPONENT_SWIZZLE_IDENTITY = 0u
    | VK_COMPONENT_SWIZZLE_ZERO = 1u
    | VK_COMPONENT_SWIZZLE_ONE = 2u
    | VK_COMPONENT_SWIZZLE_R = 3u
    | VK_COMPONENT_SWIZZLE_G = 4u
    | VK_COMPONENT_SWIZZLE_B = 5u
    | VK_COMPONENT_SWIZZLE_A = 6u

type VkDescriptorType =
    | VK_DESCRIPTOR_TYPE_SAMPLER = 0u
    | VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1u
    | VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2u
    | VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3u
    | VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4u
    | VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5u
    | VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6u
    | VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7u
    | VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8u
    | VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9u
    | VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10u
    | VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000u
    | VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000u

type VkQueryType =
    | VK_QUERY_TYPE_OCCLUSION = 0u
    /// Optional
    | VK_QUERY_TYPE_PIPELINE_STATISTICS = 1u
    | VK_QUERY_TYPE_TIMESTAMP = 2u
    | VK_QUERY_TYPE_RESERVED_8 = 1000023008u
    | VK_QUERY_TYPE_RESERVED_4 = 1000024004u
    | VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004u
    | VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000u
    | VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000u

type VkBorderColor =
    | VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0u
    | VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1u
    | VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2u
    | VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3u
    | VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4u
    | VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5u

type VkPipelineBindPoint =
    | VK_PIPELINE_BIND_POINT_GRAPHICS = 0u
    | VK_PIPELINE_BIND_POINT_COMPUTE = 1u
    | VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000u

type VkPipelineCacheHeaderVersion =
    | VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1u

type VkPrimitiveTopology =
    | VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0u
    | VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1u
    | VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5u
    | VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6u
    | VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8u
    | VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9u
    | VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10u

type VkSharingMode =
    | VK_SHARING_MODE_EXCLUSIVE = 0u
    | VK_SHARING_MODE_CONCURRENT = 1u

type VkIndexType =
    | VK_INDEX_TYPE_UINT16 = 0u
    | VK_INDEX_TYPE_UINT32 = 1u
    | VK_INDEX_TYPE_NONE_NV = 1000165000u
    | VK_INDEX_TYPE_UINT8_EXT = 1000265000u

type VkFilter =
    | VK_FILTER_NEAREST = 0u
    | VK_FILTER_LINEAR = 1u
    | VK_FILTER_CUBIC_IMG = 1000015000u
    | VK_FILTER_CUBIC_EXT = 1000015000u

type VkSamplerMipmapMode =
    /// Choose nearest mip level
    | VK_SAMPLER_MIPMAP_MODE_NEAREST = 0u
    /// Linear filter between mip levels
    | VK_SAMPLER_MIPMAP_MODE_LINEAR = 1u

type VkSamplerAddressMode =
    | VK_SAMPLER_ADDRESS_MODE_REPEAT = 0u
    | VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1u
    | VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2u
    | VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3u
    /// Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and does not have a suffix. This is a special case, and should not be repeated
    | VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4u
    /// Alias introduced for consistency with extension suffixing rules
    | VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4u

type VkCompareOp =
    | VK_COMPARE_OP_NEVER = 0u
    | VK_COMPARE_OP_LESS = 1u
    | VK_COMPARE_OP_EQUAL = 2u
    | VK_COMPARE_OP_LESS_OR_EQUAL = 3u
    | VK_COMPARE_OP_GREATER = 4u
    | VK_COMPARE_OP_NOT_EQUAL = 5u
    | VK_COMPARE_OP_GREATER_OR_EQUAL = 6u
    | VK_COMPARE_OP_ALWAYS = 7u

type VkPolygonMode =
    | VK_POLYGON_MODE_FILL = 0u
    | VK_POLYGON_MODE_LINE = 1u
    | VK_POLYGON_MODE_POINT = 2u
    | VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000u

type VkCullModeFlagBits =
    | VK_CULL_MODE_NONE = 0u
    | VK_CULL_MODE_FRONT_BIT = 1u
    | VK_CULL_MODE_BACK_BIT = 2u
    | VK_CULL_MODE_FRONT_AND_BACK = 3u

type VkFrontFace =
    | VK_FRONT_FACE_COUNTER_CLOCKWISE = 0u
    | VK_FRONT_FACE_CLOCKWISE = 1u

type VkBlendFactor =
    | VK_BLEND_FACTOR_ZERO = 0u
    | VK_BLEND_FACTOR_ONE = 1u
    | VK_BLEND_FACTOR_SRC_COLOR = 2u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3u
    | VK_BLEND_FACTOR_DST_COLOR = 4u
    | VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5u
    | VK_BLEND_FACTOR_SRC_ALPHA = 6u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7u
    | VK_BLEND_FACTOR_DST_ALPHA = 8u
    | VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9u
    | VK_BLEND_FACTOR_CONSTANT_COLOR = 10u
    | VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11u
    | VK_BLEND_FACTOR_CONSTANT_ALPHA = 12u
    | VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13u
    | VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14u
    | VK_BLEND_FACTOR_SRC1_COLOR = 15u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16u
    | VK_BLEND_FACTOR_SRC1_ALPHA = 17u
    | VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18u

type VkBlendOp =
    | VK_BLEND_OP_ADD = 0u
    | VK_BLEND_OP_SUBTRACT = 1u
    | VK_BLEND_OP_REVERSE_SUBTRACT = 2u
    | VK_BLEND_OP_MIN = 3u
    | VK_BLEND_OP_MAX = 4u
    | VK_BLEND_OP_ZERO_EXT = 1000148000u
    | VK_BLEND_OP_SRC_EXT = 1000148001u
    | VK_BLEND_OP_DST_EXT = 1000148002u
    | VK_BLEND_OP_SRC_OVER_EXT = 1000148003u
    | VK_BLEND_OP_DST_OVER_EXT = 1000148004u
    | VK_BLEND_OP_SRC_IN_EXT = 1000148005u
    | VK_BLEND_OP_DST_IN_EXT = 1000148006u
    | VK_BLEND_OP_SRC_OUT_EXT = 1000148007u
    | VK_BLEND_OP_DST_OUT_EXT = 1000148008u
    | VK_BLEND_OP_SRC_ATOP_EXT = 1000148009u
    | VK_BLEND_OP_DST_ATOP_EXT = 1000148010u
    | VK_BLEND_OP_XOR_EXT = 1000148011u
    | VK_BLEND_OP_MULTIPLY_EXT = 1000148012u
    | VK_BLEND_OP_SCREEN_EXT = 1000148013u
    | VK_BLEND_OP_OVERLAY_EXT = 1000148014u
    | VK_BLEND_OP_DARKEN_EXT = 1000148015u
    | VK_BLEND_OP_LIGHTEN_EXT = 1000148016u
    | VK_BLEND_OP_COLORDODGE_EXT = 1000148017u
    | VK_BLEND_OP_COLORBURN_EXT = 1000148018u
    | VK_BLEND_OP_HARDLIGHT_EXT = 1000148019u
    | VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020u
    | VK_BLEND_OP_DIFFERENCE_EXT = 1000148021u
    | VK_BLEND_OP_EXCLUSION_EXT = 1000148022u
    | VK_BLEND_OP_INVERT_EXT = 1000148023u
    | VK_BLEND_OP_INVERT_RGB_EXT = 1000148024u
    | VK_BLEND_OP_LINEARDODGE_EXT = 1000148025u
    | VK_BLEND_OP_LINEARBURN_EXT = 1000148026u
    | VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027u
    | VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028u
    | VK_BLEND_OP_PINLIGHT_EXT = 1000148029u
    | VK_BLEND_OP_HARDMIX_EXT = 1000148030u
    | VK_BLEND_OP_HSL_HUE_EXT = 1000148031u
    | VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032u
    | VK_BLEND_OP_HSL_COLOR_EXT = 1000148033u
    | VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034u
    | VK_BLEND_OP_PLUS_EXT = 1000148035u
    | VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036u
    | VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037u
    | VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038u
    | VK_BLEND_OP_MINUS_EXT = 1000148039u
    | VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040u
    | VK_BLEND_OP_CONTRAST_EXT = 1000148041u
    | VK_BLEND_OP_INVERT_OVG_EXT = 1000148042u
    | VK_BLEND_OP_RED_EXT = 1000148043u
    | VK_BLEND_OP_GREEN_EXT = 1000148044u
    | VK_BLEND_OP_BLUE_EXT = 1000148045u

type VkStencilOp =
    | VK_STENCIL_OP_KEEP = 0u
    | VK_STENCIL_OP_ZERO = 1u
    | VK_STENCIL_OP_REPLACE = 2u
    | VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3u
    | VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4u
    | VK_STENCIL_OP_INVERT = 5u
    | VK_STENCIL_OP_INCREMENT_AND_WRAP = 6u
    | VK_STENCIL_OP_DECREMENT_AND_WRAP = 7u

type VkLogicOp =
    | VK_LOGIC_OP_CLEAR = 0u
    | VK_LOGIC_OP_AND = 1u
    | VK_LOGIC_OP_AND_REVERSE = 2u
    | VK_LOGIC_OP_COPY = 3u
    | VK_LOGIC_OP_AND_INVERTED = 4u
    | VK_LOGIC_OP_NO_OP = 5u
    | VK_LOGIC_OP_XOR = 6u
    | VK_LOGIC_OP_OR = 7u
    | VK_LOGIC_OP_NOR = 8u
    | VK_LOGIC_OP_EQUIVALENT = 9u
    | VK_LOGIC_OP_INVERT = 10u
    | VK_LOGIC_OP_OR_REVERSE = 11u
    | VK_LOGIC_OP_COPY_INVERTED = 12u
    | VK_LOGIC_OP_OR_INVERTED = 13u
    | VK_LOGIC_OP_NAND = 14u
    | VK_LOGIC_OP_SET = 15u

type VkInternalAllocationType =
    | VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0u

type VkSystemAllocationScope =
    | VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0u
    | VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1u
    | VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2u
    | VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3u
    | VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4u

type VkPhysicalDeviceType =
    | VK_PHYSICAL_DEVICE_TYPE_OTHER = 0u
    | VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1u
    | VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2u
    | VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3u
    | VK_PHYSICAL_DEVICE_TYPE_CPU = 4u

type VkVertexInputRate =
    | VK_VERTEX_INPUT_RATE_VERTEX = 0u
    | VK_VERTEX_INPUT_RATE_INSTANCE = 1u

/// Vulkan format definitions
type VkFormat =
    | VK_FORMAT_UNDEFINED = 0u
    | VK_FORMAT_R4G4_UNORM_PACK8 = 1u
    | VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2u
    | VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3u
    | VK_FORMAT_R5G6B5_UNORM_PACK16 = 4u
    | VK_FORMAT_B5G6R5_UNORM_PACK16 = 5u
    | VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6u
    | VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7u
    | VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8u
    | VK_FORMAT_R8_UNORM = 9u
    | VK_FORMAT_R8_SNORM = 10u
    | VK_FORMAT_R8_USCALED = 11u
    | VK_FORMAT_R8_SSCALED = 12u
    | VK_FORMAT_R8_UINT = 13u
    | VK_FORMAT_R8_SINT = 14u
    | VK_FORMAT_R8_SRGB = 15u
    | VK_FORMAT_R8G8_UNORM = 16u
    | VK_FORMAT_R8G8_SNORM = 17u
    | VK_FORMAT_R8G8_USCALED = 18u
    | VK_FORMAT_R8G8_SSCALED = 19u
    | VK_FORMAT_R8G8_UINT = 20u
    | VK_FORMAT_R8G8_SINT = 21u
    | VK_FORMAT_R8G8_SRGB = 22u
    | VK_FORMAT_R8G8B8_UNORM = 23u
    | VK_FORMAT_R8G8B8_SNORM = 24u
    | VK_FORMAT_R8G8B8_USCALED = 25u
    | VK_FORMAT_R8G8B8_SSCALED = 26u
    | VK_FORMAT_R8G8B8_UINT = 27u
    | VK_FORMAT_R8G8B8_SINT = 28u
    | VK_FORMAT_R8G8B8_SRGB = 29u
    | VK_FORMAT_B8G8R8_UNORM = 30u
    | VK_FORMAT_B8G8R8_SNORM = 31u
    | VK_FORMAT_B8G8R8_USCALED = 32u
    | VK_FORMAT_B8G8R8_SSCALED = 33u
    | VK_FORMAT_B8G8R8_UINT = 34u
    | VK_FORMAT_B8G8R8_SINT = 35u
    | VK_FORMAT_B8G8R8_SRGB = 36u
    | VK_FORMAT_R8G8B8A8_UNORM = 37u
    | VK_FORMAT_R8G8B8A8_SNORM = 38u
    | VK_FORMAT_R8G8B8A8_USCALED = 39u
    | VK_FORMAT_R8G8B8A8_SSCALED = 40u
    | VK_FORMAT_R8G8B8A8_UINT = 41u
    | VK_FORMAT_R8G8B8A8_SINT = 42u
    | VK_FORMAT_R8G8B8A8_SRGB = 43u
    | VK_FORMAT_B8G8R8A8_UNORM = 44u
    | VK_FORMAT_B8G8R8A8_SNORM = 45u
    | VK_FORMAT_B8G8R8A8_USCALED = 46u
    | VK_FORMAT_B8G8R8A8_SSCALED = 47u
    | VK_FORMAT_B8G8R8A8_UINT = 48u
    | VK_FORMAT_B8G8R8A8_SINT = 49u
    | VK_FORMAT_B8G8R8A8_SRGB = 50u
    | VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51u
    | VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52u
    | VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53u
    | VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54u
    | VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55u
    | VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56u
    | VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57u
    | VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58u
    | VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59u
    | VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60u
    | VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61u
    | VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62u
    | VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63u
    | VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64u
    | VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65u
    | VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66u
    | VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67u
    | VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68u
    | VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69u
    | VK_FORMAT_R16_UNORM = 70u
    | VK_FORMAT_R16_SNORM = 71u
    | VK_FORMAT_R16_USCALED = 72u
    | VK_FORMAT_R16_SSCALED = 73u
    | VK_FORMAT_R16_UINT = 74u
    | VK_FORMAT_R16_SINT = 75u
    | VK_FORMAT_R16_SFLOAT = 76u
    | VK_FORMAT_R16G16_UNORM = 77u
    | VK_FORMAT_R16G16_SNORM = 78u
    | VK_FORMAT_R16G16_USCALED = 79u
    | VK_FORMAT_R16G16_SSCALED = 80u
    | VK_FORMAT_R16G16_UINT = 81u
    | VK_FORMAT_R16G16_SINT = 82u
    | VK_FORMAT_R16G16_SFLOAT = 83u
    | VK_FORMAT_R16G16B16_UNORM = 84u
    | VK_FORMAT_R16G16B16_SNORM = 85u
    | VK_FORMAT_R16G16B16_USCALED = 86u
    | VK_FORMAT_R16G16B16_SSCALED = 87u
    | VK_FORMAT_R16G16B16_UINT = 88u
    | VK_FORMAT_R16G16B16_SINT = 89u
    | VK_FORMAT_R16G16B16_SFLOAT = 90u
    | VK_FORMAT_R16G16B16A16_UNORM = 91u
    | VK_FORMAT_R16G16B16A16_SNORM = 92u
    | VK_FORMAT_R16G16B16A16_USCALED = 93u
    | VK_FORMAT_R16G16B16A16_SSCALED = 94u
    | VK_FORMAT_R16G16B16A16_UINT = 95u
    | VK_FORMAT_R16G16B16A16_SINT = 96u
    | VK_FORMAT_R16G16B16A16_SFLOAT = 97u
    | VK_FORMAT_R32_UINT = 98u
    | VK_FORMAT_R32_SINT = 99u
    | VK_FORMAT_R32_SFLOAT = 100u
    | VK_FORMAT_R32G32_UINT = 101u
    | VK_FORMAT_R32G32_SINT = 102u
    | VK_FORMAT_R32G32_SFLOAT = 103u
    | VK_FORMAT_R32G32B32_UINT = 104u
    | VK_FORMAT_R32G32B32_SINT = 105u
    | VK_FORMAT_R32G32B32_SFLOAT = 106u
    | VK_FORMAT_R32G32B32A32_UINT = 107u
    | VK_FORMAT_R32G32B32A32_SINT = 108u
    | VK_FORMAT_R32G32B32A32_SFLOAT = 109u
    | VK_FORMAT_R64_UINT = 110u
    | VK_FORMAT_R64_SINT = 111u
    | VK_FORMAT_R64_SFLOAT = 112u
    | VK_FORMAT_R64G64_UINT = 113u
    | VK_FORMAT_R64G64_SINT = 114u
    | VK_FORMAT_R64G64_SFLOAT = 115u
    | VK_FORMAT_R64G64B64_UINT = 116u
    | VK_FORMAT_R64G64B64_SINT = 117u
    | VK_FORMAT_R64G64B64_SFLOAT = 118u
    | VK_FORMAT_R64G64B64A64_UINT = 119u
    | VK_FORMAT_R64G64B64A64_SINT = 120u
    | VK_FORMAT_R64G64B64A64_SFLOAT = 121u
    | VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122u
    | VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123u
    | VK_FORMAT_D16_UNORM = 124u
    | VK_FORMAT_X8_D24_UNORM_PACK32 = 125u
    | VK_FORMAT_D32_SFLOAT = 126u
    | VK_FORMAT_S8_UINT = 127u
    | VK_FORMAT_D16_UNORM_S8_UINT = 128u
    | VK_FORMAT_D24_UNORM_S8_UINT = 129u
    | VK_FORMAT_D32_SFLOAT_S8_UINT = 130u
    | VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131u
    | VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132u
    | VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133u
    | VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134u
    | VK_FORMAT_BC2_UNORM_BLOCK = 135u
    | VK_FORMAT_BC2_SRGB_BLOCK = 136u
    | VK_FORMAT_BC3_UNORM_BLOCK = 137u
    | VK_FORMAT_BC3_SRGB_BLOCK = 138u
    | VK_FORMAT_BC4_UNORM_BLOCK = 139u
    | VK_FORMAT_BC4_SNORM_BLOCK = 140u
    | VK_FORMAT_BC5_UNORM_BLOCK = 141u
    | VK_FORMAT_BC5_SNORM_BLOCK = 142u
    | VK_FORMAT_BC6H_UFLOAT_BLOCK = 143u
    | VK_FORMAT_BC6H_SFLOAT_BLOCK = 144u
    | VK_FORMAT_BC7_UNORM_BLOCK = 145u
    | VK_FORMAT_BC7_SRGB_BLOCK = 146u
    | VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147u
    | VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148u
    | VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149u
    | VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150u
    | VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151u
    | VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152u
    | VK_FORMAT_EAC_R11_UNORM_BLOCK = 153u
    | VK_FORMAT_EAC_R11_SNORM_BLOCK = 154u
    | VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155u
    | VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156u
    | VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157u
    | VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158u
    | VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159u
    | VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160u
    | VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161u
    | VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162u
    | VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163u
    | VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164u
    | VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165u
    | VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166u
    | VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167u
    | VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168u
    | VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169u
    | VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170u
    | VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171u
    | VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172u
    | VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173u
    | VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174u
    | VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175u
    | VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176u
    | VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177u
    | VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178u
    | VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179u
    | VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180u
    | VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181u
    | VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182u
    | VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183u
    | VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184u
    | VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000u
    | VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001u
    | VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002u
    | VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003u
    | VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004u
    | VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005u
    | VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006u
    | VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007u
    | VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000u
    | VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001u
    | VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002u
    | VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003u
    | VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004u
    | VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005u
    | VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006u
    | VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007u
    | VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008u
    | VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009u
    | VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010u
    | VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011u
    | VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012u
    | VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013u
    | VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000u
    | VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001u
    | VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002u
    | VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003u
    | VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004u
    | VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005u
    | VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006u
    | VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007u
    | VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008u
    | VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009u
    | VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010u
    | VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012u
    | VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014u
    | VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016u
    | VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017u
    | VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018u
    | VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019u
    | VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020u
    | VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022u
    | VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024u
    | VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026u
    | VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027u
    | VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028u
    | VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029u
    | VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030u
    | VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031u
    | VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032u
    | VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033u
    | VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011u
    | VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021u
    | VK_FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028u
    | VK_FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001u
    | VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010u
    | VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013u
    | VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014u
    | VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016u
    | VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020u
    | VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023u
    | VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024u
    | VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026u
    | VK_FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027u
    | VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030u
    | VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032u
    | VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029u
    | VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031u
    | VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033u
    | VK_FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000u
    | VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003u
    | VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005u
    | VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002u
    | VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004u
    | VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006u
    | VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009u
    | VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008u
    | VK_FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007u
    | VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019u
    | VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018u
    | VK_FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017u

/// Structure type enumerant
type VkStructureType =
    | VK_STRUCTURE_TYPE_APPLICATION_INFO = 0u
    | VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1u
    | VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2u
    | VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3u
    | VK_STRUCTURE_TYPE_SUBMIT_INFO = 4u
    | VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5u
    | VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6u
    | VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7u
    | VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8u
    | VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9u
    | VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10u
    | VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11u
    | VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12u
    | VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13u
    | VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15u
    | VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16u
    | VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17u
    | VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18u
    | VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19u
    | VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20u
    | VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23u
    | VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24u
    | VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25u
    | VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26u
    | VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27u
    | VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28u
    | VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29u
    | VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30u
    | VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34u
    | VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35u
    | VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37u
    | VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38u
    | VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42u
    | VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43u
    | VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44u
    | VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45u
    | VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46u
    /// Reserved for internal use by the loader, layers, and ICDs
    | VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47u
    /// Reserved for internal use by the loader, layers, and ICDs
    | VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000u
    | VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001u
    | VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000u
    | VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001u
    | VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000u
    | VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000u
    | VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000u
    | VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000u
    | VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000u
    | VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000u
    | VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID = 1000010000u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002u
    | VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000u
    | VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000u
    | VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001u
    | VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002u
    | VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000u
    | VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001u
    | VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000u
    | VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000u
    | VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000u
    | VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001u
    | VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001u
    | VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002u
    | VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004u
    | VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006u
    | VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008u
    | VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007u
    | VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009u
    | VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012u
    | VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014u
    | VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000u
    | VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000u
    | VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002u
    | VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001u
    | VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002u
    | VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000u
    | VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001u
    | VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002u
    | VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000u
    | VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001u
    | VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000u
    | VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000u
    | VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001u
    | VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002u
    | VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003u
    | VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000u
    | VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000u
    | VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001u
    | VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000u
    | VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000u
    | VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000u
    | VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001u
    | VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002u
    | VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003u
    | VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004u
    | VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000u
    | VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000u
    | VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000u
    | VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001u
    | VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003u
    | VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000u
    | VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001u
    | VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002u
    | VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003u
    | VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000u
    | VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001u
    | VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002u
    | VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003u
    | VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004u
    | VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005u
    | VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006u
    | VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000u
    | VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001u
    | VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000u
    | VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000u
    | VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001u
    | VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002u
    | VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000u
    | VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000u
    | VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002u
    | VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000u
    | VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001u
    | VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000u
    | VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000u
    | VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001u
    | VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002u
    | VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003u
    | VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004u
    | VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000u
    | VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000u
    | VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000u
    | VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003u
    | VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004u
    | VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000u
    | VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001u
    | VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002u
    | VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003u
    | VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004u
    | VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000u
    | VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001u
    | VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003u
    | VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000u
    | VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001u
    | VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003u
    | VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004u
    | VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002u
    | VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003u
    | VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000u
    | VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001u
    | VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002u
    | VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003u
    | VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004u
    | VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001u
    | VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002u
    | VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000u
    | VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002u
    | VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005u
    | VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001u
    | VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000u
    | VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002u
    | VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003u
    | VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004u
    | VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005u
    | VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000u
    | VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005u
    | VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000u
    | VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001u
    | VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003u
    | VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004u
    | VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005u
    | VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006u
    | VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007u
    | VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009u
    | VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011u
    | VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000u
    | VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000u
    | VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001u
    | VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000u
    | VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000u
    | VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000u
    | VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000u
    | VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000u
    | VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000u
    | VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002u
    | VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000u
    | VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000u
    | VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000u
    | VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002u
    | VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000u
    | VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000u
    | VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000u
    | VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001u
    | VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002u
    | VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003u
    | VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004u
    | VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000u
    | VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000u
    | VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001u
    | VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000u
    | VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001u
    | VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000u
    | VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000u
    | VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001u
    | VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000u
    | VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001u
    | VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002u
    | VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000u
    | VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000u
    | VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000u
    | VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001u
    | VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000u
    | VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000u
    | VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001u
    | VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002u
    | VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000u
    | VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000u
    | VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004u
    | VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001u
    | VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013u
    | VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001u
    | VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002u
    | VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000u
    /// Backwards-compatible alias containing a typo
    | VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001u
    | VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003u
    | VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005u
    | VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000u
    | VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002u
    | VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000u
    | VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003u
    | VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001u
    | VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000u
    | VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001u
    | VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001u
    | VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002u
    | VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003u
    | VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001u
    | VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003u
    | VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002u
    | VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002u
    | VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000u
    | VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001u
    | VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000u
    | VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000u
    | VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000u
    | VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003u
    | VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005u
    | VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001u
    | VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005u
    | VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001u
    | VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007u
    | VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004u
    /// Backwards-compatible alias containing a typo
    | VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000u

type VkSubpassContents =
    | VK_SUBPASS_CONTENTS_INLINE = 0u
    | VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1u

/// API result codes
type VkResult =
    /// Command completed successfully
    | VK_SUCCESS = 0u
    /// A fence or query has not yet completed
    | VK_NOT_READY = 1u
    /// A wait operation has not completed in the specified time
    | VK_TIMEOUT = 2u
    /// An event is signaled
    | VK_EVENT_SET = 3u
    /// An event is unsignaled
    | VK_EVENT_RESET = 4u
    /// A return array was too small for the result
    | VK_INCOMPLETE = 5u
    | VK_SUBOPTIMAL_KHR = 1000001003u
    | VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = 3294712296u
    | VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = 3294723296u
    | VK_ERROR_NOT_PERMITTED_EXT = 3294793295u
    | VK_ERROR_FRAGMENTATION_EXT = 3294806296u
    | VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = 3294809296u
    | VK_ERROR_INVALID_EXTERNAL_HANDLE = 3294895293u
    | VK_ERROR_OUT_OF_POOL_MEMORY = 3294898296u
    | VK_ERROR_INVALID_SHADER_NV = 3294955296u
    | VK_ERROR_VALIDATION_FAILED_EXT = 3294956295u
    | VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = 3294964295u
    | VK_ERROR_OUT_OF_DATE_KHR = 3294966292u
    | VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = 3294967295u
    | VK_ERROR_SURFACE_LOST_KHR = 3294967296u
    /// A requested pool allocation has failed due to fragmentation of the pool's memory
    | VK_ERROR_FRAGMENTED_POOL = 4294967284u
    /// Requested format is not supported on this device
    | VK_ERROR_FORMAT_NOT_SUPPORTED = 4294967285u
    /// Too many objects of the type have already been created
    | VK_ERROR_TOO_MANY_OBJECTS = 4294967286u
    /// Unable to find a Vulkan driver
    | VK_ERROR_INCOMPATIBLE_DRIVER = 4294967287u
    /// Requested feature is not available on this device
    | VK_ERROR_FEATURE_NOT_PRESENT = 4294967288u
    /// Extension specified does not exist
    | VK_ERROR_EXTENSION_NOT_PRESENT = 4294967289u
    /// Layer specified does not exist
    | VK_ERROR_LAYER_NOT_PRESENT = 4294967290u
    /// Mapping of a memory object has failed
    | VK_ERROR_MEMORY_MAP_FAILED = 4294967291u
    /// The logical device has been lost. See <<devsandqueues-lost-device>>
    | VK_ERROR_DEVICE_LOST = 4294967292u
    /// Initialization of a object has failed
    | VK_ERROR_INITIALIZATION_FAILED = 4294967293u
    /// A device memory allocation has failed
    | VK_ERROR_OUT_OF_DEVICE_MEMORY = 4294967294u
    /// A host memory allocation has failed
    | VK_ERROR_OUT_OF_HOST_MEMORY = 4294967295u
    | VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = 3294895293u
    | VK_ERROR_OUT_OF_POOL_MEMORY_KHR = 3294898296u

type VkDynamicState =
    | VK_DYNAMIC_STATE_VIEWPORT = 0u
    | VK_DYNAMIC_STATE_SCISSOR = 1u
    | VK_DYNAMIC_STATE_LINE_WIDTH = 2u
    | VK_DYNAMIC_STATE_DEPTH_BIAS = 3u
    | VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4u
    | VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5u
    | VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6u
    | VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7u
    | VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8u
    | VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000u
    | VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000u
    | VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000u
    | VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004u
    | VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006u
    | VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001u
    | VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000u

type VkDescriptorUpdateTemplateType =
    /// Create descriptor update template for descriptor set updates
    | VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0u
    /// Create descriptor update template for pushed descriptor updates
    | VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1u
    | VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0u

/// Enums to track objects of various types
type VkObjectType =
    | VK_OBJECT_TYPE_UNKNOWN = 0u
    /// VkInstance
    | VK_OBJECT_TYPE_INSTANCE = 1u
    /// VkPhysicalDevice
    | VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2u
    /// VkDevice
    | VK_OBJECT_TYPE_DEVICE = 3u
    /// VkQueue
    | VK_OBJECT_TYPE_QUEUE = 4u
    /// VkSemaphore
    | VK_OBJECT_TYPE_SEMAPHORE = 5u
    /// VkCommandBuffer
    | VK_OBJECT_TYPE_COMMAND_BUFFER = 6u
    /// VkFence
    | VK_OBJECT_TYPE_FENCE = 7u
    /// VkDeviceMemory
    | VK_OBJECT_TYPE_DEVICE_MEMORY = 8u
    /// VkBuffer
    | VK_OBJECT_TYPE_BUFFER = 9u
    /// VkImage
    | VK_OBJECT_TYPE_IMAGE = 10u
    /// VkEvent
    | VK_OBJECT_TYPE_EVENT = 11u
    /// VkQueryPool
    | VK_OBJECT_TYPE_QUERY_POOL = 12u
    /// VkBufferView
    | VK_OBJECT_TYPE_BUFFER_VIEW = 13u
    /// VkImageView
    | VK_OBJECT_TYPE_IMAGE_VIEW = 14u
    /// VkShaderModule
    | VK_OBJECT_TYPE_SHADER_MODULE = 15u
    /// VkPipelineCache
    | VK_OBJECT_TYPE_PIPELINE_CACHE = 16u
    /// VkPipelineLayout
    | VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17u
    /// VkRenderPass
    | VK_OBJECT_TYPE_RENDER_PASS = 18u
    /// VkPipeline
    | VK_OBJECT_TYPE_PIPELINE = 19u
    /// VkDescriptorSetLayout
    | VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20u
    /// VkSampler
    | VK_OBJECT_TYPE_SAMPLER = 21u
    /// VkDescriptorPool
    | VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22u
    /// VkDescriptorSet
    | VK_OBJECT_TYPE_DESCRIPTOR_SET = 23u
    /// VkFramebuffer
    | VK_OBJECT_TYPE_FRAMEBUFFER = 24u
    /// VkCommandPool
    | VK_OBJECT_TYPE_COMMAND_POOL = 25u
    /// VkSurfaceKHR
    | VK_OBJECT_TYPE_SURFACE_KHR = 1000000000u
    /// VkSwapchainKHR
    | VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000u
    /// VkDisplayKHR
    | VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000u
    /// VkDisplayModeKHR
    | VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001u
    /// VkDebugReportCallbackEXT
    | VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000u
    | VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000u
    /// VkobjectTableNVX
    | VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000u
    /// VkIndirectCommandsLayoutNVX
    | VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001u
    /// VkDebugUtilsMessengerEXT
    | VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000u
    | VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000u
    /// VkValidationCacheEXT
    | VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000u
    | VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000u
    | VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000u
    | VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000u
    | VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000u

type VkQueueFlagBits =
    /// Queue supports graphics operations
    | VK_QUEUE_GRAPHICS_BIT = 1u
    /// Queue supports compute operations
    | VK_QUEUE_COMPUTE_BIT = 2u
    /// Queue supports transfer operations
    | VK_QUEUE_TRANSFER_BIT = 4u
    /// Queue supports sparse resource memory management operations
    | VK_QUEUE_SPARSE_BINDING_BIT = 8u
    /// Queues may support protected operations
    | VK_QUEUE_PROTECTED_BIT = 16u
    | VK_QUEUE_RESERVED_5_BIT_KHR = 32u
    | VK_QUEUE_RESERVED_6_BIT_KHR = 64u

type VkRenderPassCreateFlagBits =
    | VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR = 1u
    | VK_RENDER_PASS_RESERVED_BIT_1_QCOM = 2u

type VkDeviceQueueCreateFlagBits =
    /// Queue is a protected-capable device queue
    | VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1u

type VkMemoryPropertyFlagBits =
    /// If otherwise stated, then allocate memory on device
    | VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1u
    /// Memory is mappable by host
    | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2u
    /// Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
    | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4u
    /// Memory will be cached by the host
    | VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8u
    /// Memory may be allocated by the driver when it is required
    | VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16u
    /// Memory is protected
    | VK_MEMORY_PROPERTY_PROTECTED_BIT = 32u
    | VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64u
    | VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128u

type VkMemoryHeapFlagBits =
    /// If set, heap represents device memory
    | VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1u
    /// If set, heap allocations allocate multiple instances by default
    | VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2u
    | VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2u

type VkAccessFlagBits =
    /// Controls coherency of indirect command reads
    | VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1u
    /// Controls coherency of index reads
    | VK_ACCESS_INDEX_READ_BIT = 2u
    /// Controls coherency of vertex attribute reads
    | VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4u
    /// Controls coherency of uniform buffer reads
    | VK_ACCESS_UNIFORM_READ_BIT = 8u
    /// Controls coherency of input attachment reads
    | VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16u
    /// Controls coherency of shader reads
    | VK_ACCESS_SHADER_READ_BIT = 32u
    /// Controls coherency of shader writes
    | VK_ACCESS_SHADER_WRITE_BIT = 64u
    /// Controls coherency of color attachment reads
    | VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128u
    /// Controls coherency of color attachment writes
    | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256u
    /// Controls coherency of depth/stencil attachment reads
    | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512u
    /// Controls coherency of depth/stencil attachment writes
    | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024u
    /// Controls coherency of transfer reads
    | VK_ACCESS_TRANSFER_READ_BIT = 2048u
    /// Controls coherency of transfer writes
    | VK_ACCESS_TRANSFER_WRITE_BIT = 4096u
    /// Controls coherency of host reads
    | VK_ACCESS_HOST_READ_BIT = 8192u
    /// Controls coherency of host writes
    | VK_ACCESS_HOST_WRITE_BIT = 16384u
    /// Controls coherency of memory reads
    | VK_ACCESS_MEMORY_READ_BIT = 32768u
    /// Controls coherency of memory writes
    | VK_ACCESS_MEMORY_WRITE_BIT = 65536u
    | VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 131072u
    | VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 262144u
    | VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288u
    /// read access flag for reading conditional rendering predicate
    | VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576u
    | VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152u
    | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304u
    | VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608u
    | VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216u
    | VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432u
    | VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864u
    | VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728u
    | VK_ACCESS_RESERVED_28_BIT_KHR = 268435456u
    | VK_ACCESS_RESERVED_29_BIT_KHR = 536870912u
    | VK_ACCESS_RESERVED_30_BIT_KHR = 1073741824u
    | VK_ACCESS_RESERVED_31_BIT_KHR = 2147483648u

type VkBufferUsageFlagBits =
    /// Can be used as a source of transfer operations
    | VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1u
    /// Can be used as a destination of transfer operations
    | VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2u
    /// Can be used as TBO
    | VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4u
    /// Can be used as IBO
    | VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8u
    /// Can be used as UBO
    | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16u
    /// Can be used as SSBO
    | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32u
    /// Can be used as source of fixed-function index fetch (index buffer)
    | VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64u
    /// Can be used as source of fixed-function vertex fetch (VBO)
    | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128u
    /// Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
    | VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256u
    /// Specifies the buffer can be used as predicate in conditional rendering
    | VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512u
    | VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024u
    | VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048u
    | VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096u
    | VK_BUFFER_USAGE_RESERVED_13_BIT_KHR = 8192u
    | VK_BUFFER_USAGE_RESERVED_14_BIT_KHR = 16384u
    | VK_BUFFER_USAGE_RESERVED_15_BIT_KHR = 32768u
    | VK_BUFFER_USAGE_RESERVED_16_BIT_KHR = 65536u
    | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072u

type VkBufferCreateFlagBits =
    /// Buffer should support sparse backing
    | VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1u
    /// Buffer should support sparse backing with partial residency
    | VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2u
    /// Buffer should support constent data access to physical memory ranges mapped into multiple locations of sparse buffers
    | VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4u
    /// Buffer requires protected memory
    | VK_BUFFER_CREATE_PROTECTED_BIT = 8u
    | VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16u

type VkShaderStageFlagBits =
    | VK_SHADER_STAGE_VERTEX_BIT = 1u
    | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2u
    | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4u
    | VK_SHADER_STAGE_GEOMETRY_BIT = 8u
    | VK_SHADER_STAGE_FRAGMENT_BIT = 16u
    | VK_SHADER_STAGE_ALL_GRAPHICS = 31u
    | VK_SHADER_STAGE_COMPUTE_BIT = 32u
    | VK_SHADER_STAGE_TASK_BIT_NV = 64u
    | VK_SHADER_STAGE_MESH_BIT_NV = 128u
    | VK_SHADER_STAGE_RAYGEN_BIT_NV = 256u
    | VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512u
    | VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024u
    | VK_SHADER_STAGE_MISS_BIT_NV = 2048u
    | VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096u
    | VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192u
    | VK_SHADER_STAGE_ALL = 2147483647u

type VkImageUsageFlagBits =
    /// Can be used as a source of transfer operations
    | VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1u
    /// Can be used as a destination of transfer operations
    | VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2u
    /// Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | VK_IMAGE_USAGE_SAMPLED_BIT = 4u
    /// Can be used as storage image (STORAGE_IMAGE descriptor type)
    | VK_IMAGE_USAGE_STORAGE_BIT = 8u
    /// Can be used as framebuffer color attachment
    | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16u
    /// Can be used as framebuffer depth/stencil attachment
    | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32u
    /// Image data not needed outside of rendering
    | VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64u
    /// Can be used as framebuffer input attachment
    | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128u
    | VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256u
    | VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512u
    | VK_IMAGE_USAGE_RESERVED_10_BIT_KHR = 1024u
    | VK_IMAGE_USAGE_RESERVED_11_BIT_KHR = 2048u
    | VK_IMAGE_USAGE_RESERVED_12_BIT_KHR = 4096u
    | VK_IMAGE_USAGE_RESERVED_13_BIT_KHR = 8192u
    | VK_IMAGE_USAGE_RESERVED_14_BIT_KHR = 16384u
    | VK_IMAGE_USAGE_RESERVED_15_BIT_KHR = 32768u

type VkImageCreateFlagBits =
    /// Image should support sparse backing
    | VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1u
    /// Image should support sparse backing with partial residency
    | VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2u
    /// Image should support constent data access to physical memory ranges mapped into multiple locations of sparse images
    | VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4u
    /// Allows image views to have different format than the base image
    | VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8u
    /// Allows creating image views with cube type from the created image
    | VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16u
    /// The 3D image can be viewed as a 2D or 2D array image
    | VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32u
    /// Allows using VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions when binding memory to the image
    | VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64u
    | VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128u
    | VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256u
    | VK_IMAGE_CREATE_DISJOINT_BIT = 512u
    | VK_IMAGE_CREATE_ALIAS_BIT = 1024u
    /// Image requires protected memory
    | VK_IMAGE_CREATE_PROTECTED_BIT = 2048u
    | VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096u
    | VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192u
    | VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384u
    | VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32u
    | VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024u
    | VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128u
    | VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512u
    | VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256u
    | VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64u

type VkImageViewCreateFlagBits =
    | VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1u

type VkSamplerCreateFlagBits =
    | VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1u
    | VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2u

type VkPipelineCreateFlagBits =
    | VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1u
    | VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2u
    | VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4u
    | VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8u
    | VK_PIPELINE_CREATE_DISPATCH_BASE = 16u
    | VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32u
    | VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64u
    | VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128u
    | VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16u
    | VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8u

type VkPipelineShaderStageCreateFlagBits =
    | VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1u
    | VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2u
    | VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV = 4u

type VkColorComponentFlagBits =
    | VK_COLOR_COMPONENT_R_BIT = 1u
    | VK_COLOR_COMPONENT_G_BIT = 2u
    | VK_COLOR_COMPONENT_B_BIT = 4u
    | VK_COLOR_COMPONENT_A_BIT = 8u

type VkFenceCreateFlagBits =
    | VK_FENCE_CREATE_SIGNALED_BIT = 1u

type VkFormatFeatureFlagBits =
    /// Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1u
    /// Format can be used for storage images (STORAGE_IMAGE descriptor type)
    | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2u
    /// Format supports atomic operations in case it is used for storage images
    | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4u
    /// Format can be used for uniform texel buffers (TBOs)
    | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8u
    /// Format can be used for storage texel buffers (IBOs)
    | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16u
    /// Format supports atomic operations in case it is used for storage texel buffers
    | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32u
    /// Format can be used for vertex buffers (VBOs)
    | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64u
    /// Format can be used for color attachment images
    | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128u
    /// Format supports blending in case it is used for color attachment images
    | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256u
    /// Format can be used for depth/stencil attachment images
    | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512u
    /// Format can be used as the source image of blits with vkCmdBlitImage
    | VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024u
    /// Format can be used as the destination image of blits with vkCmdBlitImage
    | VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048u
    /// Format can be filtered with VK_FILTER_LINEAR when being sampled
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096u
    /// Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192u
    /// Format can be used as the source image of image transfer commands
    | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384u
    /// Format can be used as the destination image of image transfer commands
    | VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768u
    /// Format can be used with min/max reduction filtering
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536u
    /// Format can have midpoint rather than cosited chroma samples
    | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072u
    /// Format can be used with linear filtering whilst color conversion is enabled
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144u
    /// Format can have different chroma, min and mag filters
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152u
    /// Format supports disjoint planes
    | VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304u
    /// Format can have cosited rather than midpoint chroma samples
    | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608u
    | VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216u
    | VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR = 33554432u
    | VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR = 67108864u
    | VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR = 134217728u
    | VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR = 268435456u
    | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608u
    | VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304u
    | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144u
    | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288u
    | VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768u
    | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384u

type VkQueryControlFlagBits =
    /// Require precise results to be collected by the query
    | VK_QUERY_CONTROL_PRECISE_BIT = 1u

type VkQueryResultFlagBits =
    /// Results of the queries are written to the destination buffer as 64-bit values
    | VK_QUERY_RESULT_64_BIT = 1u
    /// Results of the queries are waited on before proceeding with the result copy
    | VK_QUERY_RESULT_WAIT_BIT = 2u
    /// Besides the results of the query, the availability of the results is also written
    | VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4u
    /// Copy the partial results of the query even if the final results are not available
    | VK_QUERY_RESULT_PARTIAL_BIT = 8u

type VkCommandBufferUsageFlagBits =
    | VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1u
    | VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2u
    /// Command buffer may be submitted/executed more than once simultaneously
    | VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4u

type VkQueryPipelineStatisticFlagBits =
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512u
    /// Optional
    | VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024u

type VkImageAspectFlagBits =
    | VK_IMAGE_ASPECT_COLOR_BIT = 1u
    | VK_IMAGE_ASPECT_DEPTH_BIT = 2u
    | VK_IMAGE_ASPECT_STENCIL_BIT = 4u
    | VK_IMAGE_ASPECT_METADATA_BIT = 8u
    | VK_IMAGE_ASPECT_PLANE_0_BIT = 16u
    | VK_IMAGE_ASPECT_PLANE_1_BIT = 32u
    | VK_IMAGE_ASPECT_PLANE_2_BIT = 64u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512u
    | VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024u
    | VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16u
    | VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32u
    | VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64u

type VkSparseImageFormatFlagBits =
    /// Image uses a single mip tail region for all array layers
    | VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1u
    /// Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
    | VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2u
    /// Image uses a non-standard sparse image block dimensions
    | VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4u

type VkSparseMemoryBindFlagBits =
    /// Operation binds resource metadata to memory
    | VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1u

type VkPipelineStageFlagBits =
    /// Before subsequent commands are processed
    | VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1u
    /// Draw/DispatchIndirect command fetch
    | VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2u
    /// Vertex/index fetch
    | VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4u
    /// Vertex shading
    | VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8u
    /// Tessellation control shading
    | VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16u
    /// Tessellation evaluation shading
    | VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32u
    /// Geometry shading
    | VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64u
    /// Fragment shading
    | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128u
    /// Early fragment (depth and stencil) tests
    | VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256u
    /// Late fragment (depth and stencil) tests
    | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512u
    /// Color attachment writes
    | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024u
    /// Compute shading
    | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048u
    /// Transfer/copy operations
    | VK_PIPELINE_STAGE_TRANSFER_BIT = 4096u
    /// After previous commands have completed
    | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192u
    /// Indicates host (CPU) is a source/sink of the dependency
    | VK_PIPELINE_STAGE_HOST_BIT = 16384u
    /// All stages of the graphics pipeline
    | VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768u
    /// All stages supported on the queue
    | VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536u
    | VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 131072u
    /// A pipeline stage for conditional rendering predicate fetch
    | VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144u
    | VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288u
    | VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576u
    | VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152u
    | VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304u
    | VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608u
    | VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216u
    | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432u
    | VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR = 67108864u
    | VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR = 134217728u

type VkCommandPoolCreateFlagBits =
    /// Command buffers have a short lifetime
    | VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1u
    /// Command buffers may release their memory individually
    | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2u
    /// Command buffers allocated from pool are protected command buffers
    | VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4u

type VkCommandPoolResetFlagBits =
    /// Release resources owned by the pool
    | VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1u

type VkCommandBufferResetFlagBits =
    /// Release resources owned by the buffer
    | VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1u

type VkSampleCountFlagBits =
    /// Sample count 1 supported
    | VK_SAMPLE_COUNT_1_BIT = 1u
    /// Sample count 2 supported
    | VK_SAMPLE_COUNT_2_BIT = 2u
    /// Sample count 4 supported
    | VK_SAMPLE_COUNT_4_BIT = 4u
    /// Sample count 8 supported
    | VK_SAMPLE_COUNT_8_BIT = 8u
    /// Sample count 16 supported
    | VK_SAMPLE_COUNT_16_BIT = 16u
    /// Sample count 32 supported
    | VK_SAMPLE_COUNT_32_BIT = 32u
    /// Sample count 64 supported
    | VK_SAMPLE_COUNT_64_BIT = 64u

type VkAttachmentDescriptionFlagBits =
    /// The attachment may alias physical memory of another attachment in the same render pass
    | VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1u

type VkStencilFaceFlagBits =
    /// Front face
    | VK_STENCIL_FACE_FRONT_BIT = 1u
    /// Back face
    | VK_STENCIL_FACE_BACK_BIT = 2u
    /// Front and back faces
    | VK_STENCIL_FACE_FRONT_AND_BACK = 3u

type VkDescriptorPoolCreateFlagBits =
    /// Descriptor sets may be freed individually
    | VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1u
    | VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2u

type VkDependencyFlagBits =
    /// Dependency is per pixel region 
    | VK_DEPENDENCY_BY_REGION_BIT = 1u
    | VK_DEPENDENCY_VIEW_LOCAL_BIT = 2u
    /// Dependency is across devices
    | VK_DEPENDENCY_DEVICE_GROUP_BIT = 4u
    | VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4u
    | VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2u

type VkPresentModeKHR =
    | VK_PRESENT_MODE_IMMEDIATE_KHR = 0u
    | VK_PRESENT_MODE_MAILBOX_KHR = 1u
    | VK_PRESENT_MODE_FIFO_KHR = 2u
    | VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3u
    | VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000u
    | VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001u

type VkColorSpaceKHR =
    | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0u
    | VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001u
    | VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002u
    | VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003u
    | VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004u
    | VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005u
    | VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006u
    | VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007u
    | VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008u
    | VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009u
    | VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010u
    | VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011u
    | VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012u
    | VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013u
    | VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014u
    | VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000u
    /// Deprecated name for backwards compatibility
    | VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003u

type VkDisplayPlaneAlphaFlagBitsKHR =
    | VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1u
    | VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2u
    | VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4u
    | VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8u

type VkCompositeAlphaFlagBitsKHR =
    | VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1u
    | VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2u
    | VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4u
    | VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8u

type VkSurfaceTransformFlagBitsKHR =
    | VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1u
    | VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2u
    | VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4u
    | VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64u
    | VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128u
    | VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256u

type VkSwapchainImageUsageFlagBitsANDROID =
    | VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID = 1u

type VkTimeDomainEXT =
    | VK_TIME_DOMAIN_DEVICE_EXT = 0u
    | VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1u
    | VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2u
    | VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3u

type VkDebugReportFlagBitsEXT =
    | VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1u
    | VK_DEBUG_REPORT_WARNING_BIT_EXT = 2u
    | VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4u
    | VK_DEBUG_REPORT_ERROR_BIT_EXT = 8u
    | VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16u

type VkDebugReportObjectTypeEXT =
    | VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0u
    | VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3u
    | VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5u
    | VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6u
    | VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8u
    | VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9u
    | VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10u
    | VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11u
    | VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12u
    | VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13u
    | VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17u
    | VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18u
    | VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23u
    | VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24u
    | VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30u
    | VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31u
    | VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32u
    | VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000011000u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000u
    | VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000u
    | VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000011000u
    | VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000011000u

type VkRasterizationOrderAMD =
    | VK_RASTERIZATION_ORDER_STRICT_AMD = 0u
    | VK_RASTERIZATION_ORDER_RELAXED_AMD = 1u

type VkExternalMemoryHandleTypeFlagBitsNV =
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8u

type VkExternalMemoryFeatureFlagBitsNV =
    | VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1u
    | VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2u
    | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4u

type VkValidationCheckEXT =
    | VK_VALIDATION_CHECK_ALL_EXT = 0u
    | VK_VALIDATION_CHECK_SHADERS_EXT = 1u

type VkValidationFeatureEnableEXT =
    | VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0u
    | VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1u
    | VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2u

type VkValidationFeatureDisableEXT =
    | VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0u
    | VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1u
    | VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2u
    | VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3u
    | VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4u
    | VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5u
    | VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6u

type VkSubgroupFeatureFlagBits =
    /// Basic subgroup operations
    | VK_SUBGROUP_FEATURE_BASIC_BIT = 1u
    /// Vote subgroup operations
    | VK_SUBGROUP_FEATURE_VOTE_BIT = 2u
    /// Arithmetic subgroup operations
    | VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4u
    /// Ballot subgroup operations
    | VK_SUBGROUP_FEATURE_BALLOT_BIT = 8u
    /// Shuffle subgroup operations
    | VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16u
    /// Shuffle relative subgroup operations
    | VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32u
    /// Clustered subgroup operations
    | VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64u
    /// Quad subgroup operations
    | VK_SUBGROUP_FEATURE_QUAD_BIT = 128u
    | VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256u

type VkIndirectCommandsLayoutUsageFlagBitsNVX =
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 1u
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 2u
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 4u
    | VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 8u

type VkObjectEntryUsageFlagBitsNVX =
    | VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 1u
    | VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 2u

type VkIndirectCommandsTokenTypeNVX =
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = 0u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = 1u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = 2u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = 3u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = 4u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = 5u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = 6u
    | VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = 7u

type VkObjectEntryTypeNVX =
    | VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = 0u
    | VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = 1u
    | VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = 2u
    | VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = 3u
    | VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = 4u

type VkDescriptorSetLayoutCreateFlagBits =
    /// Descriptors are pushed via flink:vkCmdPushDescriptorSetKHR
    | VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1u
    | VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2u

type VkExternalMemoryHandleTypeFlagBits =
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2u
    | VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4u

type VkExternalMemoryFeatureFlagBits =
    | VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1u
    | VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2u
    | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4u
    | VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1u
    | VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2u
    | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4u

type VkExternalSemaphoreHandleTypeFlagBits =
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4u
    | VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16u

type VkExternalSemaphoreFeatureFlagBits =
    | VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1u
    | VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2u
    | VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1u
    | VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2u

type VkSemaphoreImportFlagBits =
    | VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1u
    | VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1u

type VkExternalFenceHandleTypeFlagBits =
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4u
    | VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8u

type VkExternalFenceFeatureFlagBits =
    | VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1u
    | VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2u
    | VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1u
    | VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2u

type VkFenceImportFlagBits =
    | VK_FENCE_IMPORT_TEMPORARY_BIT = 1u
    | VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1u

type VkSurfaceCounterFlagBitsEXT =
    | VK_SURFACE_COUNTER_VBLANK_EXT = 1u

type VkDisplayPowerStateEXT =
    | VK_DISPLAY_POWER_STATE_OFF_EXT = 0u
    | VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1u
    | VK_DISPLAY_POWER_STATE_ON_EXT = 2u

type VkDeviceEventTypeEXT =
    | VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0u

type VkDisplayEventTypeEXT =
    | VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0u

type VkPeerMemoryFeatureFlagBits =
    /// Can read with vkCmdCopy commands
    | VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1u
    /// Can write with vkCmdCopy commands
    | VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2u
    /// Can read with any access type/command
    | VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4u
    /// Can write with and access type/command
    | VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8u
    | VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2u
    | VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1u
    | VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8u
    | VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4u

type VkMemoryAllocateFlagBits =
    /// Force allocation on specific devices
    | VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1u
    | VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1u

type VkDeviceGroupPresentModeFlagBitsKHR =
    /// Present from local memory
    | VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1u
    /// Present from remote memory
    | VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2u
    /// Present sum of local and/or remote memory
    | VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4u
    /// Each physical device presents from local memory
    | VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8u

type VkSwapchainCreateFlagBitsKHR =
    /// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
    | VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1u
    /// Swapchain is protected
    | VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2u
    | VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4u

type VkViewportCoordinateSwizzleNV =
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6u
    | VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7u

type VkDiscardRectangleModeEXT =
    | VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0u
    | VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1u

type VkSubpassDescriptionFlagBits =
    | VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1u
    | VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2u
    | VK_SUBPASS_DESCRIPTION_RESERVED_2_BIT_QCOM = 4u
    | VK_SUBPASS_DESCRIPTION_RESERVED_3_BIT_QCOM = 8u

type VkPointClippingBehavior =
    | VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0u
    | VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1u
    | VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0u
    | VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1u

type VkSamplerReductionModeEXT =
    | VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0u
    | VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1u
    | VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2u

type VkTessellationDomainOrigin =
    | VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0u
    | VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1u
    | VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1u
    | VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0u

type VkSamplerYcbcrModelConversion =
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0u
    /// just range expansion
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1u
    /// aka HD YUV
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2u
    /// aka SD YUV
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3u
    /// aka UHD YUV
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4u
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0u
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4u
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3u
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2u
    | VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1u

type VkSamplerYcbcrRange =
    /// Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
    | VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0u
    /// Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240
    | VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1u
    | VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0u
    | VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1u

type VkChromaLocation =
    | VK_CHROMA_LOCATION_COSITED_EVEN = 0u
    | VK_CHROMA_LOCATION_MIDPOINT = 1u
    | VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0u
    | VK_CHROMA_LOCATION_MIDPOINT_KHR = 1u

type VkBlendOverlapEXT =
    | VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0u
    | VK_BLEND_OVERLAP_DISJOINT_EXT = 1u
    | VK_BLEND_OVERLAP_CONJOINT_EXT = 2u

type VkCoverageModulationModeNV =
    | VK_COVERAGE_MODULATION_MODE_NONE_NV = 0u
    | VK_COVERAGE_MODULATION_MODE_RGB_NV = 1u
    | VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2u
    | VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3u

type VkCoverageReductionModeNV =
    | VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0u
    | VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1u

type VkValidationCacheHeaderVersionEXT =
    | VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1u

type VkShaderInfoTypeAMD =
    | VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0u
    | VK_SHADER_INFO_TYPE_BINARY_AMD = 1u
    | VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2u

type VkQueueGlobalPriorityEXT =
    | VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128u
    | VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256u
    | VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512u
    | VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024u

type VkDebugUtilsMessageSeverityFlagBitsEXT =
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1u
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16u
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256u
    | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096u

type VkDebugUtilsMessageTypeFlagBitsEXT =
    | VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1u
    | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2u
    | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4u

type VkConservativeRasterizationModeEXT =
    | VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0u
    | VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1u
    | VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2u

type VkDescriptorBindingFlagBitsEXT =
    | VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1u
    | VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2u
    | VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4u
    | VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8u

type VkVendorId =
    /// Vivante vendor ID
    | VK_VENDOR_ID_VIV = 65537u
    /// VeriSilicon vendor ID
    | VK_VENDOR_ID_VSI = 65538u
    /// Kazan Software Renderer
    | VK_VENDOR_ID_KAZAN = 65539u

type VkDriverIdKHR =
    /// Advanced Micro Devices, Inc.
    | VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1u
    /// Advanced Micro Devices, Inc.
    | VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2u
    /// Mesa open source project
    | VK_DRIVER_ID_MESA_RADV_KHR = 3u
    /// NVIDIA Corporation
    | VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4u
    /// Intel Corporation
    | VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5u
    /// Intel Corporation
    | VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6u
    /// Imagination Technologies
    | VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7u
    /// Qualcomm Technologies, Inc.
    | VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8u
    /// Arm Limited
    | VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9u
    /// Google LLC
    | VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10u
    /// Google LLC
    | VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11u
    /// Broadcom Inc.
    | VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12u

type VkConditionalRenderingFlagBitsEXT =
    | VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1u

type VkResolveModeFlagBitsKHR =
    | VK_RESOLVE_MODE_NONE_KHR = 0u
    | VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1u
    | VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2u
    | VK_RESOLVE_MODE_MIN_BIT_KHR = 4u
    | VK_RESOLVE_MODE_MAX_BIT_KHR = 8u

type VkShadingRatePaletteEntryNV =
    | VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0u
    | VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1u
    | VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2u
    | VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3u
    | VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10u
    | VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11u

type VkCoarseSampleOrderTypeNV =
    | VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0u
    | VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1u
    | VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2u
    | VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3u

type VkGeometryInstanceFlagBitsNV =
    | VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1u
    | VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2u
    | VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4u
    | VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8u

type VkGeometryFlagBitsNV =
    | VK_GEOMETRY_OPAQUE_BIT_NV = 1u
    | VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2u

type VkBuildAccelerationStructureFlagBitsNV =
    | VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1u
    | VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2u
    | VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4u
    | VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8u
    | VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16u

type VkCopyAccelerationStructureModeNV =
    | VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0u
    | VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1u

type VkAccelerationStructureTypeNV =
    | VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0u
    | VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1u

type VkGeometryTypeNV =
    | VK_GEOMETRY_TYPE_TRIANGLES_NV = 0u
    | VK_GEOMETRY_TYPE_AABBS_NV = 1u

type VkAccelerationStructureMemoryRequirementsTypeNV =
    | VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0u
    | VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1u
    | VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2u

type VkRayTracingShaderGroupTypeNV =
    | VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0u
    | VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1u
    | VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2u

type VkMemoryOverallocationBehaviorAMD =
    | VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0u
    | VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1u
    | VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2u

type VkFramebufferCreateFlagBits =
    | VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1u

type VkScopeNV =
    | VK_SCOPE_DEVICE_NV = 1u
    | VK_SCOPE_WORKGROUP_NV = 2u
    | VK_SCOPE_SUBGROUP_NV = 3u
    | VK_SCOPE_QUEUE_FAMILY_NV = 5u

type VkComponentTypeNV =
    | VK_COMPONENT_TYPE_FLOAT16_NV = 0u
    | VK_COMPONENT_TYPE_FLOAT32_NV = 1u
    | VK_COMPONENT_TYPE_FLOAT64_NV = 2u
    | VK_COMPONENT_TYPE_SINT8_NV = 3u
    | VK_COMPONENT_TYPE_SINT16_NV = 4u
    | VK_COMPONENT_TYPE_SINT32_NV = 5u
    | VK_COMPONENT_TYPE_SINT64_NV = 6u
    | VK_COMPONENT_TYPE_UINT8_NV = 7u
    | VK_COMPONENT_TYPE_UINT16_NV = 8u
    | VK_COMPONENT_TYPE_UINT32_NV = 9u
    | VK_COMPONENT_TYPE_UINT64_NV = 10u

type VkPipelineCreationFeedbackFlagBitsEXT =
    | VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1u
    | VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2u
    | VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4u

type VkFullScreenExclusiveEXT =
    | VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0u
    | VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1u
    | VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2u
    | VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3u

type VkPerformanceConfigurationTypeINTEL =
    | VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0u

type VkQueryPoolSamplingModeINTEL =
    | VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0u

type VkPerformanceOverrideTypeINTEL =
    | VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0u
    | VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1u

type VkPerformanceParameterTypeINTEL =
    | VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0u
    | VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1u

type VkPerformanceValueTypeINTEL =
    | VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0u
    | VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1u
    | VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2u
    | VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3u
    | VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4u

type VkPipelineExecutableStatisticFormatKHR =
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0u
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1u
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2u
    | VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3u

type VkShaderFloatControlsIndependenceKHR =
    | VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0u
    | VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1u
    | VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2u

type VkLineRasterizationModeEXT =
    | VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0u
    | VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1u
    | VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2u
    | VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3u

type VkShaderModuleCreateFlagBits =
    | VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV = 1u

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceCoherentMemoryFeaturesAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable deviceCoherentMemory: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineCompilerControlCreateInfoAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable compilerControlFlags: VkPipelineCompilerControlFlagsAMD

[<Struct;NoEquality;NoComparison>]
type VkPipelineRasterizationLineStateCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable lineRasterizationMode: VkLineRasterizationModeEXT
    [<DefaultValue(false)>]
    val mutable stippledLineEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable lineStippleFactor: uint32
    [<DefaultValue(false)>]
    val mutable lineStipplePattern: uint16

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceLineRasterizationPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable lineSubPixelPrecisionBits: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceLineRasterizationFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable rectangularLines: VkBool32
    [<DefaultValue(false)>]
    val mutable bresenhamLines: VkBool32
    [<DefaultValue(false)>]
    val mutable smoothLines: VkBool32
    [<DefaultValue(false)>]
    val mutable stippledRectangularLines: VkBool32
    [<DefaultValue(false)>]
    val mutable stippledBresenhamLines: VkBool32
    [<DefaultValue(false)>]
    val mutable stippledSmoothLines: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable requiredSubgroupSize: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// The minimum subgroup size supported by this device
    [<DefaultValue(false)>]
    val mutable minSubgroupSize: uint32
    /// The maximum subgroup size supported by this device
    [<DefaultValue(false)>]
    val mutable maxSubgroupSize: uint32
    /// The maximum number of subgroups supported in a workgroup
    [<DefaultValue(false)>]
    val mutable maxComputeWorkgroupSubgroups: uint32
    /// The shader stages that support specifying a subgroup size
    [<DefaultValue(false)>]
    val mutable requiredSubgroupSizeStages: VkShaderStageFlags

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable subgroupSizeControl: VkBool32
    [<DefaultValue(false)>]
    val mutable computeFullSubgroups: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable storageTexelBufferOffsetAlignmentBytes: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable storageTexelBufferOffsetSingleTexelAlignment: VkBool32
    [<DefaultValue(false)>]
    val mutable uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable uniformTexelBufferOffsetSingleTexelAlignment: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable texelBufferAlignment: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderDemoteToHelperInvocation: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineExecutableInternalRepresentationKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable name: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable description: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    val mutable isText: VkBool32
    [<DefaultValue(false)>]
    val mutable dataSize: unativeint
    [<DefaultValue(false)>]
    val mutable pData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkPipelineExecutableStatisticKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable name: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable description: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    val mutable format: VkPipelineExecutableStatisticFormatKHR
    [<DefaultValue(false)>]
    val mutable value: VkPipelineExecutableStatisticValueKHR

[<Struct;StructLayout(LayoutKind.Explicit);NoEquality;NoComparison>]
type VkPipelineExecutableStatisticValueKHR =
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable b32: VkBool32
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable i64: int64
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable u64: uint64
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable f64: float

[<Struct;NoEquality;NoComparison>]
type VkPipelineExecutableInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pipeline: VkPipeline
    [<DefaultValue(false)>]
    val mutable executableIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkPipelineExecutablePropertiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable stages: VkShaderStageFlags
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable name: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable description: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    val mutable subgroupSize: uint32

[<Struct;NoEquality;NoComparison>]
type VkPipelineInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pipeline: VkPipeline

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pipelineExecutableInfo: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    /// Pointer to next structure
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fragmentShaderSampleInterlock: VkBool32
    [<DefaultValue(false)>]
    val mutable fragmentShaderPixelInterlock: VkBool32
    [<DefaultValue(false)>]
    val mutable fragmentShaderShadingRateInterlock: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderSMBuiltinsFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderSMBuiltins: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderSMBuiltinsPropertiesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderSMCount: uint32
    [<DefaultValue(false)>]
    val mutable shaderWarpsPerSM: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceIndexTypeUint8FeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable indexTypeUint8: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPerformanceConfigurationAcquireInfoINTEL =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable typ: VkPerformanceConfigurationTypeINTEL

[<Struct;NoEquality;NoComparison>]
type VkPerformanceOverrideInfoINTEL =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable typ: VkPerformanceOverrideTypeINTEL
    [<DefaultValue(false)>]
    val mutable enable: VkBool32
    [<DefaultValue(false)>]
    val mutable parameter: uint64

[<Struct;NoEquality;NoComparison>]
type VkPerformanceStreamMarkerInfoINTEL =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable marker: uint32

[<Struct;NoEquality;NoComparison>]
type VkPerformanceMarkerInfoINTEL =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable marker: uint64

[<Struct;NoEquality;NoComparison>]
type VkQueryPoolCreateInfoINTEL =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable performanceCountersSampling: VkQueryPoolSamplingModeINTEL

[<Struct;NoEquality;NoComparison>]
type VkInitializePerformanceApiInfoINTEL =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pUserData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkPerformanceValueINTEL =
    [<DefaultValue(false)>]
    val mutable typ: VkPerformanceValueTypeINTEL
    [<DefaultValue(false)>]
    val mutable data: VkPerformanceValueDataINTEL

[<Struct;StructLayout(LayoutKind.Explicit);NoEquality;NoComparison>]
type VkPerformanceValueDataINTEL =
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable value32: uint32
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable value64: uint64
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable valueFloat: float32
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable valueBool: VkBool32
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable valueString: byte

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderIntegerFunctions2: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkFramebufferMixedSamplesCombinationNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable coverageReductionMode: VkCoverageReductionModeNV
    [<DefaultValue(false)>]
    val mutable rasterizationSamples: VkSampleCountFlagBits
    [<DefaultValue(false)>]
    val mutable depthStencilSamples: VkSampleCountFlags
    [<DefaultValue(false)>]
    val mutable colorSamples: VkSampleCountFlags

[<Struct;NoEquality;NoComparison>]
type VkPipelineCoverageReductionStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCoverageReductionStateCreateFlagsNV
    [<DefaultValue(false)>]
    val mutable coverageReductionMode: VkCoverageReductionModeNV

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceCoverageReductionModeFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable coverageReductionMode: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkHeadlessSurfaceCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkHeadlessSurfaceCreateFlagsEXT

[<Struct;NoEquality;NoComparison>]
type VkSurfaceCapabilitiesFullScreenExclusiveEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fullScreenExclusiveSupported: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkSurfaceFullScreenExclusiveWin32InfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable hmonitor: HMONITOR

[<Struct;NoEquality;NoComparison>]
type VkSurfaceFullScreenExclusiveInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fullScreenExclusive: VkFullScreenExclusiveEXT

[<Struct;NoEquality;NoComparison>]
type VkPipelineCreationFeedbackCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Output pipeline creation feedback.
    [<DefaultValue(false)>]
    val mutable pPipelineCreationFeedback: nativeptr<VkPipelineCreationFeedbackEXT>
    [<DefaultValue(false)>]
    val mutable pipelineStageCreationFeedbackCount: uint32
    /// One entry for each shader stage specified in the parent Vk*PipelineCreateInfo struct
    [<DefaultValue(false)>]
    val mutable pPipelineStageCreationFeedbacks: nativeptr<VkPipelineCreationFeedbackEXT>

[<Struct;NoEquality;NoComparison>]
type VkPipelineCreationFeedbackEXT =
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCreationFeedbackFlagsEXT
    [<DefaultValue(false)>]
    val mutable duration: uint64

[<Struct;NoEquality;NoComparison>]
type VkPresentFrameTokenGGP =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable frameToken: GgpFrameToken

[<Struct;NoEquality;NoComparison>]
type VkImageViewHandleInfoNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable imageView: VkImageView
    [<DefaultValue(false)>]
    val mutable descriptorType: VkDescriptorType
    [<DefaultValue(false)>]
    val mutable sampler: VkSampler

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceYcbcrImageArraysFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable ycbcrImageArrays: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkCooperativeMatrixPropertiesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable MSize: uint32
    [<DefaultValue(false)>]
    val mutable NSize: uint32
    [<DefaultValue(false)>]
    val mutable KSize: uint32
    [<DefaultValue(false)>]
    val mutable AType: VkComponentTypeNV
    [<DefaultValue(false)>]
    val mutable BType: VkComponentTypeNV
    [<DefaultValue(false)>]
    val mutable CType: VkComponentTypeNV
    [<DefaultValue(false)>]
    val mutable DType: VkComponentTypeNV
    [<DefaultValue(false)>]
    val mutable scope: VkScopeNV

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceCooperativeMatrixPropertiesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable cooperativeMatrixSupportedStages: VkShaderStageFlags

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceCooperativeMatrixFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable cooperativeMatrix: VkBool32
    [<DefaultValue(false)>]
    val mutable cooperativeMatrixRobustBufferAccess: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable textureCompressionASTC_HDR: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkRenderPassAttachmentBeginInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable attachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pAttachments: nativeptr<VkImageView>

[<Struct;NoEquality;NoComparison>]
type VkFramebufferAttachmentImageInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Image creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkImageCreateFlags
    /// Image usage flags
    [<DefaultValue(false)>]
    val mutable usage: VkImageUsageFlags
    [<DefaultValue(false)>]
    val mutable width: uint32
    [<DefaultValue(false)>]
    val mutable height: uint32
    [<DefaultValue(false)>]
    val mutable layerCount: uint32
    [<DefaultValue(false)>]
    val mutable viewFormatCount: uint32
    [<DefaultValue(false)>]
    val mutable pViewFormats: nativeptr<VkFormat>

[<Struct;NoEquality;NoComparison>]
type VkFramebufferAttachmentsCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable attachmentImageInfoCount: uint32
    [<DefaultValue(false)>]
    val mutable pAttachmentImageInfos: nativeptr<VkFramebufferAttachmentImageInfoKHR>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceImagelessFramebufferFeaturesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable imagelessFramebuffer: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkFilterCubicImageViewImageFormatPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable filterCubic: VkBool32
    [<DefaultValue(false)>]
    val mutable filterCubicMinmax: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceImageViewImageFormatInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable imageViewType: VkImageViewType

[<Struct;NoEquality;NoComparison>]
type VkBufferDeviceAddressCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable deviceAddress: VkDeviceAddress

[<Struct;NoEquality;NoComparison>]
type VkBufferDeviceAddressInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer

type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceBufferDeviceAddressFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable bufferDeviceAddress: VkBool32
    [<DefaultValue(false)>]
    val mutable bufferDeviceAddressCaptureReplay: VkBool32
    [<DefaultValue(false)>]
    val mutable bufferDeviceAddressMultiDevice: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkMemoryPriorityAllocateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable priority: float32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMemoryPriorityFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memoryPriority: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMemoryBudgetPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<VkDeviceSize>, 16)>]
    val mutable heapBudget: VkFixedArray_VkDeviceSize_16
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<VkDeviceSize>, 16)>]
    val mutable heapUsage: VkFixedArray_VkDeviceSize_16

[<Struct;NoEquality;NoComparison>]
type VkPipelineRasterizationDepthClipStateCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT
    [<DefaultValue(false)>]
    val mutable depthClipEnable: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceDepthClipEnableFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    /// Pointer to next structure
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable depthClipEnable: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable uniformBufferStandardLayout: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkSurfaceProtectedCapabilitiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Represents if surface can be protected
    [<DefaultValue(false)>]
    val mutable supportsProtected: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable scalarBlockLayout: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkRenderPassFragmentDensityMapCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fragmentDensityMapAttachment: VkAttachmentReference

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceFragmentDensityMapPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable minFragmentDensityTexelSize: VkExtent2D
    [<DefaultValue(false)>]
    val mutable maxFragmentDensityTexelSize: VkExtent2D
    [<DefaultValue(false)>]
    val mutable fragmentDensityInvocations: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceFragmentDensityMapFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fragmentDensityMap: VkBool32
    [<DefaultValue(false)>]
    val mutable fragmentDensityMapDynamic: VkBool32
    [<DefaultValue(false)>]
    val mutable fragmentDensityMapNonSubsampledImages: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkDeviceMemoryOverallocationCreateInfoAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable overallocationBehavior: VkMemoryOverallocationBehaviorAMD

[<Struct;NoEquality;NoComparison>]
type VkImageStencilUsageCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable stencilUsage: VkImageUsageFlags

[<Struct;NoEquality;NoComparison>]
type VkImageDrmFormatModifierPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable drmFormatModifier: uint64

[<Struct;NoEquality;NoComparison>]
type VkImageDrmFormatModifierExplicitCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable drmFormatModifier: uint64
    [<DefaultValue(false)>]
    val mutable drmFormatModifierPlaneCount: uint32
    [<DefaultValue(false)>]
    val mutable pPlaneLayouts: nativeptr<VkSubresourceLayout>

[<Struct;NoEquality;NoComparison>]
type VkImageDrmFormatModifierListCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable drmFormatModifierCount: uint32
    [<DefaultValue(false)>]
    val mutable pDrmFormatModifiers: nativeptr<uint64>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceImageDrmFormatModifierInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable drmFormatModifier: uint64
    [<DefaultValue(false)>]
    val mutable sharingMode: VkSharingMode
    [<DefaultValue(false)>]
    val mutable queueFamilyIndexCount: uint32
    [<DefaultValue(false)>]
    val mutable pQueueFamilyIndices: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkDrmFormatModifierPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable drmFormatModifier: uint64
    [<DefaultValue(false)>]
    val mutable drmFormatModifierPlaneCount: uint32
    [<DefaultValue(false)>]
    val mutable drmFormatModifierTilingFeatures: VkFormatFeatureFlags

[<Struct;NoEquality;NoComparison>]
type VkDrmFormatModifierPropertiesListEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable drmFormatModifierCount: uint32
    [<DefaultValue(false)>]
    val mutable pDrmFormatModifierProperties: nativeptr<VkDrmFormatModifierPropertiesEXT>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceRayTracingPropertiesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderGroupHandleSize: uint32
    [<DefaultValue(false)>]
    val mutable maxRecursionDepth: uint32
    [<DefaultValue(false)>]
    val mutable maxShaderGroupStride: uint32
    [<DefaultValue(false)>]
    val mutable shaderGroupBaseAlignment: uint32
    [<DefaultValue(false)>]
    val mutable maxGeometryCount: uint64
    [<DefaultValue(false)>]
    val mutable maxInstanceCount: uint64
    [<DefaultValue(false)>]
    val mutable maxTriangleCount: uint64
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetAccelerationStructures: uint32

[<Struct;NoEquality;NoComparison>]
type VkAccelerationStructureMemoryRequirementsInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable typ: VkAccelerationStructureMemoryRequirementsTypeNV
    [<DefaultValue(false)>]
    val mutable accelerationStructure: VkAccelerationStructureNV

[<Struct;NoEquality;NoComparison>]
type VkWriteDescriptorSetAccelerationStructureNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable accelerationStructureCount: uint32
    [<DefaultValue(false)>]
    val mutable pAccelerationStructures: nativeptr<VkAccelerationStructureNV>

[<Struct;NoEquality;NoComparison>]
type VkBindAccelerationStructureMemoryInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable accelerationStructure: VkAccelerationStructureNV
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    [<DefaultValue(false)>]
    val mutable memoryOffset: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable deviceIndexCount: uint32
    [<DefaultValue(false)>]
    val mutable pDeviceIndices: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkAccelerationStructureCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable compactedSize: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable info: VkAccelerationStructureInfoNV

[<Struct;NoEquality;NoComparison>]
type VkAccelerationStructureInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable typ: VkAccelerationStructureTypeNV
    [<DefaultValue(false)>]
    val mutable flags: VkBuildAccelerationStructureFlagsNV
    [<DefaultValue(false)>]
    val mutable instanceCount: uint32
    [<DefaultValue(false)>]
    val mutable geometryCount: uint32
    [<DefaultValue(false)>]
    val mutable pGeometries: nativeptr<VkGeometryNV>

[<Struct;NoEquality;NoComparison>]
type VkGeometryNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable geometryType: VkGeometryTypeNV
    [<DefaultValue(false)>]
    val mutable geometry: VkGeometryDataNV
    [<DefaultValue(false)>]
    val mutable flags: VkGeometryFlagsNV

[<Struct;NoEquality;NoComparison>]
type VkGeometryDataNV =
    [<DefaultValue(false)>]
    val mutable triangles: VkGeometryTrianglesNV
    [<DefaultValue(false)>]
    val mutable aabbs: VkGeometryAABBNV

[<Struct;NoEquality;NoComparison>]
type VkGeometryAABBNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable aabbData: VkBuffer
    [<DefaultValue(false)>]
    val mutable numAABBs: uint32
    /// Stride in bytes between AABBs
    [<DefaultValue(false)>]
    val mutable stride: uint32
    /// Offset in bytes of the first AABB in aabbData
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkGeometryTrianglesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable vertexData: VkBuffer
    [<DefaultValue(false)>]
    val mutable vertexOffset: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable vertexCount: uint32
    [<DefaultValue(false)>]
    val mutable vertexStride: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable vertexFormat: VkFormat
    [<DefaultValue(false)>]
    val mutable indexData: VkBuffer
    [<DefaultValue(false)>]
    val mutable indexOffset: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable indexCount: uint32
    [<DefaultValue(false)>]
    val mutable indexType: VkIndexType
    /// Optional reference to array of floats representing a 3x4 row major affine transformation matrix.
    [<DefaultValue(false)>]
    val mutable transformData: VkBuffer
    [<DefaultValue(false)>]
    val mutable transformOffset: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkRayTracingPipelineCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Pipeline creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCreateFlags
    [<DefaultValue(false)>]
    val mutable stageCount: uint32
    /// One entry for each active shader stage
    [<DefaultValue(false)>]
    val mutable pStages: nativeptr<VkPipelineShaderStageCreateInfo>
    [<DefaultValue(false)>]
    val mutable groupCount: uint32
    [<DefaultValue(false)>]
    val mutable pGroups: nativeptr<VkRayTracingShaderGroupCreateInfoNV>
    [<DefaultValue(false)>]
    val mutable maxRecursionDepth: uint32
    /// Interface layout of the pipeline
    [<DefaultValue(false)>]
    val mutable layout: VkPipelineLayout
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
    [<DefaultValue(false)>]
    val mutable basePipelineHandle: VkPipeline
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
    [<DefaultValue(false)>]
    val mutable basePipelineIndex: int

[<Struct;NoEquality;NoComparison>]
type VkRayTracingShaderGroupCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable typ: VkRayTracingShaderGroupTypeNV
    [<DefaultValue(false)>]
    val mutable generalShader: uint32
    [<DefaultValue(false)>]
    val mutable closestHitShader: uint32
    [<DefaultValue(false)>]
    val mutable anyHitShader: uint32
    [<DefaultValue(false)>]
    val mutable intersectionShader: uint32

[<Struct;NoEquality;NoComparison>]
type VkDrawMeshTasksIndirectCommandNV =
    [<DefaultValue(false)>]
    val mutable taskCount: uint32
    [<DefaultValue(false)>]
    val mutable firstTask: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMeshShaderPropertiesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxDrawMeshTasksCount: uint32
    [<DefaultValue(false)>]
    val mutable maxTaskWorkGroupInvocations: uint32
    [<DefaultValue(false)>]
    val mutable maxTaskWorkGroupSize: uint32
    [<DefaultValue(false)>]
    val mutable maxTaskTotalMemorySize: uint32
    [<DefaultValue(false)>]
    val mutable maxTaskOutputCount: uint32
    [<DefaultValue(false)>]
    val mutable maxMeshWorkGroupInvocations: uint32
    [<DefaultValue(false)>]
    val mutable maxMeshWorkGroupSize: uint32
    [<DefaultValue(false)>]
    val mutable maxMeshTotalMemorySize: uint32
    [<DefaultValue(false)>]
    val mutable maxMeshOutputVertices: uint32
    [<DefaultValue(false)>]
    val mutable maxMeshOutputPrimitives: uint32
    [<DefaultValue(false)>]
    val mutable maxMeshMultiviewViewCount: uint32
    [<DefaultValue(false)>]
    val mutable meshOutputPerVertexGranularity: uint32
    [<DefaultValue(false)>]
    val mutable meshOutputPerPrimitiveGranularity: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMeshShaderFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable taskShader: VkBool32
    [<DefaultValue(false)>]
    val mutable meshShader: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineViewportCoarseSampleOrderStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable sampleOrderType: VkCoarseSampleOrderTypeNV
    [<DefaultValue(false)>]
    val mutable customSampleOrderCount: uint32
    [<DefaultValue(false)>]
    val mutable pCustomSampleOrders: nativeptr<VkCoarseSampleOrderCustomNV>

[<Struct;NoEquality;NoComparison>]
type VkCoarseSampleOrderCustomNV =
    [<DefaultValue(false)>]
    val mutable shadingRate: VkShadingRatePaletteEntryNV
    [<DefaultValue(false)>]
    val mutable sampleCount: uint32
    [<DefaultValue(false)>]
    val mutable sampleLocationCount: uint32
    [<DefaultValue(false)>]
    val mutable pSampleLocations: nativeptr<VkCoarseSampleLocationNV>

[<Struct;NoEquality;NoComparison>]
type VkCoarseSampleLocationNV =
    [<DefaultValue(false)>]
    val mutable pixelX: uint32
    [<DefaultValue(false)>]
    val mutable pixelY: uint32
    [<DefaultValue(false)>]
    val mutable sample: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShadingRateImagePropertiesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shadingRateTexelSize: VkExtent2D
    [<DefaultValue(false)>]
    val mutable shadingRatePaletteSize: uint32
    [<DefaultValue(false)>]
    val mutable shadingRateMaxCoarseSamples: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShadingRateImageFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shadingRateImage: VkBool32
    [<DefaultValue(false)>]
    val mutable shadingRateCoarseSampleOrder: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineViewportShadingRateImageStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shadingRateImageEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable viewportCount: uint32
    [<DefaultValue(false)>]
    val mutable pShadingRatePalettes: nativeptr<VkShadingRatePaletteNV>

[<Struct;NoEquality;NoComparison>]
type VkShadingRatePaletteNV =
    [<DefaultValue(false)>]
    val mutable shadingRatePaletteEntryCount: uint32
    [<DefaultValue(false)>]
    val mutable pShadingRatePaletteEntries: nativeptr<VkShadingRatePaletteEntryNV>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable dedicatedAllocationImageAliasing: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderImageFootprintFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable imageFootprint: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fragmentShaderBarycentric: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable computeDerivativeGroupQuads: VkBool32
    [<DefaultValue(false)>]
    val mutable computeDerivativeGroupLinear: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceCornerSampledImageFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable cornerSampledImage: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineViewportExclusiveScissorStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable exclusiveScissorCount: uint32
    [<DefaultValue(false)>]
    val mutable pExclusiveScissors: nativeptr<VkRect2D>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceExclusiveScissorFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable exclusiveScissor: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineRepresentativeFragmentTestStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable representativeFragmentTestEnable: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable representativeFragmentTest: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineRasterizationStateStreamCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineRasterizationStateStreamCreateFlagsEXT
    [<DefaultValue(false)>]
    val mutable rasterizationStream: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceTransformFeedbackPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxTransformFeedbackStreams: uint32
    [<DefaultValue(false)>]
    val mutable maxTransformFeedbackBuffers: uint32
    [<DefaultValue(false)>]
    val mutable maxTransformFeedbackBufferSize: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable maxTransformFeedbackStreamDataSize: uint32
    [<DefaultValue(false)>]
    val mutable maxTransformFeedbackBufferDataSize: uint32
    [<DefaultValue(false)>]
    val mutable maxTransformFeedbackBufferDataStride: uint32
    [<DefaultValue(false)>]
    val mutable transformFeedbackQueries: VkBool32
    [<DefaultValue(false)>]
    val mutable transformFeedbackStreamsLinesTriangles: VkBool32
    [<DefaultValue(false)>]
    val mutable transformFeedbackRasterizationStreamSelect: VkBool32
    [<DefaultValue(false)>]
    val mutable transformFeedbackDraw: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceTransformFeedbackFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable transformFeedback: VkBool32
    [<DefaultValue(false)>]
    val mutable geometryStreams: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceASTCDecodeFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable decodeModeSharedExponent: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkImageViewASTCDecodeModeEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable decodeMode: VkFormat

[<Struct;NoEquality;NoComparison>]
type VkSubpassDescriptionDepthStencilResolveKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// depth resolve mode
    [<DefaultValue(false)>]
    val mutable depthResolveMode: VkResolveModeFlagBitsKHR
    /// stencil resolve mode
    [<DefaultValue(false)>]
    val mutable stencilResolveMode: VkResolveModeFlagBitsKHR
    /// depth/stencil resolve attachment
    [<DefaultValue(false)>]
    val mutable pDepthStencilResolveAttachment: nativeptr<VkAttachmentReference2KHR>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceDepthStencilResolvePropertiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// supported depth resolve modes
    [<DefaultValue(false)>]
    val mutable supportedDepthResolveModes: VkResolveModeFlagsKHR
    /// supported stencil resolve modes
    [<DefaultValue(false)>]
    val mutable supportedStencilResolveModes: VkResolveModeFlagsKHR
    /// depth and stencil resolve modes can be set independently if one of them is none
    [<DefaultValue(false)>]
    val mutable independentResolveNone: VkBool32
    /// depth and stencil resolve modes can be set independently
    [<DefaultValue(false)>]
    val mutable independentResolve: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkCheckpointDataNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable stage: VkPipelineStageFlagBits
    [<DefaultValue(false)>]
    val mutable pCheckpointMarker: nativeint

[<Struct;NoEquality;NoComparison>]
type VkQueueFamilyCheckpointPropertiesNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable checkpointExecutionStageMask: VkPipelineStageFlags

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable vertexAttributeInstanceRateDivisor: VkBool32
    [<DefaultValue(false)>]
    val mutable vertexAttributeInstanceRateZeroDivisor: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderBufferInt64Atomics: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderSharedInt64Atomics: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable vulkanMemoryModel: VkBool32
    [<DefaultValue(false)>]
    val mutable vulkanMemoryModelDeviceScope: VkBool32
    [<DefaultValue(false)>]
    val mutable vulkanMemoryModelAvailabilityVisibilityChains: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceConditionalRenderingFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable conditionalRendering: VkBool32
    [<DefaultValue(false)>]
    val mutable inheritedConditionalRendering: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDevice8BitStorageFeaturesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// 8-bit integer variables supported in StorageBuffer
    [<DefaultValue(false)>]
    val mutable storageBuffer8BitAccess: VkBool32
    /// 8-bit integer variables supported in StorageBuffer and Uniform
    [<DefaultValue(false)>]
    val mutable uniformAndStorageBuffer8BitAccess: VkBool32
    /// 8-bit integer variables supported in PushConstant
    [<DefaultValue(false)>]
    val mutable storagePushConstant8: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkExternalFormatANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable externalFormat: uint64

[<Struct;NoEquality;NoComparison>]
type VkCommandBufferInheritanceConditionalRenderingInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Whether this secondary command buffer may be executed during an active conditional rendering
    [<DefaultValue(false)>]
    val mutable conditionalRenderingEnable: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkAndroidHardwareBufferFormatPropertiesANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable externalFormat: uint64
    [<DefaultValue(false)>]
    val mutable formatFeatures: VkFormatFeatureFlags
    [<DefaultValue(false)>]
    val mutable samplerYcbcrConversionComponents: VkComponentMapping
    [<DefaultValue(false)>]
    val mutable suggestedYcbcrModel: VkSamplerYcbcrModelConversion
    [<DefaultValue(false)>]
    val mutable suggestedYcbcrRange: VkSamplerYcbcrRange
    [<DefaultValue(false)>]
    val mutable suggestedXChromaOffset: VkChromaLocation
    [<DefaultValue(false)>]
    val mutable suggestedYChromaOffset: VkChromaLocation

[<Struct;NoEquality;NoComparison>]
type VkMemoryGetAndroidHardwareBufferInfoANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory

[<Struct;NoEquality;NoComparison>]
type VkAndroidHardwareBufferPropertiesANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable allocationSize: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable memoryTypeBits: uint32

[<Struct;NoEquality;NoComparison>]
type VkAndroidHardwareBufferUsageANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable androidHardwareBufferUsage: uint64

[<Struct;NoEquality;NoComparison>]
type VkImportAndroidHardwareBufferInfoANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable buffer: nativeptr<AHardwareBuffer>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDevicePCIBusInfoPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pciDomain: uint32
    [<DefaultValue(false)>]
    val mutable pciBus: uint32
    [<DefaultValue(false)>]
    val mutable pciDevice: uint32
    [<DefaultValue(false)>]
    val mutable pciFunction: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// max value of vertex attribute divisor
    [<DefaultValue(false)>]
    val mutable maxVertexAttribDivisor: uint32

[<Struct;NoEquality;NoComparison>]
type VkPipelineVertexInputDivisorStateCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable vertexBindingDivisorCount: uint32
    [<DefaultValue(false)>]
    val mutable pVertexBindingDivisors: nativeptr<VkVertexInputBindingDivisorDescriptionEXT>

[<Struct;NoEquality;NoComparison>]
type VkVertexInputBindingDivisorDescriptionEXT =
    [<DefaultValue(false)>]
    val mutable binding: uint32
    [<DefaultValue(false)>]
    val mutable divisor: uint32

[<Struct;NoEquality;NoComparison>]
type VkSubpassEndInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint

[<Struct;NoEquality;NoComparison>]
type VkSubpassBeginInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable contents: VkSubpassContents

[<Struct;NoEquality;NoComparison>]
type VkRenderPassCreateInfo2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkRenderPassCreateFlags
    [<DefaultValue(false)>]
    val mutable attachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pAttachments: nativeptr<VkAttachmentDescription2KHR>
    [<DefaultValue(false)>]
    val mutable subpassCount: uint32
    [<DefaultValue(false)>]
    val mutable pSubpasses: nativeptr<VkSubpassDescription2KHR>
    [<DefaultValue(false)>]
    val mutable dependencyCount: uint32
    [<DefaultValue(false)>]
    val mutable pDependencies: nativeptr<VkSubpassDependency2KHR>
    [<DefaultValue(false)>]
    val mutable correlatedViewMaskCount: uint32
    [<DefaultValue(false)>]
    val mutable pCorrelatedViewMasks: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkSubpassDependency2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable srcSubpass: uint32
    [<DefaultValue(false)>]
    val mutable dstSubpass: uint32
    [<DefaultValue(false)>]
    val mutable srcStageMask: VkPipelineStageFlags
    [<DefaultValue(false)>]
    val mutable dstStageMask: VkPipelineStageFlags
    [<DefaultValue(false)>]
    val mutable srcAccessMask: VkAccessFlags
    [<DefaultValue(false)>]
    val mutable dstAccessMask: VkAccessFlags
    [<DefaultValue(false)>]
    val mutable dependencyFlags: VkDependencyFlags
    [<DefaultValue(false)>]
    val mutable viewOffset: int

[<Struct;NoEquality;NoComparison>]
type VkSubpassDescription2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkSubpassDescriptionFlags
    [<DefaultValue(false)>]
    val mutable pipelineBindPoint: VkPipelineBindPoint
    [<DefaultValue(false)>]
    val mutable viewMask: uint32
    [<DefaultValue(false)>]
    val mutable inputAttachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pInputAttachments: nativeptr<VkAttachmentReference2KHR>
    [<DefaultValue(false)>]
    val mutable colorAttachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pColorAttachments: nativeptr<VkAttachmentReference2KHR>
    [<DefaultValue(false)>]
    val mutable pResolveAttachments: nativeptr<VkAttachmentReference2KHR>
    [<DefaultValue(false)>]
    val mutable pDepthStencilAttachment: nativeptr<VkAttachmentReference2KHR>
    [<DefaultValue(false)>]
    val mutable preserveAttachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pPreserveAttachments: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkAttachmentReference2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable attachment: uint32
    [<DefaultValue(false)>]
    val mutable layout: VkImageLayout
    [<DefaultValue(false)>]
    val mutable aspectMask: VkImageAspectFlags

[<Struct;NoEquality;NoComparison>]
type VkAttachmentDescription2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkAttachmentDescriptionFlags
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable samples: VkSampleCountFlagBits
    /// Load operation for color or depth data
    [<DefaultValue(false)>]
    val mutable loadOp: VkAttachmentLoadOp
    /// Store operation for color or depth data
    [<DefaultValue(false)>]
    val mutable storeOp: VkAttachmentStoreOp
    /// Load operation for stencil data
    [<DefaultValue(false)>]
    val mutable stencilLoadOp: VkAttachmentLoadOp
    /// Store operation for stencil data
    [<DefaultValue(false)>]
    val mutable stencilStoreOp: VkAttachmentStoreOp
    [<DefaultValue(false)>]
    val mutable initialLayout: VkImageLayout
    [<DefaultValue(false)>]
    val mutable finalLayout: VkImageLayout

[<Struct;NoEquality;NoComparison>]
type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxVariableDescriptorCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable descriptorSetCount: uint32
    [<DefaultValue(false)>]
    val mutable pDescriptorCounts: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable bindingCount: uint32
    [<DefaultValue(false)>]
    val mutable pBindingFlags: nativeptr<VkDescriptorBindingFlagsEXT>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceDescriptorIndexingPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxUpdateAfterBindDescriptorsInAllPools: uint32
    [<DefaultValue(false)>]
    val mutable shaderUniformBufferArrayNonUniformIndexingNative: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderSampledImageArrayNonUniformIndexingNative: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderStorageBufferArrayNonUniformIndexingNative: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderStorageImageArrayNonUniformIndexingNative: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32
    [<DefaultValue(false)>]
    val mutable robustBufferAccessUpdateAfterBind: VkBool32
    [<DefaultValue(false)>]
    val mutable quadDivergentImplicitLod: VkBool32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUpdateAfterBindSamplers: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUpdateAfterBindSampledImages: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUpdateAfterBindStorageImages: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageUpdateAfterBindResources: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindSamplers: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindUniformBuffers: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindStorageBuffers: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindSampledImages: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindStorageImages: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindInputAttachments: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceDescriptorIndexingFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderInputAttachmentArrayDynamicIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderUniformTexelBufferArrayDynamicIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderStorageTexelBufferArrayDynamicIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderUniformBufferArrayNonUniformIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderSampledImageArrayNonUniformIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderStorageBufferArrayNonUniformIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderStorageImageArrayNonUniformIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderInputAttachmentArrayNonUniformIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingUniformBufferUpdateAfterBind: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingSampledImageUpdateAfterBind: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingStorageImageUpdateAfterBind: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingStorageBufferUpdateAfterBind: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingUpdateUnusedWhilePending: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingPartiallyBound: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingVariableDescriptorCount: VkBool32
    [<DefaultValue(false)>]
    val mutable runtimeDescriptorArray: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineRasterizationConservativeStateCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT
    [<DefaultValue(false)>]
    val mutable conservativeRasterizationMode: VkConservativeRasterizationModeEXT
    [<DefaultValue(false)>]
    val mutable extraPrimitiveOverestimationSize: float32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderCoreProperties2AMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    /// Pointer to next structure
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// features supported by the shader core
    [<DefaultValue(false)>]
    val mutable shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD
    /// number of active compute units across all shader engines/arrays
    [<DefaultValue(false)>]
    val mutable activeComputeUnitCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderCorePropertiesAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    /// Pointer to next structure
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// number of shader engines
    [<DefaultValue(false)>]
    val mutable shaderEngineCount: uint32
    /// number of shader arrays
    [<DefaultValue(false)>]
    val mutable shaderArraysPerEngineCount: uint32
    /// number of physical CUs per shader array
    [<DefaultValue(false)>]
    val mutable computeUnitsPerShaderArray: uint32
    /// number of SIMDs per compute unit
    [<DefaultValue(false)>]
    val mutable simdPerComputeUnit: uint32
    /// number of wavefront slots in each SIMD
    [<DefaultValue(false)>]
    val mutable wavefrontsPerSimd: uint32
    /// maximum number of threads per wavefront
    [<DefaultValue(false)>]
    val mutable wavefrontSize: uint32
    /// number of physical SGPRs per SIMD
    [<DefaultValue(false)>]
    val mutable sgprsPerSimd: uint32
    /// minimum number of SGPRs that can be allocated by a wave
    [<DefaultValue(false)>]
    val mutable minSgprAllocation: uint32
    /// number of available SGPRs
    [<DefaultValue(false)>]
    val mutable maxSgprAllocation: uint32
    /// SGPRs are allocated in groups of this size
    [<DefaultValue(false)>]
    val mutable sgprAllocationGranularity: uint32
    /// number of physical VGPRs per SIMD
    [<DefaultValue(false)>]
    val mutable vgprsPerSimd: uint32
    /// minimum number of VGPRs that can be allocated by a wave
    [<DefaultValue(false)>]
    val mutable minVgprAllocation: uint32
    /// number of available VGPRs
    [<DefaultValue(false)>]
    val mutable maxVgprAllocation: uint32
    /// VGPRs are allocated in groups of this size
    [<DefaultValue(false)>]
    val mutable vgprAllocationGranularity: uint32

[<Struct;NoEquality;NoComparison>]
type VkCalibratedTimestampInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable timeDomain: VkTimeDomainEXT

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceConservativeRasterizationPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    /// Pointer to next structure
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// The size in pixels the primitive is enlarged at each edge during conservative rasterization
    [<DefaultValue(false)>]
    val mutable primitiveOverestimationSize: float32
    /// The maximum additional overestimation the client can specify in the pipeline state
    [<DefaultValue(false)>]
    val mutable maxExtraPrimitiveOverestimationSize: float32
    /// The granularity of extra overestimation sizes the implementations supports between 0 and maxExtraOverestimationSize
    [<DefaultValue(false)>]
    val mutable extraPrimitiveOverestimationSizeGranularity: float32
    /// true if the implementation supports conservative rasterization underestimation mode
    [<DefaultValue(false)>]
    val mutable primitiveUnderestimation: VkBool32
    /// true if conservative rasterization also applies to points and lines
    [<DefaultValue(false)>]
    val mutable conservativePointAndLineRasterization: VkBool32
    /// true if degenerate triangles (those with zero area after snap) are rasterized
    [<DefaultValue(false)>]
    val mutable degenerateTrianglesRasterized: VkBool32
    /// true if degenerate lines (those with zero length after snap) are rasterized
    [<DefaultValue(false)>]
    val mutable degenerateLinesRasterized: VkBool32
    /// true if the implementation supports the FullyCoveredEXT SPIR-V builtin fragment shader input variable
    [<DefaultValue(false)>]
    val mutable fullyCoveredFragmentShaderInputVariable: VkBool32
    /// true if the implementation supports both conservative rasterization and post depth coverage sample coverage mask
    [<DefaultValue(false)>]
    val mutable conservativeRasterizationPostDepthCoverage: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceExternalMemoryHostPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable minImportedHostPointerAlignment: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkMemoryHostPointerPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memoryTypeBits: uint32

[<Struct;NoEquality;NoComparison>]
type VkImportMemoryHostPointerInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits
    [<DefaultValue(false)>]
    val mutable pHostPointer: nativeint

[<Struct;NoEquality;NoComparison>]
type VkDebugUtilsMessengerCallbackDataEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDebugUtilsMessengerCallbackDataFlagsEXT
    [<DefaultValue(false)>]
    val mutable pMessageIdName: nativeptr<byte>
    [<DefaultValue(false)>]
    val mutable messageIdNumber: int
    [<DefaultValue(false)>]
    val mutable pMessage: nativeptr<byte>
    [<DefaultValue(false)>]
    val mutable queueLabelCount: uint32
    [<DefaultValue(false)>]
    val mutable pQueueLabels: nativeptr<VkDebugUtilsLabelEXT>
    [<DefaultValue(false)>]
    val mutable cmdBufLabelCount: uint32
    [<DefaultValue(false)>]
    val mutable pCmdBufLabels: nativeptr<VkDebugUtilsLabelEXT>
    [<DefaultValue(false)>]
    val mutable objectCount: uint32
    [<DefaultValue(false)>]
    val mutable pObjects: nativeptr<VkDebugUtilsObjectNameInfoEXT>

[<Struct;NoEquality;NoComparison>]
type VkDebugUtilsMessengerCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDebugUtilsMessengerCreateFlagsEXT
    [<DefaultValue(false)>]
    val mutable messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT
    [<DefaultValue(false)>]
    val mutable messageType: VkDebugUtilsMessageTypeFlagsEXT
    [<DefaultValue(false)>]
    val mutable pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT
    [<DefaultValue(false)>]
    val mutable pUserData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkDebugUtilsLabelEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pLabelName: nativeptr<byte>
    [<DefaultValue(false)>]
    val mutable color: float32

[<Struct;NoEquality;NoComparison>]
type VkDebugUtilsObjectTagInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable objectType: VkObjectType
    [<DefaultValue(false)>]
    val mutable objectHandle: uint64
    [<DefaultValue(false)>]
    val mutable tagName: uint64
    [<DefaultValue(false)>]
    val mutable tagSize: unativeint
    [<DefaultValue(false)>]
    val mutable pTag: nativeint

[<Struct;NoEquality;NoComparison>]
type VkDebugUtilsObjectNameInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable objectType: VkObjectType
    [<DefaultValue(false)>]
    val mutable objectHandle: uint64
    [<DefaultValue(false)>]
    val mutable pObjectName: nativeptr<byte>

[<Struct;NoEquality;NoComparison>]
type VkDeviceQueueGlobalPriorityCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable globalPriority: VkQueueGlobalPriorityEXT

[<Struct;NoEquality;NoComparison>]
type VkShaderStatisticsInfoAMD =
    [<DefaultValue(false)>]
    val mutable shaderStageMask: VkShaderStageFlags
    [<DefaultValue(false)>]
    val mutable resourceUsage: VkShaderResourceUsageAMD
    [<DefaultValue(false)>]
    val mutable numPhysicalVgprs: uint32
    [<DefaultValue(false)>]
    val mutable numPhysicalSgprs: uint32
    [<DefaultValue(false)>]
    val mutable numAvailableVgprs: uint32
    [<DefaultValue(false)>]
    val mutable numAvailableSgprs: uint32
    [<DefaultValue(false)>]
    val mutable computeWorkGroupSize: uint32

[<Struct;NoEquality;NoComparison>]
type VkShaderResourceUsageAMD =
    [<DefaultValue(false)>]
    val mutable numUsedVgprs: uint32
    [<DefaultValue(false)>]
    val mutable numUsedSgprs: uint32
    [<DefaultValue(false)>]
    val mutable ldsSizePerLocalWorkGroup: uint32
    [<DefaultValue(false)>]
    val mutable ldsUsageSizeInBytes: unativeint
    [<DefaultValue(false)>]
    val mutable scratchMemUsageInBytes: unativeint

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDevicePresentationPropertiesANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable sharedImage: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkSwapchainImageCreateInfoANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable usage: VkSwapchainImageUsageFlagsANDROID

[<Struct;NoEquality;NoComparison>]
type VkNativeBufferANDROID =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handle: nativeint
    [<DefaultValue(false)>]
    val mutable stride: int
    [<DefaultValue(false)>]
    val mutable format: int
    [<DefaultValue(false)>]
    val mutable usage: int
    [<DefaultValue(false)>]
    val mutable usage2: VkNativeBufferUsage2ANDROID

[<Struct;NoEquality;NoComparison>]
type VkNativeBufferUsage2ANDROID =
    [<DefaultValue(false)>]
    val mutable consumer: uint64
    [<DefaultValue(false)>]
    val mutable producer: uint64

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceHostQueryResetFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable hostQueryReset: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceFloatControlsPropertiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable denormBehaviorIndependence: VkShaderFloatControlsIndependenceKHR
    [<DefaultValue(false)>]
    val mutable roundingModeIndependence: VkShaderFloatControlsIndependenceKHR
    [<DefaultValue(false)>]
    val mutable shaderSignedZeroInfNanPreserveFloat16: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderSignedZeroInfNanPreserveFloat32: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderSignedZeroInfNanPreserveFloat64: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderDenormPreserveFloat16: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderDenormPreserveFloat32: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderDenormPreserveFloat64: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderDenormFlushToZeroFloat16: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderDenormFlushToZeroFloat32: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderDenormFlushToZeroFloat64: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderRoundingModeRTEFloat16: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderRoundingModeRTEFloat32: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderRoundingModeRTEFloat64: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderRoundingModeRTZFloat16: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderRoundingModeRTZFloat32: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderRoundingModeRTZFloat64: VkBool32

type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8FeaturesKHR

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderFloat16: VkBool32
    [<DefaultValue(false)>]
    val mutable shaderInt8: VkBool32

type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceShaderDrawParametersFeatures =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable shaderDrawParameters: VkBool32

type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport

[<Struct;NoEquality;NoComparison>]
type VkDescriptorSetLayoutSupport =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable supported: VkBool32

type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMaintenance3Properties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxPerSetDescriptors: uint32
    [<DefaultValue(false)>]
    val mutable maxMemoryAllocationSize: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkShaderModuleValidationCacheCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable validationCache: VkValidationCacheEXT

[<Struct;NoEquality;NoComparison>]
type VkValidationCacheCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkValidationCacheCreateFlagsEXT
    [<DefaultValue(false)>]
    val mutable initialDataSize: unativeint
    [<DefaultValue(false)>]
    val mutable pInitialData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkImageFormatListCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable viewFormatCount: uint32
    [<DefaultValue(false)>]
    val mutable pViewFormats: nativeptr<VkFormat>

[<Struct;NoEquality;NoComparison>]
type VkPipelineCoverageModulationStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCoverageModulationStateCreateFlagsNV
    [<DefaultValue(false)>]
    val mutable coverageModulationMode: VkCoverageModulationModeNV
    [<DefaultValue(false)>]
    val mutable coverageModulationTableEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable coverageModulationTableCount: uint32
    [<DefaultValue(false)>]
    val mutable pCoverageModulationTable: nativeptr<float32>

[<Struct;NoEquality;NoComparison>]
type VkDescriptorPoolInlineUniformBlockCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxInlineUniformBlockBindings: uint32

[<Struct;NoEquality;NoComparison>]
type VkWriteDescriptorSetInlineUniformBlockEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable dataSize: uint32
    [<DefaultValue(false)>]
    val mutable pData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceInlineUniformBlockPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxInlineUniformBlockSize: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorInlineUniformBlocks: uint32
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetInlineUniformBlocks: uint32
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceInlineUniformBlockFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable inlineUniformBlock: VkBool32
    [<DefaultValue(false)>]
    val mutable descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineColorBlendAdvancedStateCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable srcPremultiplied: VkBool32
    [<DefaultValue(false)>]
    val mutable dstPremultiplied: VkBool32
    [<DefaultValue(false)>]
    val mutable blendOverlap: VkBlendOverlapEXT

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable advancedBlendMaxColorAttachments: uint32
    [<DefaultValue(false)>]
    val mutable advancedBlendIndependentBlend: VkBool32
    [<DefaultValue(false)>]
    val mutable advancedBlendNonPremultipliedSrcColor: VkBool32
    [<DefaultValue(false)>]
    val mutable advancedBlendNonPremultipliedDstColor: VkBool32
    [<DefaultValue(false)>]
    val mutable advancedBlendCorrelatedOverlap: VkBool32
    [<DefaultValue(false)>]
    val mutable advancedBlendAllOperations: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable advancedBlendCoherentOperations: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkSamplerReductionModeCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable reductionMode: VkSamplerReductionModeEXT

[<Struct;NoEquality;NoComparison>]
type VkMultisamplePropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxSampleLocationGridSize: VkExtent2D

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSampleLocationsPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable sampleLocationSampleCounts: VkSampleCountFlags
    [<DefaultValue(false)>]
    val mutable maxSampleLocationGridSize: VkExtent2D
    [<DefaultValue(false)>]
    val mutable sampleLocationCoordinateRange: float32
    [<DefaultValue(false)>]
    val mutable sampleLocationSubPixelBits: uint32
    [<DefaultValue(false)>]
    val mutable variableSampleLocations: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineSampleLocationsStateCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable sampleLocationsEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable sampleLocationsInfo: VkSampleLocationsInfoEXT

[<Struct;NoEquality;NoComparison>]
type VkRenderPassSampleLocationsBeginInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable attachmentInitialSampleLocationsCount: uint32
    [<DefaultValue(false)>]
    val mutable pAttachmentInitialSampleLocations: nativeptr<VkAttachmentSampleLocationsEXT>
    [<DefaultValue(false)>]
    val mutable postSubpassSampleLocationsCount: uint32
    [<DefaultValue(false)>]
    val mutable pPostSubpassSampleLocations: nativeptr<VkSubpassSampleLocationsEXT>

[<Struct;NoEquality;NoComparison>]
type VkSubpassSampleLocationsEXT =
    [<DefaultValue(false)>]
    val mutable subpassIndex: uint32
    [<DefaultValue(false)>]
    val mutable sampleLocationsInfo: VkSampleLocationsInfoEXT

[<Struct;NoEquality;NoComparison>]
type VkAttachmentSampleLocationsEXT =
    [<DefaultValue(false)>]
    val mutable attachmentIndex: uint32
    [<DefaultValue(false)>]
    val mutable sampleLocationsInfo: VkSampleLocationsInfoEXT

[<Struct;NoEquality;NoComparison>]
type VkSampleLocationsInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable sampleLocationsPerPixel: VkSampleCountFlagBits
    [<DefaultValue(false)>]
    val mutable sampleLocationGridSize: VkExtent2D
    [<DefaultValue(false)>]
    val mutable sampleLocationsCount: uint32
    [<DefaultValue(false)>]
    val mutable pSampleLocations: nativeptr<VkSampleLocationEXT>

[<Struct;NoEquality;NoComparison>]
type VkSampleLocationEXT =
    [<DefaultValue(false)>]
    val mutable x: float32
    [<DefaultValue(false)>]
    val mutable y: float32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable filterMinmaxSingleComponentFormats: VkBool32
    [<DefaultValue(false)>]
    val mutable filterMinmaxImageComponentMapping: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineCoverageToColorStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCoverageToColorStateCreateFlagsNV
    [<DefaultValue(false)>]
    val mutable coverageToColorEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable coverageToColorLocation: uint32

[<Struct;NoEquality;NoComparison>]
type VkDeviceQueueInfo2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDeviceQueueCreateFlags
    [<DefaultValue(false)>]
    val mutable queueFamilyIndex: uint32
    [<DefaultValue(false)>]
    val mutable queueIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceProtectedMemoryProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable protectedNoFault: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceProtectedMemoryFeatures =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable protectedMemory: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkProtectedSubmitInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Submit protected command buffers
    [<DefaultValue(false)>]
    val mutable protectedSubmit: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkConditionalRenderingBeginInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable flags: VkConditionalRenderingFlagsEXT

[<Struct;NoEquality;NoComparison>]
type VkTextureLODGatherFormatPropertiesAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable supportsTextureGatherLODBiasAMD: VkBool32

type VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties

[<Struct;NoEquality;NoComparison>]
type VkSamplerYcbcrConversionImageFormatProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable combinedImageSamplerDescriptorCount: uint32

type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSamplerYcbcrConversionFeatures =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Sampler color conversion supported
    [<DefaultValue(false)>]
    val mutable samplerYcbcrConversion: VkBool32

type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo

[<Struct;NoEquality;NoComparison>]
type VkImagePlaneMemoryRequirementsInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable planeAspect: VkImageAspectFlagBits

type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo

[<Struct;NoEquality;NoComparison>]
type VkBindImagePlaneMemoryInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable planeAspect: VkImageAspectFlagBits

type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkSamplerYcbcrConversionCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable ycbcrModel: VkSamplerYcbcrModelConversion
    [<DefaultValue(false)>]
    val mutable ycbcrRange: VkSamplerYcbcrRange
    [<DefaultValue(false)>]
    val mutable components: VkComponentMapping
    [<DefaultValue(false)>]
    val mutable xChromaOffset: VkChromaLocation
    [<DefaultValue(false)>]
    val mutable yChromaOffset: VkChromaLocation
    [<DefaultValue(false)>]
    val mutable chromaFilter: VkFilter
    [<DefaultValue(false)>]
    val mutable forceExplicitReconstruction: VkBool32

type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo

[<Struct;NoEquality;NoComparison>]
type VkSamplerYcbcrConversionInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable conversion: VkSamplerYcbcrConversion

type VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkPipelineTessellationDomainOriginStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable domainOrigin: VkTessellationDomainOrigin

type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkImageViewUsageCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable usage: VkImageUsageFlags

type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo

[<Struct;NoEquality;NoComparison>]
type VkMemoryDedicatedAllocateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Image that this allocation will be bound to
    [<DefaultValue(false)>]
    val mutable image: VkImage
    /// Buffer that this allocation will be bound to
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer

type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements

[<Struct;NoEquality;NoComparison>]
type VkMemoryDedicatedRequirements =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable prefersDedicatedAllocation: VkBool32
    [<DefaultValue(false)>]
    val mutable requiresDedicatedAllocation: VkBool32

type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDevicePointClippingProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pointClippingBehavior: VkPointClippingBehavior

type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2

[<Struct;NoEquality;NoComparison>]
type VkSparseImageMemoryRequirements2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memoryRequirements: VkSparseImageMemoryRequirements

type VkMemoryRequirements2KHR = VkMemoryRequirements2

[<Struct;NoEquality;NoComparison>]
type VkMemoryRequirements2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memoryRequirements: VkMemoryRequirements

type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2

[<Struct;NoEquality;NoComparison>]
type VkImageSparseMemoryRequirementsInfo2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable image: VkImage

type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2

[<Struct;NoEquality;NoComparison>]
type VkImageMemoryRequirementsInfo2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable image: VkImage

type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2

[<Struct;NoEquality;NoComparison>]
type VkBufferMemoryRequirementsInfo2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSubgroupProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// The size of a subgroup for this queue.
    [<DefaultValue(false)>]
    val mutable subgroupSize: uint32
    /// Bitfield of what shader stages support subgroup operations
    [<DefaultValue(false)>]
    val mutable supportedStages: VkShaderStageFlags
    /// Bitfield of what subgroup operations are supported.
    [<DefaultValue(false)>]
    val mutable supportedOperations: VkSubgroupFeatureFlags
    /// Flag to specify whether quad operations are available in all stages.
    [<DefaultValue(false)>]
    val mutable quadOperationsInAllStages: VkBool32

type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDevice16BitStorageFeatures =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// 16-bit integer/floating-point variables supported in BufferBlock
    [<DefaultValue(false)>]
    val mutable storageBuffer16BitAccess: VkBool32
    /// 16-bit integer/floating-point variables supported in BufferBlock and Block
    [<DefaultValue(false)>]
    val mutable uniformAndStorageBuffer16BitAccess: VkBool32
    /// 16-bit integer/floating-point variables supported in PushConstant
    [<DefaultValue(false)>]
    val mutable storagePushConstant16: VkBool32
    /// 16-bit integer/floating-point variables supported in shader inputs and outputs
    [<DefaultValue(false)>]
    val mutable storageInputOutput16: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkSharedPresentSurfaceCapabilitiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Supported image usage flags if swapchain created using a shared present mode
    [<DefaultValue(false)>]
    val mutable sharedPresentSupportedUsageFlags: VkImageUsageFlags

[<Struct;NoEquality;NoComparison>]
type VkDisplayPlaneCapabilities2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable capabilities: VkDisplayPlaneCapabilitiesKHR

[<Struct;NoEquality;NoComparison>]
type VkDisplayPlaneInfo2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable mode: VkDisplayModeKHR
    [<DefaultValue(false)>]
    val mutable planeIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkDisplayModeProperties2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable displayModeProperties: VkDisplayModePropertiesKHR

[<Struct;NoEquality;NoComparison>]
type VkDisplayPlaneProperties2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable displayPlaneProperties: VkDisplayPlanePropertiesKHR

[<Struct;NoEquality;NoComparison>]
type VkDisplayProperties2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable displayProperties: VkDisplayPropertiesKHR

[<Struct;NoEquality;NoComparison>]
type VkSurfaceFormat2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable surfaceFormat: VkSurfaceFormatKHR

[<Struct;NoEquality;NoComparison>]
type VkSurfaceCapabilities2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable surfaceCapabilities: VkSurfaceCapabilitiesKHR

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSurfaceInfo2KHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable surface: VkSurfaceKHR

type VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkRenderPassInputAttachmentAspectCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable aspectReferenceCount: uint32
    [<DefaultValue(false)>]
    val mutable pAspectReferences: nativeptr<VkInputAttachmentAspectReference>

type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference

[<Struct;NoEquality;NoComparison>]
type VkInputAttachmentAspectReference =
    [<DefaultValue(false)>]
    val mutable subpass: uint32
    [<DefaultValue(false)>]
    val mutable inputAttachmentIndex: uint32
    [<DefaultValue(false)>]
    val mutable aspectMask: VkImageAspectFlags

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable perViewPositionAllComponents: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineDiscardRectangleStateCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineDiscardRectangleStateCreateFlagsEXT
    [<DefaultValue(false)>]
    val mutable discardRectangleMode: VkDiscardRectangleModeEXT
    [<DefaultValue(false)>]
    val mutable discardRectangleCount: uint32
    [<DefaultValue(false)>]
    val mutable pDiscardRectangles: nativeptr<VkRect2D>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceDiscardRectanglePropertiesEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// max number of active discard rectangles
    [<DefaultValue(false)>]
    val mutable maxDiscardRectangles: uint32

[<Struct;NoEquality;NoComparison>]
type VkPipelineViewportSwizzleStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineViewportSwizzleStateCreateFlagsNV
    [<DefaultValue(false)>]
    val mutable viewportCount: uint32
    [<DefaultValue(false)>]
    val mutable pViewportSwizzles: nativeptr<VkViewportSwizzleNV>

[<Struct;NoEquality;NoComparison>]
type VkViewportSwizzleNV =
    [<DefaultValue(false)>]
    val mutable x: VkViewportCoordinateSwizzleNV
    [<DefaultValue(false)>]
    val mutable y: VkViewportCoordinateSwizzleNV
    [<DefaultValue(false)>]
    val mutable z: VkViewportCoordinateSwizzleNV
    [<DefaultValue(false)>]
    val mutable w: VkViewportCoordinateSwizzleNV

[<Struct;NoEquality;NoComparison>]
type VkPipelineViewportWScalingStateCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable viewportWScalingEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable viewportCount: uint32
    [<DefaultValue(false)>]
    val mutable pViewportWScalings: nativeptr<VkViewportWScalingNV>

[<Struct;NoEquality;NoComparison>]
type VkViewportWScalingNV =
    [<DefaultValue(false)>]
    val mutable xcoeff: float32
    [<DefaultValue(false)>]
    val mutable ycoeff: float32

[<Struct;NoEquality;NoComparison>]
type VkMetalSurfaceCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkMetalSurfaceCreateFlagsEXT
    [<DefaultValue(false)>]
    val mutable pLayer: nativeptr<CAMetalLayer>

[<Struct;NoEquality;NoComparison>]
type VkMacOSSurfaceCreateInfoMVK =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkMacOSSurfaceCreateFlagsMVK
    [<DefaultValue(false)>]
    val mutable pView: nativeint

[<Struct;NoEquality;NoComparison>]
type VkIOSSurfaceCreateInfoMVK =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkIOSSurfaceCreateFlagsMVK
    [<DefaultValue(false)>]
    val mutable pView: nativeint

[<Struct;NoEquality;NoComparison>]
type VkPresentTimeGOOGLE =
    /// Application-provided identifier
    [<DefaultValue(false)>]
    val mutable presentID: uint32
    /// Earliest time an image should be presented
    [<DefaultValue(false)>]
    val mutable desiredPresentTime: uint64

[<Struct;NoEquality;NoComparison>]
type VkPresentTimesInfoGOOGLE =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Copy of VkPresentInfoKHR::swapchainCount
    [<DefaultValue(false)>]
    val mutable swapchainCount: uint32
    /// The earliest times to present images
    [<DefaultValue(false)>]
    val mutable pTimes: nativeptr<VkPresentTimeGOOGLE>

[<Struct;NoEquality;NoComparison>]
type VkPastPresentationTimingGOOGLE =
    /// Application-provided identifier, previously given to vkQueuePresentKHR
    [<DefaultValue(false)>]
    val mutable presentID: uint32
    /// Earliest time an image should have been presented, previously given to vkQueuePresentKHR
    [<DefaultValue(false)>]
    val mutable desiredPresentTime: uint64
    /// Time the image was actually displayed
    [<DefaultValue(false)>]
    val mutable actualPresentTime: uint64
    /// Earliest time the image could have been displayed
    [<DefaultValue(false)>]
    val mutable earliestPresentTime: uint64
    /// How early vkQueuePresentKHR was processed vs. how soon it needed to be and make earliestPresentTime
    [<DefaultValue(false)>]
    val mutable presentMargin: uint64

[<Struct;NoEquality;NoComparison>]
type VkRefreshCycleDurationGOOGLE =
    /// Number of nanoseconds from the start of one refresh cycle to the next
    [<DefaultValue(false)>]
    val mutable refreshDuration: uint64

[<Struct;NoEquality;NoComparison>]
type VkSwapchainDisplayNativeHdrCreateInfoAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable localDimmingEnable: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkDisplayNativeHdrSurfaceCapabilitiesAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable localDimmingSupport: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkHdrMetadataEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Display primary's Red
    [<DefaultValue(false)>]
    val mutable displayPrimaryRed: VkXYColorEXT
    /// Display primary's Green
    [<DefaultValue(false)>]
    val mutable displayPrimaryGreen: VkXYColorEXT
    /// Display primary's Blue
    [<DefaultValue(false)>]
    val mutable displayPrimaryBlue: VkXYColorEXT
    /// Display primary's Blue
    [<DefaultValue(false)>]
    val mutable whitePoint: VkXYColorEXT
    /// Display maximum luminance
    [<DefaultValue(false)>]
    val mutable maxLuminance: float32
    /// Display minimum luminance
    [<DefaultValue(false)>]
    val mutable minLuminance: float32
    /// Content maximum luminance
    [<DefaultValue(false)>]
    val mutable maxContentLightLevel: float32
    [<DefaultValue(false)>]
    val mutable maxFrameAverageLightLevel: float32

/// Chromaticity coordinate
[<Struct;NoEquality;NoComparison>]
type VkXYColorEXT =
    [<DefaultValue(false)>]
    val mutable x: float32
    [<DefaultValue(false)>]
    val mutable y: float32

type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkDescriptorUpdateTemplateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDescriptorUpdateTemplateCreateFlags
    /// Number of descriptor update entries to use for the update template
    [<DefaultValue(false)>]
    val mutable descriptorUpdateEntryCount: uint32
    /// Descriptor update entries for the template
    [<DefaultValue(false)>]
    val mutable pDescriptorUpdateEntries: nativeptr<VkDescriptorUpdateTemplateEntry>
    [<DefaultValue(false)>]
    val mutable templateType: VkDescriptorUpdateTemplateType
    [<DefaultValue(false)>]
    val mutable descriptorSetLayout: VkDescriptorSetLayout
    [<DefaultValue(false)>]
    val mutable pipelineBindPoint: VkPipelineBindPoint
    /// If used for push descriptors, this is the only allowed layout
    [<DefaultValue(false)>]
    val mutable pipelineLayout: VkPipelineLayout
    [<DefaultValue(false)>]
    val mutable set: uint32

type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry

[<Struct;NoEquality;NoComparison>]
type VkDescriptorUpdateTemplateEntry =
    /// Binding within the destination descriptor set to write
    [<DefaultValue(false)>]
    val mutable dstBinding: uint32
    /// Array element within the destination binding to write
    [<DefaultValue(false)>]
    val mutable dstArrayElement: uint32
    /// Number of descriptors to write
    [<DefaultValue(false)>]
    val mutable descriptorCount: uint32
    /// Descriptor type to write
    [<DefaultValue(false)>]
    val mutable descriptorType: VkDescriptorType
    /// Offset into pData where the descriptors to update are stored
    [<DefaultValue(false)>]
    val mutable offset: unativeint
    /// Stride between two descriptors in pData when writing more than one descriptor
    [<DefaultValue(false)>]
    val mutable stride: unativeint

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupSwapchainCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable modes: VkDeviceGroupPresentModeFlagsKHR

type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupDeviceCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable physicalDeviceCount: uint32
    [<DefaultValue(false)>]
    val mutable pPhysicalDevices: nativeptr<VkPhysicalDevice>

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupPresentInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable swapchainCount: uint32
    [<DefaultValue(false)>]
    val mutable pDeviceMasks: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable mode: VkDeviceGroupPresentModeFlagBitsKHR

[<Struct;NoEquality;NoComparison>]
type VkAcquireNextImageInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable swapchain: VkSwapchainKHR
    [<DefaultValue(false)>]
    val mutable timeout: uint64
    [<DefaultValue(false)>]
    val mutable semaphore: VkSemaphore
    [<DefaultValue(false)>]
    val mutable fence: VkFence
    [<DefaultValue(false)>]
    val mutable deviceMask: uint32

[<Struct;NoEquality;NoComparison>]
type VkBindImageMemorySwapchainInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable swapchain: VkSwapchainKHR
    [<DefaultValue(false)>]
    val mutable imageIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkImageSwapchainCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable swapchain: VkSwapchainKHR

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupPresentCapabilitiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<uint32>, 32)>]
    val mutable presentMask: VkFixedArray_uint32_32
    [<DefaultValue(false)>]
    val mutable modes: VkDeviceGroupPresentModeFlagsKHR

type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupBindSparseInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable resourceDeviceIndex: uint32
    [<DefaultValue(false)>]
    val mutable memoryDeviceIndex: uint32

type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupSubmitInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable waitSemaphoreCount: uint32
    [<DefaultValue(false)>]
    val mutable pWaitSemaphoreDeviceIndices: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable commandBufferCount: uint32
    [<DefaultValue(false)>]
    val mutable pCommandBufferDeviceMasks: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable signalSemaphoreCount: uint32
    [<DefaultValue(false)>]
    val mutable pSignalSemaphoreDeviceIndices: nativeptr<uint32>

type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupCommandBufferBeginInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable deviceMask: uint32

type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo

[<Struct;NoEquality;NoComparison>]
type VkDeviceGroupRenderPassBeginInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable deviceMask: uint32
    [<DefaultValue(false)>]
    val mutable deviceRenderAreaCount: uint32
    [<DefaultValue(false)>]
    val mutable pDeviceRenderAreas: nativeptr<VkRect2D>

type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo

[<Struct;NoEquality;NoComparison>]
type VkBindImageMemoryDeviceGroupInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable deviceIndexCount: uint32
    [<DefaultValue(false)>]
    val mutable pDeviceIndices: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable splitInstanceBindRegionCount: uint32
    [<DefaultValue(false)>]
    val mutable pSplitInstanceBindRegions: nativeptr<VkRect2D>

type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo

[<Struct;NoEquality;NoComparison>]
type VkBindImageMemoryInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable image: VkImage
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    [<DefaultValue(false)>]
    val mutable memoryOffset: VkDeviceSize

type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo

[<Struct;NoEquality;NoComparison>]
type VkBindBufferMemoryDeviceGroupInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable deviceIndexCount: uint32
    [<DefaultValue(false)>]
    val mutable pDeviceIndices: nativeptr<uint32>

type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo

[<Struct;NoEquality;NoComparison>]
type VkBindBufferMemoryInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    [<DefaultValue(false)>]
    val mutable memoryOffset: VkDeviceSize

type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo

[<Struct;NoEquality;NoComparison>]
type VkMemoryAllocateFlagsInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkMemoryAllocateFlags
    [<DefaultValue(false)>]
    val mutable deviceMask: uint32

type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceGroupProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable physicalDeviceCount: uint32
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<VkPhysicalDevice>, 32)>]
    val mutable physicalDevices: VkFixedArray_VkPhysicalDevice_32
    [<DefaultValue(false)>]
    val mutable subsetAllocation: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkSwapchainCounterCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable surfaceCounters: VkSurfaceCounterFlagsEXT

[<Struct;NoEquality;NoComparison>]
type VkDisplayEventInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable displayEvent: VkDisplayEventTypeEXT

[<Struct;NoEquality;NoComparison>]
type VkDeviceEventInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable deviceEvent: VkDeviceEventTypeEXT

[<Struct;NoEquality;NoComparison>]
type VkDisplayPowerInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable powerState: VkDisplayPowerStateEXT

[<Struct;NoEquality;NoComparison>]
type VkSurfaceCapabilities2EXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Supported minimum number of images for the surface
    [<DefaultValue(false)>]
    val mutable minImageCount: uint32
    /// Supported maximum number of images for the surface, 0 for unlimited
    [<DefaultValue(false)>]
    val mutable maxImageCount: uint32
    /// Current image width and height for the surface, (0, 0) if undefined
    [<DefaultValue(false)>]
    val mutable currentExtent: VkExtent2D
    /// Supported minimum image width and height for the surface
    [<DefaultValue(false)>]
    val mutable minImageExtent: VkExtent2D
    /// Supported maximum image width and height for the surface
    [<DefaultValue(false)>]
    val mutable maxImageExtent: VkExtent2D
    /// Supported maximum number of image layers for the surface
    [<DefaultValue(false)>]
    val mutable maxImageArrayLayers: uint32
    /// 1 or more bits representing the transforms supported
    [<DefaultValue(false)>]
    val mutable supportedTransforms: VkSurfaceTransformFlagsKHR
    /// The surface's current transform relative to the device's natural orientation
    [<DefaultValue(false)>]
    val mutable currentTransform: VkSurfaceTransformFlagBitsKHR
    /// 1 or more bits representing the alpha compositing modes supported
    [<DefaultValue(false)>]
    val mutable supportedCompositeAlpha: VkCompositeAlphaFlagsKHR
    /// Supported image usage flags for the surface
    [<DefaultValue(false)>]
    val mutable supportedUsageFlags: VkImageUsageFlags
    [<DefaultValue(false)>]
    val mutable supportedSurfaceCounters: VkSurfaceCounterFlagsEXT

type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkRenderPassMultiviewCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable subpassCount: uint32
    [<DefaultValue(false)>]
    val mutable pViewMasks: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable dependencyCount: uint32
    [<DefaultValue(false)>]
    val mutable pViewOffsets: nativeptr<int>
    [<DefaultValue(false)>]
    val mutable correlationMaskCount: uint32
    [<DefaultValue(false)>]
    val mutable pCorrelationMasks: nativeptr<uint32>

type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMultiviewProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// max number of views in a subpass
    [<DefaultValue(false)>]
    val mutable maxMultiviewViewCount: uint32
    /// max instance index for a draw in a multiview subpass
    [<DefaultValue(false)>]
    val mutable maxMultiviewInstanceIndex: uint32

type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMultiviewFeatures =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Multiple views in a renderpass
    [<DefaultValue(false)>]
    val mutable multiview: VkBool32
    /// Multiple views in a renderpass w/ geometry shader
    [<DefaultValue(false)>]
    val mutable multiviewGeometryShader: VkBool32
    /// Multiple views in a renderpass w/ tessellation shader
    [<DefaultValue(false)>]
    val mutable multiviewTessellationShader: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkFenceGetFdInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fence: VkFence
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalFenceHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkImportFenceFdInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fence: VkFence
    [<DefaultValue(false)>]
    val mutable flags: VkFenceImportFlags
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalFenceHandleTypeFlagBits
    [<DefaultValue(false)>]
    val mutable fd: int

[<Struct;NoEquality;NoComparison>]
type VkFenceGetWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fence: VkFence
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalFenceHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkExportFenceWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    [<DefaultValue(false)>]
    val mutable dwAccess: DWORD
    [<DefaultValue(false)>]
    val mutable name: LPCWSTR

[<Struct;NoEquality;NoComparison>]
type VkImportFenceWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable fence: VkFence
    [<DefaultValue(false)>]
    val mutable flags: VkFenceImportFlags
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalFenceHandleTypeFlagBits
    [<DefaultValue(false)>]
    val mutable handle: HANDLE
    [<DefaultValue(false)>]
    val mutable name: LPCWSTR

type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkExportFenceCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleTypes: VkExternalFenceHandleTypeFlags

type VkExternalFencePropertiesKHR = VkExternalFenceProperties

[<Struct;NoEquality;NoComparison>]
type VkExternalFenceProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags
    [<DefaultValue(false)>]
    val mutable compatibleHandleTypes: VkExternalFenceHandleTypeFlags
    [<DefaultValue(false)>]
    val mutable externalFenceFeatures: VkExternalFenceFeatureFlags

type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceExternalFenceInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalFenceHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkSemaphoreGetFdInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable semaphore: VkSemaphore
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkImportSemaphoreFdInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable semaphore: VkSemaphore
    [<DefaultValue(false)>]
    val mutable flags: VkSemaphoreImportFlags
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits
    [<DefaultValue(false)>]
    val mutable fd: int

[<Struct;NoEquality;NoComparison>]
type VkSemaphoreGetWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable semaphore: VkSemaphore
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkD3D12FenceSubmitInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable waitSemaphoreValuesCount: uint32
    [<DefaultValue(false)>]
    val mutable pWaitSemaphoreValues: nativeptr<uint64>
    [<DefaultValue(false)>]
    val mutable signalSemaphoreValuesCount: uint32
    [<DefaultValue(false)>]
    val mutable pSignalSemaphoreValues: nativeptr<uint64>

[<Struct;NoEquality;NoComparison>]
type VkExportSemaphoreWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    [<DefaultValue(false)>]
    val mutable dwAccess: DWORD
    [<DefaultValue(false)>]
    val mutable name: LPCWSTR

[<Struct;NoEquality;NoComparison>]
type VkImportSemaphoreWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable semaphore: VkSemaphore
    [<DefaultValue(false)>]
    val mutable flags: VkSemaphoreImportFlags
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits
    [<DefaultValue(false)>]
    val mutable handle: HANDLE
    [<DefaultValue(false)>]
    val mutable name: LPCWSTR

type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkExportSemaphoreCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleTypes: VkExternalSemaphoreHandleTypeFlags

type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties

[<Struct;NoEquality;NoComparison>]
type VkExternalSemaphoreProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags
    [<DefaultValue(false)>]
    val mutable compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags
    [<DefaultValue(false)>]
    val mutable externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags

type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceExternalSemaphoreInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalSemaphoreHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkWin32KeyedMutexAcquireReleaseInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable acquireCount: uint32
    [<DefaultValue(false)>]
    val mutable pAcquireSyncs: nativeptr<VkDeviceMemory>
    [<DefaultValue(false)>]
    val mutable pAcquireKeys: nativeptr<uint64>
    [<DefaultValue(false)>]
    val mutable pAcquireTimeouts: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable releaseCount: uint32
    [<DefaultValue(false)>]
    val mutable pReleaseSyncs: nativeptr<VkDeviceMemory>
    [<DefaultValue(false)>]
    val mutable pReleaseKeys: nativeptr<uint64>

[<Struct;NoEquality;NoComparison>]
type VkMemoryGetFdInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkMemoryFdPropertiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memoryTypeBits: uint32

[<Struct;NoEquality;NoComparison>]
type VkImportMemoryFdInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits
    [<DefaultValue(false)>]
    val mutable fd: int

[<Struct;NoEquality;NoComparison>]
type VkMemoryGetWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

[<Struct;NoEquality;NoComparison>]
type VkMemoryWin32HandlePropertiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memoryTypeBits: uint32

[<Struct;NoEquality;NoComparison>]
type VkExportMemoryWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    [<DefaultValue(false)>]
    val mutable dwAccess: DWORD
    [<DefaultValue(false)>]
    val mutable name: LPCWSTR

[<Struct;NoEquality;NoComparison>]
type VkImportMemoryWin32HandleInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits
    [<DefaultValue(false)>]
    val mutable handle: HANDLE
    [<DefaultValue(false)>]
    val mutable name: LPCWSTR

type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo

[<Struct;NoEquality;NoComparison>]
type VkExportMemoryAllocateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleTypes: VkExternalMemoryHandleTypeFlags

type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkExternalMemoryBufferCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleTypes: VkExternalMemoryHandleTypeFlags

type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo

[<Struct;NoEquality;NoComparison>]
type VkExternalMemoryImageCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleTypes: VkExternalMemoryHandleTypeFlags

type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceIDProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 16)>]
    val mutable deviceUUID: VkFixedArray_byte_16
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 16)>]
    val mutable driverUUID: VkFixedArray_byte_16
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 8)>]
    val mutable deviceLUID: VkFixedArray_byte_8
    [<DefaultValue(false)>]
    val mutable deviceNodeMask: uint32
    [<DefaultValue(false)>]
    val mutable deviceLUIDValid: VkBool32

type VkExternalBufferPropertiesKHR = VkExternalBufferProperties

[<Struct;NoEquality;NoComparison>]
type VkExternalBufferProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable externalMemoryProperties: VkExternalMemoryProperties

type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceExternalBufferInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkBufferCreateFlags
    [<DefaultValue(false)>]
    val mutable usage: VkBufferUsageFlags
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties

[<Struct;NoEquality;NoComparison>]
type VkExternalImageFormatProperties =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable externalMemoryProperties: VkExternalMemoryProperties

type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceExternalImageFormatInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagBits

type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties

[<Struct;NoEquality;NoComparison>]
type VkExternalMemoryProperties =
    [<DefaultValue(false)>]
    val mutable externalMemoryFeatures: VkExternalMemoryFeatureFlags
    [<DefaultValue(false)>]
    val mutable exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags
    [<DefaultValue(false)>]
    val mutable compatibleHandleTypes: VkExternalMemoryHandleTypeFlags

type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures

type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures

type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceVariablePointersFeatures =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable variablePointersStorageBuffer: VkBool32
    [<DefaultValue(false)>]
    val mutable variablePointers: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkRectLayerKHR =
    /// upper-left corner of a rectangle that has not changed, in pixels of a presentation images
    [<DefaultValue(false)>]
    val mutable offset: VkOffset2D
    /// Dimensions of a rectangle that has not changed, in pixels of a presentation images
    [<DefaultValue(false)>]
    val mutable extent: VkExtent2D
    /// Layer of a swapchain's image(s), for stereoscopic-3D images
    [<DefaultValue(false)>]
    val mutable layer: uint32

[<Struct;NoEquality;NoComparison>]
type VkPresentRegionKHR =
    /// Number of rectangles in pRectangles
    [<DefaultValue(false)>]
    val mutable rectangleCount: uint32
    /// Array of rectangles that have changed in a swapchain's image(s)
    [<DefaultValue(false)>]
    val mutable pRectangles: nativeptr<VkRectLayerKHR>

[<Struct;NoEquality;NoComparison>]
type VkPresentRegionsKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Copy of VkPresentInfoKHR::swapchainCount
    [<DefaultValue(false)>]
    val mutable swapchainCount: uint32
    /// The regions that have changed
    [<DefaultValue(false)>]
    val mutable pRegions: nativeptr<VkPresentRegionKHR>

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceDriverPropertiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable driverID: VkDriverIdKHR
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable driverName: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable driverInfo: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    val mutable conformanceVersion: VkConformanceVersionKHR

[<Struct;NoEquality;NoComparison>]
type VkConformanceVersionKHR =
    [<DefaultValue(false)>]
    val mutable major: byte
    [<DefaultValue(false)>]
    val mutable minor: byte
    [<DefaultValue(false)>]
    val mutable subminor: byte
    [<DefaultValue(false)>]
    val mutable patch: byte

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDevicePushDescriptorPropertiesKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxPushDescriptors: uint32

type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSparseImageFormatInfo2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable typ: VkImageType
    [<DefaultValue(false)>]
    val mutable samples: VkSampleCountFlagBits
    [<DefaultValue(false)>]
    val mutable usage: VkImageUsageFlags
    [<DefaultValue(false)>]
    val mutable tiling: VkImageTiling

type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2

[<Struct;NoEquality;NoComparison>]
type VkSparseImageFormatProperties2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable properties: VkSparseImageFormatProperties

type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMemoryProperties2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable memoryProperties: VkPhysicalDeviceMemoryProperties

type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2

[<Struct;NoEquality;NoComparison>]
type VkQueueFamilyProperties2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable queueFamilyProperties: VkQueueFamilyProperties

type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceImageFormatInfo2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable typ: VkImageType
    [<DefaultValue(false)>]
    val mutable tiling: VkImageTiling
    [<DefaultValue(false)>]
    val mutable usage: VkImageUsageFlags
    [<DefaultValue(false)>]
    val mutable flags: VkImageCreateFlags

type VkImageFormatProperties2KHR = VkImageFormatProperties2

[<Struct;NoEquality;NoComparison>]
type VkImageFormatProperties2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable imageFormatProperties: VkImageFormatProperties

type VkFormatProperties2KHR = VkFormatProperties2

[<Struct;NoEquality;NoComparison>]
type VkFormatProperties2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable formatProperties: VkFormatProperties

type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceProperties2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable properties: VkPhysicalDeviceProperties

type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceFeatures2 =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable features: VkPhysicalDeviceFeatures

[<Struct;NoEquality;NoComparison>]
type VkObjectTablePushConstantEntryNVX =
    [<DefaultValue(false)>]
    val mutable typ: VkObjectEntryTypeNVX
    [<DefaultValue(false)>]
    val mutable flags: VkObjectEntryUsageFlagsNVX
    [<DefaultValue(false)>]
    val mutable pipelineLayout: VkPipelineLayout
    [<DefaultValue(false)>]
    val mutable stageFlags: VkShaderStageFlags

[<Struct;NoEquality;NoComparison>]
type VkObjectTableIndexBufferEntryNVX =
    [<DefaultValue(false)>]
    val mutable typ: VkObjectEntryTypeNVX
    [<DefaultValue(false)>]
    val mutable flags: VkObjectEntryUsageFlagsNVX
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    [<DefaultValue(false)>]
    val mutable indexType: VkIndexType

[<Struct;NoEquality;NoComparison>]
type VkObjectTableVertexBufferEntryNVX =
    [<DefaultValue(false)>]
    val mutable typ: VkObjectEntryTypeNVX
    [<DefaultValue(false)>]
    val mutable flags: VkObjectEntryUsageFlagsNVX
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer

[<Struct;NoEquality;NoComparison>]
type VkObjectTableDescriptorSetEntryNVX =
    [<DefaultValue(false)>]
    val mutable typ: VkObjectEntryTypeNVX
    [<DefaultValue(false)>]
    val mutable flags: VkObjectEntryUsageFlagsNVX
    [<DefaultValue(false)>]
    val mutable pipelineLayout: VkPipelineLayout
    [<DefaultValue(false)>]
    val mutable descriptorSet: VkDescriptorSet

[<Struct;NoEquality;NoComparison>]
type VkObjectTablePipelineEntryNVX =
    [<DefaultValue(false)>]
    val mutable typ: VkObjectEntryTypeNVX
    [<DefaultValue(false)>]
    val mutable flags: VkObjectEntryUsageFlagsNVX
    [<DefaultValue(false)>]
    val mutable pipeline: VkPipeline

[<Struct;NoEquality;NoComparison>]
type VkObjectTableEntryNVX =
    [<DefaultValue(false)>]
    val mutable typ: VkObjectEntryTypeNVX
    [<DefaultValue(false)>]
    val mutable flags: VkObjectEntryUsageFlagsNVX

[<Struct;NoEquality;NoComparison>]
type VkObjectTableCreateInfoNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable objectCount: uint32
    [<DefaultValue(false)>]
    val mutable pObjectEntryTypes: nativeptr<VkObjectEntryTypeNVX>
    [<DefaultValue(false)>]
    val mutable pObjectEntryCounts: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable pObjectEntryUsageFlags: nativeptr<VkObjectEntryUsageFlagsNVX>
    [<DefaultValue(false)>]
    val mutable maxUniformBuffersPerDescriptor: uint32
    [<DefaultValue(false)>]
    val mutable maxStorageBuffersPerDescriptor: uint32
    [<DefaultValue(false)>]
    val mutable maxStorageImagesPerDescriptor: uint32
    [<DefaultValue(false)>]
    val mutable maxSampledImagesPerDescriptor: uint32
    [<DefaultValue(false)>]
    val mutable maxPipelineLayouts: uint32

[<Struct;NoEquality;NoComparison>]
type VkCmdReserveSpaceForCommandsInfoNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable objectTable: VkObjectTableNVX
    [<DefaultValue(false)>]
    val mutable indirectCommandsLayout: VkIndirectCommandsLayoutNVX
    [<DefaultValue(false)>]
    val mutable maxSequencesCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkCmdProcessCommandsInfoNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable objectTable: VkObjectTableNVX
    [<DefaultValue(false)>]
    val mutable indirectCommandsLayout: VkIndirectCommandsLayoutNVX
    [<DefaultValue(false)>]
    val mutable indirectCommandsTokenCount: uint32
    [<DefaultValue(false)>]
    val mutable pIndirectCommandsTokens: nativeptr<VkIndirectCommandsTokenNVX>
    [<DefaultValue(false)>]
    val mutable maxSequencesCount: uint32
    [<DefaultValue(false)>]
    val mutable targetCommandBuffer: VkCommandBuffer
    [<DefaultValue(false)>]
    val mutable sequencesCountBuffer: VkBuffer
    [<DefaultValue(false)>]
    val mutable sequencesCountOffset: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable sequencesIndexBuffer: VkBuffer
    [<DefaultValue(false)>]
    val mutable sequencesIndexOffset: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkIndirectCommandsLayoutCreateInfoNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pipelineBindPoint: VkPipelineBindPoint
    [<DefaultValue(false)>]
    val mutable flags: VkIndirectCommandsLayoutUsageFlagsNVX
    [<DefaultValue(false)>]
    val mutable tokenCount: uint32
    [<DefaultValue(false)>]
    val mutable pTokens: nativeptr<VkIndirectCommandsLayoutTokenNVX>

[<Struct;NoEquality;NoComparison>]
type VkIndirectCommandsLayoutTokenNVX =
    [<DefaultValue(false)>]
    val mutable tokenType: VkIndirectCommandsTokenTypeNVX
    /// Binding unit for vertex attribute / descriptor set, offset for pushconstants
    [<DefaultValue(false)>]
    val mutable bindingUnit: uint32
    /// Number of variable dynamic values for descriptor set / push constants
    [<DefaultValue(false)>]
    val mutable dynamicCount: uint32
    /// Rate the which the array is advanced per element (must be power of 2, minimum 1)
    [<DefaultValue(false)>]
    val mutable divisor: uint32

[<Struct;NoEquality;NoComparison>]
type VkIndirectCommandsTokenNVX =
    [<DefaultValue(false)>]
    val mutable tokenType: VkIndirectCommandsTokenTypeNVX
    /// buffer containing tableEntries and additional data for indirectCommands
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    /// offset from the base address of the buffer
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkDeviceGeneratedCommandsLimitsNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable maxIndirectCommandsLayoutTokenCount: uint32
    [<DefaultValue(false)>]
    val mutable maxObjectEntryCounts: uint32
    [<DefaultValue(false)>]
    val mutable minSequenceCountBufferOffsetAlignment: uint32
    [<DefaultValue(false)>]
    val mutable minSequenceIndexBufferOffsetAlignment: uint32
    [<DefaultValue(false)>]
    val mutable minCommandsTokenBufferOffsetAlignment: uint32

[<Struct;NoEquality;NoComparison>]
type VkDeviceGeneratedCommandsFeaturesNVX =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable computeBindingPointSupport: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkWin32KeyedMutexAcquireReleaseInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable acquireCount: uint32
    [<DefaultValue(false)>]
    val mutable pAcquireSyncs: nativeptr<VkDeviceMemory>
    [<DefaultValue(false)>]
    val mutable pAcquireKeys: nativeptr<uint64>
    [<DefaultValue(false)>]
    val mutable pAcquireTimeoutMilliseconds: nativeptr<uint32>
    [<DefaultValue(false)>]
    val mutable releaseCount: uint32
    [<DefaultValue(false)>]
    val mutable pReleaseSyncs: nativeptr<VkDeviceMemory>
    [<DefaultValue(false)>]
    val mutable pReleaseKeys: nativeptr<uint64>

[<Struct;NoEquality;NoComparison>]
type VkExportMemoryWin32HandleInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pAttributes: nativeptr<SECURITY_ATTRIBUTES>
    [<DefaultValue(false)>]
    val mutable dwAccess: DWORD

[<Struct;NoEquality;NoComparison>]
type VkImportMemoryWin32HandleInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleType: VkExternalMemoryHandleTypeFlagsNV
    [<DefaultValue(false)>]
    val mutable handle: HANDLE

[<Struct;NoEquality;NoComparison>]
type VkExportMemoryAllocateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleTypes: VkExternalMemoryHandleTypeFlagsNV

[<Struct;NoEquality;NoComparison>]
type VkExternalMemoryImageCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable handleTypes: VkExternalMemoryHandleTypeFlagsNV

[<Struct;NoEquality;NoComparison>]
type VkExternalImageFormatPropertiesNV =
    [<DefaultValue(false)>]
    val mutable imageFormatProperties: VkImageFormatProperties
    [<DefaultValue(false)>]
    val mutable externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV
    [<DefaultValue(false)>]
    val mutable exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV
    [<DefaultValue(false)>]
    val mutable compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV

[<Struct;NoEquality;NoComparison>]
type VkDedicatedAllocationMemoryAllocateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Image that this allocation will be bound to
    [<DefaultValue(false)>]
    val mutable image: VkImage
    /// Buffer that this allocation will be bound to
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer

[<Struct;NoEquality;NoComparison>]
type VkDedicatedAllocationBufferCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Whether this buffer uses a dedicated allocation
    [<DefaultValue(false)>]
    val mutable dedicatedAllocation: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkDedicatedAllocationImageCreateInfoNV =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Whether this image uses a dedicated allocation
    [<DefaultValue(false)>]
    val mutable dedicatedAllocation: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkDebugMarkerMarkerInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Name of the debug marker
    [<DefaultValue(false)>]
    val mutable pMarkerName: nativeptr<byte>
    /// Optional color for debug marker
    [<DefaultValue(false)>]
    val mutable color: float32

[<Struct;NoEquality;NoComparison>]
type VkDebugMarkerObjectTagInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// The type of the object
    [<DefaultValue(false)>]
    val mutable objectType: VkDebugReportObjectTypeEXT
    /// The handle of the object, cast to uint64_t
    [<DefaultValue(false)>]
    val mutable object: uint64
    /// The name of the tag to set on the object
    [<DefaultValue(false)>]
    val mutable tagName: uint64
    /// The length in bytes of the tag data
    [<DefaultValue(false)>]
    val mutable tagSize: unativeint
    /// Tag data to attach to the object
    [<DefaultValue(false)>]
    val mutable pTag: nativeint

[<Struct;NoEquality;NoComparison>]
type VkDebugMarkerObjectNameInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// The type of the object
    [<DefaultValue(false)>]
    val mutable objectType: VkDebugReportObjectTypeEXT
    /// The handle of the object, cast to uint64_t
    [<DefaultValue(false)>]
    val mutable object: uint64
    /// Name to apply to the object
    [<DefaultValue(false)>]
    val mutable pObjectName: nativeptr<byte>

[<Struct;NoEquality;NoComparison>]
type VkPipelineRasterizationStateRasterizationOrderAMD =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Rasterization order to use for the pipeline
    [<DefaultValue(false)>]
    val mutable rasterizationOrder: VkRasterizationOrderAMD

[<Struct;NoEquality;NoComparison>]
type VkValidationFeaturesEXT =
    /// Must be VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Number of validation features to enable
    [<DefaultValue(false)>]
    val mutable enabledValidationFeatureCount: uint32
    /// Validation features to enable
    [<DefaultValue(false)>]
    val mutable pEnabledValidationFeatures: nativeptr<VkValidationFeatureEnableEXT>
    /// Number of validation features to disable
    [<DefaultValue(false)>]
    val mutable disabledValidationFeatureCount: uint32
    /// Validation features to disable
    [<DefaultValue(false)>]
    val mutable pDisabledValidationFeatures: nativeptr<VkValidationFeatureDisableEXT>

[<Struct;NoEquality;NoComparison>]
type VkValidationFlagsEXT =
    /// Must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Number of validation checks to disable
    [<DefaultValue(false)>]
    val mutable disabledValidationCheckCount: uint32
    /// Validation checks to disable
    [<DefaultValue(false)>]
    val mutable pDisabledValidationChecks: nativeptr<VkValidationCheckEXT>

[<Struct;NoEquality;NoComparison>]
type VkDebugReportCallbackCreateInfoEXT =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Indicates which events call this callback
    [<DefaultValue(false)>]
    val mutable flags: VkDebugReportFlagsEXT
    /// Function pointer of a callback function
    [<DefaultValue(false)>]
    val mutable pfnCallback: PFN_vkDebugReportCallbackEXT
    /// User data provided to callback function
    [<DefaultValue(false)>]
    val mutable pUserData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkPresentInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Number of semaphores to wait for before presenting
    [<DefaultValue(false)>]
    val mutable waitSemaphoreCount: uint32
    /// Semaphores to wait for before presenting
    [<DefaultValue(false)>]
    val mutable pWaitSemaphores: nativeptr<VkSemaphore>
    /// Number of swapchains to present in this call
    [<DefaultValue(false)>]
    val mutable swapchainCount: uint32
    /// Swapchains to present an image from
    [<DefaultValue(false)>]
    val mutable pSwapchains: nativeptr<VkSwapchainKHR>
    /// Indices of which presentable images to present
    [<DefaultValue(false)>]
    val mutable pImageIndices: nativeptr<uint32>
    /// Optional (i.e. if non-NULL) VkResult for each swapchain
    [<DefaultValue(false)>]
    val mutable pResults: nativeptr<VkResult>

[<Struct;NoEquality;NoComparison>]
type VkSwapchainCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkSwapchainCreateFlagsKHR
    /// The swapchain's target surface
    [<DefaultValue(false)>]
    val mutable surface: VkSurfaceKHR
    /// Minimum number of presentation images the application needs
    [<DefaultValue(false)>]
    val mutable minImageCount: uint32
    /// Format of the presentation images
    [<DefaultValue(false)>]
    val mutable imageFormat: VkFormat
    /// Colorspace of the presentation images
    [<DefaultValue(false)>]
    val mutable imageColorSpace: VkColorSpaceKHR
    /// Dimensions of the presentation images
    [<DefaultValue(false)>]
    val mutable imageExtent: VkExtent2D
    /// Determines the number of views for multiview/stereo presentation
    [<DefaultValue(false)>]
    val mutable imageArrayLayers: uint32
    /// Bits indicating how the presentation images will be used
    [<DefaultValue(false)>]
    val mutable imageUsage: VkImageUsageFlags
    /// Sharing mode used for the presentation images
    [<DefaultValue(false)>]
    val mutable imageSharingMode: VkSharingMode
    /// Number of queue families having access to the images in case of concurrent sharing mode
    [<DefaultValue(false)>]
    val mutable queueFamilyIndexCount: uint32
    /// Array of queue family indices having access to the images in case of concurrent sharing mode
    [<DefaultValue(false)>]
    val mutable pQueueFamilyIndices: nativeptr<uint32>
    /// The transform, relative to the device's natural orientation, applied to the image content prior to presentation
    [<DefaultValue(false)>]
    val mutable preTransform: VkSurfaceTransformFlagBitsKHR
    /// The alpha blending mode used when compositing this surface with other surfaces in the window system
    [<DefaultValue(false)>]
    val mutable compositeAlpha: VkCompositeAlphaFlagBitsKHR
    /// Which presentation mode to use for presents on this swap chain
    [<DefaultValue(false)>]
    val mutable presentMode: VkPresentModeKHR
    /// Specifies whether presentable images may be affected by window clip regions
    [<DefaultValue(false)>]
    val mutable clipped: VkBool32
    /// Existing swap chain to replace, if any
    [<DefaultValue(false)>]
    val mutable oldSwapchain: VkSwapchainKHR

[<Struct;NoEquality;NoComparison>]
type VkSurfaceFormatKHR =
    /// Supported pair of rendering format
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    /// and color space for the surface
    [<DefaultValue(false)>]
    val mutable colorSpace: VkColorSpaceKHR

[<Struct;NoEquality;NoComparison>]
type VkStreamDescriptorSurfaceCreateInfoGGP =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkStreamDescriptorSurfaceCreateFlagsGGP
    [<DefaultValue(false)>]
    val mutable streamDescriptor: GgpStreamDescriptor

[<Struct;NoEquality;NoComparison>]
type VkImagePipeSurfaceCreateInfoFUCHSIA =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkImagePipeSurfaceCreateFlagsFUCHSIA
    [<DefaultValue(false)>]
    val mutable imagePipeHandle: zx_handle_t

[<Struct;NoEquality;NoComparison>]
type VkXcbSurfaceCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkXcbSurfaceCreateFlagsKHR
    [<DefaultValue(false)>]
    val mutable connection: nativeptr<xcb_connection_t>
    [<DefaultValue(false)>]
    val mutable window: xcb_window_t

[<Struct;NoEquality;NoComparison>]
type VkXlibSurfaceCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkXlibSurfaceCreateFlagsKHR
    [<DefaultValue(false)>]
    val mutable dpy: nativeptr<Display>
    [<DefaultValue(false)>]
    val mutable window: Window

[<Struct;NoEquality;NoComparison>]
type VkWin32SurfaceCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkWin32SurfaceCreateFlagsKHR
    [<DefaultValue(false)>]
    val mutable hinstance: HINSTANCE
    [<DefaultValue(false)>]
    val mutable hwnd: HWND

[<Struct;NoEquality;NoComparison>]
type VkWaylandSurfaceCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkWaylandSurfaceCreateFlagsKHR
    [<DefaultValue(false)>]
    val mutable display: nativeptr<wl_display>
    [<DefaultValue(false)>]
    val mutable surface: nativeptr<wl_surface>

[<Struct;NoEquality;NoComparison>]
type VkViSurfaceCreateInfoNN =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkViSurfaceCreateFlagsNN
    [<DefaultValue(false)>]
    val mutable window: nativeint

[<Struct;NoEquality;NoComparison>]
type VkAndroidSurfaceCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkAndroidSurfaceCreateFlagsKHR
    [<DefaultValue(false)>]
    val mutable window: nativeptr<ANativeWindow>

[<Struct;NoEquality;NoComparison>]
type VkSurfaceCapabilitiesKHR =
    /// Supported minimum number of images for the surface
    [<DefaultValue(false)>]
    val mutable minImageCount: uint32
    /// Supported maximum number of images for the surface, 0 for unlimited
    [<DefaultValue(false)>]
    val mutable maxImageCount: uint32
    /// Current image width and height for the surface, (0, 0) if undefined
    [<DefaultValue(false)>]
    val mutable currentExtent: VkExtent2D
    /// Supported minimum image width and height for the surface
    [<DefaultValue(false)>]
    val mutable minImageExtent: VkExtent2D
    /// Supported maximum image width and height for the surface
    [<DefaultValue(false)>]
    val mutable maxImageExtent: VkExtent2D
    /// Supported maximum number of image layers for the surface
    [<DefaultValue(false)>]
    val mutable maxImageArrayLayers: uint32
    /// 1 or more bits representing the transforms supported
    [<DefaultValue(false)>]
    val mutable supportedTransforms: VkSurfaceTransformFlagsKHR
    /// The surface's current transform relative to the device's natural orientation
    [<DefaultValue(false)>]
    val mutable currentTransform: VkSurfaceTransformFlagBitsKHR
    /// 1 or more bits representing the alpha compositing modes supported
    [<DefaultValue(false)>]
    val mutable supportedCompositeAlpha: VkCompositeAlphaFlagsKHR
    /// Supported image usage flags for the surface
    [<DefaultValue(false)>]
    val mutable supportedUsageFlags: VkImageUsageFlags

[<Struct;NoEquality;NoComparison>]
type VkDisplayPresentInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Rectangle within the presentable image to read pixel data from when presenting to the display.
    [<DefaultValue(false)>]
    val mutable srcRect: VkRect2D
    /// Rectangle within the current display mode's visible region to display srcRectangle in.
    [<DefaultValue(false)>]
    val mutable dstRect: VkRect2D
    /// For smart displays, use buffered mode.  If the display properties member "persistentMode" is VK_FALSE, this member must always be VK_FALSE.
    [<DefaultValue(false)>]
    val mutable persistent: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkDisplaySurfaceCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDisplaySurfaceCreateFlagsKHR
    /// The mode to use when displaying this surface
    [<DefaultValue(false)>]
    val mutable displayMode: VkDisplayModeKHR
    /// The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount.
    [<DefaultValue(false)>]
    val mutable planeIndex: uint32
    /// The z-order of the plane.
    [<DefaultValue(false)>]
    val mutable planeStackIndex: uint32
    /// Transform to apply to the images as part of the scanout operation
    [<DefaultValue(false)>]
    val mutable transform: VkSurfaceTransformFlagBitsKHR
    /// Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR
    [<DefaultValue(false)>]
    val mutable globalAlpha: float32
    /// What type of alpha blending to use.  Must be a bit from vkGetDisplayPlanePropertiesKHR::supportedAlpha.
    [<DefaultValue(false)>]
    val mutable alphaMode: VkDisplayPlaneAlphaFlagBitsKHR
    /// size of the images to use with this surface
    [<DefaultValue(false)>]
    val mutable imageExtent: VkExtent2D

[<Struct;NoEquality;NoComparison>]
type VkDisplayPlaneCapabilitiesKHR =
    /// Types of alpha blending supported, if any.
    [<DefaultValue(false)>]
    val mutable supportedAlpha: VkDisplayPlaneAlphaFlagsKHR
    /// Does the plane have any position and extent restrictions?
    [<DefaultValue(false)>]
    val mutable minSrcPosition: VkOffset2D
    [<DefaultValue(false)>]
    val mutable maxSrcPosition: VkOffset2D
    [<DefaultValue(false)>]
    val mutable minSrcExtent: VkExtent2D
    [<DefaultValue(false)>]
    val mutable maxSrcExtent: VkExtent2D
    [<DefaultValue(false)>]
    val mutable minDstPosition: VkOffset2D
    [<DefaultValue(false)>]
    val mutable maxDstPosition: VkOffset2D
    [<DefaultValue(false)>]
    val mutable minDstExtent: VkExtent2D
    [<DefaultValue(false)>]
    val mutable maxDstExtent: VkExtent2D

[<Struct;NoEquality;NoComparison>]
type VkDisplayModeCreateInfoKHR =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDisplayModeCreateFlagsKHR
    /// The parameters this mode uses.
    [<DefaultValue(false)>]
    val mutable parameters: VkDisplayModeParametersKHR

[<Struct;NoEquality;NoComparison>]
type VkDisplayModePropertiesKHR =
    /// Handle of this display mode.
    [<DefaultValue(false)>]
    val mutable displayMode: VkDisplayModeKHR
    /// The parameters this mode uses.
    [<DefaultValue(false)>]
    val mutable parameters: VkDisplayModeParametersKHR

[<Struct;NoEquality;NoComparison>]
type VkDisplayModeParametersKHR =
    /// Visible scanout region.
    [<DefaultValue(false)>]
    val mutable visibleRegion: VkExtent2D
    /// Number of times per second the display is updated.
    [<DefaultValue(false)>]
    val mutable refreshRate: uint32

[<Struct;NoEquality;NoComparison>]
type VkDisplayPlanePropertiesKHR =
    /// Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use.
    [<DefaultValue(false)>]
    val mutable currentDisplay: VkDisplayKHR
    /// Current z-order of the plane.
    [<DefaultValue(false)>]
    val mutable currentStackIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkDisplayPropertiesKHR =
    /// Handle of the display object
    [<DefaultValue(false)>]
    val mutable display: VkDisplayKHR
    /// Name of the display
    [<DefaultValue(false)>]
    val mutable displayName: nativeptr<byte>
    /// In millimeters?
    [<DefaultValue(false)>]
    val mutable physicalDimensions: VkExtent2D
    /// Max resolution for CRT?
    [<DefaultValue(false)>]
    val mutable physicalResolution: VkExtent2D
    /// one or more bits from VkSurfaceTransformFlagsKHR
    [<DefaultValue(false)>]
    val mutable supportedTransforms: VkSurfaceTransformFlagsKHR
    /// VK_TRUE if the overlay plane's z-order can be changed on this display.
    [<DefaultValue(false)>]
    val mutable planeReorderPossible: VkBool32
    /// VK_TRUE if this is a "smart" display that supports self-refresh/internal buffering.
    [<DefaultValue(false)>]
    val mutable persistentContent: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkSubmitInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable waitSemaphoreCount: uint32
    [<DefaultValue(false)>]
    val mutable pWaitSemaphores: nativeptr<VkSemaphore>
    [<DefaultValue(false)>]
    val mutable pWaitDstStageMask: nativeptr<VkPipelineStageFlags>
    [<DefaultValue(false)>]
    val mutable commandBufferCount: uint32
    [<DefaultValue(false)>]
    val mutable pCommandBuffers: nativeptr<VkCommandBuffer>
    [<DefaultValue(false)>]
    val mutable signalSemaphoreCount: uint32
    [<DefaultValue(false)>]
    val mutable pSignalSemaphores: nativeptr<VkSemaphore>

[<Struct;NoEquality;NoComparison>]
type VkDispatchIndirectCommand =
    [<DefaultValue(false)>]
    val mutable x: uint32
    [<DefaultValue(false)>]
    val mutable y: uint32
    [<DefaultValue(false)>]
    val mutable z: uint32

[<Struct;NoEquality;NoComparison>]
type VkDrawIndexedIndirectCommand =
    [<DefaultValue(false)>]
    val mutable indexCount: uint32
    [<DefaultValue(false)>]
    val mutable instanceCount: uint32
    [<DefaultValue(false)>]
    val mutable firstIndex: uint32
    [<DefaultValue(false)>]
    val mutable vertexOffset: int
    [<DefaultValue(false)>]
    val mutable firstInstance: uint32

[<Struct;NoEquality;NoComparison>]
type VkDrawIndirectCommand =
    [<DefaultValue(false)>]
    val mutable vertexCount: uint32
    [<DefaultValue(false)>]
    val mutable instanceCount: uint32
    [<DefaultValue(false)>]
    val mutable firstVertex: uint32
    [<DefaultValue(false)>]
    val mutable firstInstance: uint32

[<Struct;NoEquality;NoComparison>]
type VkFramebufferCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkFramebufferCreateFlags
    [<DefaultValue(false)>]
    val mutable renderPass: VkRenderPass
    [<DefaultValue(false)>]
    val mutable attachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pAttachments: nativeptr<VkImageView>
    [<DefaultValue(false)>]
    val mutable width: uint32
    [<DefaultValue(false)>]
    val mutable height: uint32
    [<DefaultValue(false)>]
    val mutable layers: uint32

[<Struct;NoEquality;NoComparison>]
type VkQueryPoolCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkQueryPoolCreateFlags
    [<DefaultValue(false)>]
    val mutable queryType: VkQueryType
    [<DefaultValue(false)>]
    val mutable queryCount: uint32
    /// Optional
    [<DefaultValue(false)>]
    val mutable pipelineStatistics: VkQueryPipelineStatisticFlags

[<Struct;NoEquality;NoComparison>]
type VkSemaphoreCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Semaphore creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkSemaphoreCreateFlags

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceLimits =
    /// max 1D image dimension
    [<DefaultValue(false)>]
    val mutable maxImageDimension1D: uint32
    /// max 2D image dimension
    [<DefaultValue(false)>]
    val mutable maxImageDimension2D: uint32
    /// max 3D image dimension
    [<DefaultValue(false)>]
    val mutable maxImageDimension3D: uint32
    /// max cubemap image dimension
    [<DefaultValue(false)>]
    val mutable maxImageDimensionCube: uint32
    /// max layers for image arrays
    [<DefaultValue(false)>]
    val mutable maxImageArrayLayers: uint32
    /// max texel buffer size (fstexels)
    [<DefaultValue(false)>]
    val mutable maxTexelBufferElements: uint32
    /// max uniform buffer range (bytes)
    [<DefaultValue(false)>]
    val mutable maxUniformBufferRange: uint32
    /// max storage buffer range (bytes)
    [<DefaultValue(false)>]
    val mutable maxStorageBufferRange: uint32
    /// max size of the push constants pool (bytes)
    [<DefaultValue(false)>]
    val mutable maxPushConstantsSize: uint32
    /// max number of device memory allocations supported
    [<DefaultValue(false)>]
    val mutable maxMemoryAllocationCount: uint32
    /// max number of samplers that can be allocated on a device
    [<DefaultValue(false)>]
    val mutable maxSamplerAllocationCount: uint32
    /// Granularity (in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage
    [<DefaultValue(false)>]
    val mutable bufferImageGranularity: VkDeviceSize
    /// Total address space available for sparse allocations (bytes)
    [<DefaultValue(false)>]
    val mutable sparseAddressSpaceSize: VkDeviceSize
    /// max number of descriptors sets that can be bound to a pipeline
    [<DefaultValue(false)>]
    val mutable maxBoundDescriptorSets: uint32
    /// max number of samplers allowed per-stage in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorSamplers: uint32
    /// max number of uniform buffers allowed per-stage in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorUniformBuffers: uint32
    /// max number of storage buffers allowed per-stage in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorStorageBuffers: uint32
    /// max number of sampled images allowed per-stage in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorSampledImages: uint32
    /// max number of storage images allowed per-stage in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorStorageImages: uint32
    /// max number of input attachments allowed per-stage in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxPerStageDescriptorInputAttachments: uint32
    /// max number of resources allowed by a single stage
    [<DefaultValue(false)>]
    val mutable maxPerStageResources: uint32
    /// max number of samplers allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetSamplers: uint32
    /// max number of uniform buffers allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUniformBuffers: uint32
    /// max number of dynamic uniform buffers allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetUniformBuffersDynamic: uint32
    /// max number of storage buffers allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetStorageBuffers: uint32
    /// max number of dynamic storage buffers allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetStorageBuffersDynamic: uint32
    /// max number of sampled images allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetSampledImages: uint32
    /// max number of storage images allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetStorageImages: uint32
    /// max number of input attachments allowed in all stages in a descriptor set
    [<DefaultValue(false)>]
    val mutable maxDescriptorSetInputAttachments: uint32
    /// max number of vertex input attribute slots
    [<DefaultValue(false)>]
    val mutable maxVertexInputAttributes: uint32
    /// max number of vertex input binding slots
    [<DefaultValue(false)>]
    val mutable maxVertexInputBindings: uint32
    /// max vertex input attribute offset added to vertex buffer offset
    [<DefaultValue(false)>]
    val mutable maxVertexInputAttributeOffset: uint32
    /// max vertex input binding stride
    [<DefaultValue(false)>]
    val mutable maxVertexInputBindingStride: uint32
    /// max number of output components written by vertex shader
    [<DefaultValue(false)>]
    val mutable maxVertexOutputComponents: uint32
    /// max level supported by tessellation primitive generator
    [<DefaultValue(false)>]
    val mutable maxTessellationGenerationLevel: uint32
    /// max patch size (vertices)
    [<DefaultValue(false)>]
    val mutable maxTessellationPatchSize: uint32
    /// max number of input components per-vertex in TCS
    [<DefaultValue(false)>]
    val mutable maxTessellationControlPerVertexInputComponents: uint32
    /// max number of output components per-vertex in TCS
    [<DefaultValue(false)>]
    val mutable maxTessellationControlPerVertexOutputComponents: uint32
    /// max number of output components per-patch in TCS
    [<DefaultValue(false)>]
    val mutable maxTessellationControlPerPatchOutputComponents: uint32
    /// max total number of per-vertex and per-patch output components in TCS
    [<DefaultValue(false)>]
    val mutable maxTessellationControlTotalOutputComponents: uint32
    /// max number of input components per vertex in TES
    [<DefaultValue(false)>]
    val mutable maxTessellationEvaluationInputComponents: uint32
    /// max number of output components per vertex in TES
    [<DefaultValue(false)>]
    val mutable maxTessellationEvaluationOutputComponents: uint32
    /// max invocation count supported in geometry shader
    [<DefaultValue(false)>]
    val mutable maxGeometryShaderInvocations: uint32
    /// max number of input components read in geometry stage
    [<DefaultValue(false)>]
    val mutable maxGeometryInputComponents: uint32
    /// max number of output components written in geometry stage
    [<DefaultValue(false)>]
    val mutable maxGeometryOutputComponents: uint32
    /// max number of vertices that can be emitted in geometry stage
    [<DefaultValue(false)>]
    val mutable maxGeometryOutputVertices: uint32
    /// max total number of components (all vertices) written in geometry stage
    [<DefaultValue(false)>]
    val mutable maxGeometryTotalOutputComponents: uint32
    /// max number of input components read in fragment stage
    [<DefaultValue(false)>]
    val mutable maxFragmentInputComponents: uint32
    /// max number of output attachments written in fragment stage
    [<DefaultValue(false)>]
    val mutable maxFragmentOutputAttachments: uint32
    /// max number of output attachments written when using dual source blending
    [<DefaultValue(false)>]
    val mutable maxFragmentDualSrcAttachments: uint32
    /// max total number of storage buffers, storage images and output buffers
    [<DefaultValue(false)>]
    val mutable maxFragmentCombinedOutputResources: uint32
    /// max total storage size of work group local storage (bytes)
    [<DefaultValue(false)>]
    val mutable maxComputeSharedMemorySize: uint32
    /// max num of compute work groups that may be dispatched by a single command (x,y,z)
    [<DefaultValue(false)>]
    val mutable maxComputeWorkGroupCount: uint32
    /// max total compute invocations in a single local work group
    [<DefaultValue(false)>]
    val mutable maxComputeWorkGroupInvocations: uint32
    /// max local size of a compute work group (x,y,z)
    [<DefaultValue(false)>]
    val mutable maxComputeWorkGroupSize: uint32
    /// number bits of subpixel precision in screen x and y
    [<DefaultValue(false)>]
    val mutable subPixelPrecisionBits: uint32
    /// number bits of precision for selecting texel weights
    [<DefaultValue(false)>]
    val mutable subTexelPrecisionBits: uint32
    /// number bits of precision for selecting mipmap weights
    [<DefaultValue(false)>]
    val mutable mipmapPrecisionBits: uint32
    /// max index value for indexed draw calls (for 32-bit indices)
    [<DefaultValue(false)>]
    val mutable maxDrawIndexedIndexValue: uint32
    /// max draw count for indirect draw calls
    [<DefaultValue(false)>]
    val mutable maxDrawIndirectCount: uint32
    /// max absolute sampler LOD bias
    [<DefaultValue(false)>]
    val mutable maxSamplerLodBias: float32
    /// max degree of sampler anisotropy
    [<DefaultValue(false)>]
    val mutable maxSamplerAnisotropy: float32
    /// max number of active viewports
    [<DefaultValue(false)>]
    val mutable maxViewports: uint32
    /// max viewport dimensions (x,y)
    [<DefaultValue(false)>]
    val mutable maxViewportDimensions: uint32
    /// viewport bounds range (min,max)
    [<DefaultValue(false)>]
    val mutable viewportBoundsRange: float32
    /// number bits of subpixel precision for viewport
    [<DefaultValue(false)>]
    val mutable viewportSubPixelBits: uint32
    /// min required alignment of pointers returned by MapMemory (bytes)
    [<DefaultValue(false)>]
    val mutable minMemoryMapAlignment: unativeint
    /// min required alignment for texel buffer offsets (bytes) 
    [<DefaultValue(false)>]
    val mutable minTexelBufferOffsetAlignment: VkDeviceSize
    /// min required alignment for uniform buffer sizes and offsets (bytes)
    [<DefaultValue(false)>]
    val mutable minUniformBufferOffsetAlignment: VkDeviceSize
    /// min required alignment for storage buffer offsets (bytes)
    [<DefaultValue(false)>]
    val mutable minStorageBufferOffsetAlignment: VkDeviceSize
    /// min texel offset for OpTextureSampleOffset
    [<DefaultValue(false)>]
    val mutable minTexelOffset: int
    /// max texel offset for OpTextureSampleOffset
    [<DefaultValue(false)>]
    val mutable maxTexelOffset: uint32
    /// min texel offset for OpTextureGatherOffset
    [<DefaultValue(false)>]
    val mutable minTexelGatherOffset: int
    /// max texel offset for OpTextureGatherOffset
    [<DefaultValue(false)>]
    val mutable maxTexelGatherOffset: uint32
    /// furthest negative offset for interpolateAtOffset
    [<DefaultValue(false)>]
    val mutable minInterpolationOffset: float32
    /// furthest positive offset for interpolateAtOffset
    [<DefaultValue(false)>]
    val mutable maxInterpolationOffset: float32
    /// number of subpixel bits for interpolateAtOffset
    [<DefaultValue(false)>]
    val mutable subPixelInterpolationOffsetBits: uint32
    /// max width for a framebuffer
    [<DefaultValue(false)>]
    val mutable maxFramebufferWidth: uint32
    /// max height for a framebuffer
    [<DefaultValue(false)>]
    val mutable maxFramebufferHeight: uint32
    /// max layer count for a layered framebuffer
    [<DefaultValue(false)>]
    val mutable maxFramebufferLayers: uint32
    /// supported color sample counts for a framebuffer
    [<DefaultValue(false)>]
    val mutable framebufferColorSampleCounts: VkSampleCountFlags
    /// supported depth sample counts for a framebuffer
    [<DefaultValue(false)>]
    val mutable framebufferDepthSampleCounts: VkSampleCountFlags
    /// supported stencil sample counts for a framebuffer
    [<DefaultValue(false)>]
    val mutable framebufferStencilSampleCounts: VkSampleCountFlags
    /// supported sample counts for a framebuffer with no attachments
    [<DefaultValue(false)>]
    val mutable framebufferNoAttachmentsSampleCounts: VkSampleCountFlags
    /// max number of color attachments per subpass
    [<DefaultValue(false)>]
    val mutable maxColorAttachments: uint32
    /// supported color sample counts for a non-integer sampled image
    [<DefaultValue(false)>]
    val mutable sampledImageColorSampleCounts: VkSampleCountFlags
    /// supported sample counts for an integer image
    [<DefaultValue(false)>]
    val mutable sampledImageIntegerSampleCounts: VkSampleCountFlags
    /// supported depth sample counts for a sampled image
    [<DefaultValue(false)>]
    val mutable sampledImageDepthSampleCounts: VkSampleCountFlags
    /// supported stencil sample counts for a sampled image
    [<DefaultValue(false)>]
    val mutable sampledImageStencilSampleCounts: VkSampleCountFlags
    /// supported sample counts for a storage image
    [<DefaultValue(false)>]
    val mutable storageImageSampleCounts: VkSampleCountFlags
    /// max number of sample mask words
    [<DefaultValue(false)>]
    val mutable maxSampleMaskWords: uint32
    /// timestamps on graphics and compute queues
    [<DefaultValue(false)>]
    val mutable timestampComputeAndGraphics: VkBool32
    /// number of nanoseconds it takes for timestamp query value to increment by 1
    [<DefaultValue(false)>]
    val mutable timestampPeriod: float32
    /// max number of clip distances
    [<DefaultValue(false)>]
    val mutable maxClipDistances: uint32
    /// max number of cull distances
    [<DefaultValue(false)>]
    val mutable maxCullDistances: uint32
    /// max combined number of user clipping
    [<DefaultValue(false)>]
    val mutable maxCombinedClipAndCullDistances: uint32
    /// distinct queue priorities available 
    [<DefaultValue(false)>]
    val mutable discreteQueuePriorities: uint32
    /// range (min,max) of supported point sizes
    [<DefaultValue(false)>]
    val mutable pointSizeRange: float32
    /// range (min,max) of supported line widths
    [<DefaultValue(false)>]
    val mutable lineWidthRange: float32
    /// granularity of supported point sizes
    [<DefaultValue(false)>]
    val mutable pointSizeGranularity: float32
    /// granularity of supported line widths
    [<DefaultValue(false)>]
    val mutable lineWidthGranularity: float32
    /// line rasterization follows preferred rules
    [<DefaultValue(false)>]
    val mutable strictLines: VkBool32
    /// supports standard sample locations for all supported sample counts
    [<DefaultValue(false)>]
    val mutable standardSampleLocations: VkBool32
    /// optimal offset of buffer copies
    [<DefaultValue(false)>]
    val mutable optimalBufferCopyOffsetAlignment: VkDeviceSize
    /// optimal pitch of buffer copies
    [<DefaultValue(false)>]
    val mutable optimalBufferCopyRowPitchAlignment: VkDeviceSize
    /// minimum size and alignment for non-coherent host-mapped device memory access
    [<DefaultValue(false)>]
    val mutable nonCoherentAtomSize: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceSparseProperties =
    /// Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard sparse image block shapes (based on pixel format)
    [<DefaultValue(false)>]
    val mutable residencyStandard2DBlockShape: VkBool32
    /// Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard sparse image block shapes (based on pixel format)
    [<DefaultValue(false)>]
    val mutable residencyStandard2DMultisampleBlockShape: VkBool32
    /// Sparse resources support: GPU will access all 3D sparse resources using the standard sparse image block shapes (based on pixel format)
    [<DefaultValue(false)>]
    val mutable residencyStandard3DBlockShape: VkBool32
    /// Sparse resources support: Images with mip level dimensions that are NOT a multiple of the sparse image block dimensions will be placed in the mip tail
    [<DefaultValue(false)>]
    val mutable residencyAlignedMipSize: VkBool32
    /// Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded
    [<DefaultValue(false)>]
    val mutable residencyNonResidentStrict: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceFeatures =
    /// out of bounds buffer accesses are well defined
    [<DefaultValue(false)>]
    val mutable robustBufferAccess: VkBool32
    /// full 32-bit range of indices for indexed draw calls
    [<DefaultValue(false)>]
    val mutable fullDrawIndexUint32: VkBool32
    /// image views which are arrays of cube maps
    [<DefaultValue(false)>]
    val mutable imageCubeArray: VkBool32
    /// blending operations are controlled per-attachment
    [<DefaultValue(false)>]
    val mutable independentBlend: VkBool32
    /// geometry stage
    [<DefaultValue(false)>]
    val mutable geometryShader: VkBool32
    /// tessellation control and evaluation stage
    [<DefaultValue(false)>]
    val mutable tessellationShader: VkBool32
    /// per-sample shading and interpolation
    [<DefaultValue(false)>]
    val mutable sampleRateShading: VkBool32
    /// blend operations which take two sources
    [<DefaultValue(false)>]
    val mutable dualSrcBlend: VkBool32
    /// logic operations
    [<DefaultValue(false)>]
    val mutable logicOp: VkBool32
    /// multi draw indirect
    [<DefaultValue(false)>]
    val mutable multiDrawIndirect: VkBool32
    /// indirect draws can use non-zero firstInstance
    [<DefaultValue(false)>]
    val mutable drawIndirectFirstInstance: VkBool32
    /// depth clamping
    [<DefaultValue(false)>]
    val mutable depthClamp: VkBool32
    /// depth bias clamping
    [<DefaultValue(false)>]
    val mutable depthBiasClamp: VkBool32
    /// point and wireframe fill modes
    [<DefaultValue(false)>]
    val mutable fillModeNonSolid: VkBool32
    /// depth bounds test
    [<DefaultValue(false)>]
    val mutable depthBounds: VkBool32
    /// lines with width greater than 1
    [<DefaultValue(false)>]
    val mutable wideLines: VkBool32
    /// points with size greater than 1
    [<DefaultValue(false)>]
    val mutable largePoints: VkBool32
    /// the fragment alpha component can be forced to maximum representable alpha value
    [<DefaultValue(false)>]
    val mutable alphaToOne: VkBool32
    /// viewport arrays
    [<DefaultValue(false)>]
    val mutable multiViewport: VkBool32
    /// anisotropic sampler filtering
    [<DefaultValue(false)>]
    val mutable samplerAnisotropy: VkBool32
    /// ETC texture compression formats
    [<DefaultValue(false)>]
    val mutable textureCompressionETC2: VkBool32
    /// ASTC LDR texture compression formats
    [<DefaultValue(false)>]
    val mutable textureCompressionASTC_LDR: VkBool32
    /// BC1-7 texture compressed formats
    [<DefaultValue(false)>]
    val mutable textureCompressionBC: VkBool32
    /// precise occlusion queries returning actual sample counts
    [<DefaultValue(false)>]
    val mutable occlusionQueryPrecise: VkBool32
    /// pipeline statistics query
    [<DefaultValue(false)>]
    val mutable pipelineStatisticsQuery: VkBool32
    /// stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages
    [<DefaultValue(false)>]
    val mutable vertexPipelineStoresAndAtomics: VkBool32
    /// stores and atomic ops on storage buffers and images are supported in the fragment stage
    [<DefaultValue(false)>]
    val mutable fragmentStoresAndAtomics: VkBool32
    /// tessellation and geometry stages can export point size
    [<DefaultValue(false)>]
    val mutable shaderTessellationAndGeometryPointSize: VkBool32
    /// image gather with run-time values and independent offsets
    [<DefaultValue(false)>]
    val mutable shaderImageGatherExtended: VkBool32
    /// the extended set of formats can be used for storage images
    [<DefaultValue(false)>]
    val mutable shaderStorageImageExtendedFormats: VkBool32
    /// multisample images can be used for storage images
    [<DefaultValue(false)>]
    val mutable shaderStorageImageMultisample: VkBool32
    /// read from storage image does not require format qualifier
    [<DefaultValue(false)>]
    val mutable shaderStorageImageReadWithoutFormat: VkBool32
    /// write to storage image does not require format qualifier
    [<DefaultValue(false)>]
    val mutable shaderStorageImageWriteWithoutFormat: VkBool32
    /// arrays of uniform buffers can be accessed with dynamically uniform indices
    [<DefaultValue(false)>]
    val mutable shaderUniformBufferArrayDynamicIndexing: VkBool32
    /// arrays of sampled images can be accessed with dynamically uniform indices
    [<DefaultValue(false)>]
    val mutable shaderSampledImageArrayDynamicIndexing: VkBool32
    /// arrays of storage buffers can be accessed with dynamically uniform indices
    [<DefaultValue(false)>]
    val mutable shaderStorageBufferArrayDynamicIndexing: VkBool32
    /// arrays of storage images can be accessed with dynamically uniform indices
    [<DefaultValue(false)>]
    val mutable shaderStorageImageArrayDynamicIndexing: VkBool32
    /// clip distance in shaders
    [<DefaultValue(false)>]
    val mutable shaderClipDistance: VkBool32
    /// cull distance in shaders
    [<DefaultValue(false)>]
    val mutable shaderCullDistance: VkBool32
    /// 64-bit floats (doubles) in shaders
    [<DefaultValue(false)>]
    val mutable shaderFloat64: VkBool32
    /// 64-bit integers in shaders
    [<DefaultValue(false)>]
    val mutable shaderInt64: VkBool32
    /// 16-bit integers in shaders
    [<DefaultValue(false)>]
    val mutable shaderInt16: VkBool32
    /// shader can use texture operations that return resource residency information (requires sparseNonResident support)
    [<DefaultValue(false)>]
    val mutable shaderResourceResidency: VkBool32
    /// shader can use texture operations that specify minimum resource LOD
    [<DefaultValue(false)>]
    val mutable shaderResourceMinLod: VkBool32
    /// Sparse resources support: Resource memory can be managed at opaque page level rather than object level
    [<DefaultValue(false)>]
    val mutable sparseBinding: VkBool32
    /// Sparse resources support: GPU can access partially resident buffers 
    [<DefaultValue(false)>]
    val mutable sparseResidencyBuffer: VkBool32
    /// Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images 
    [<DefaultValue(false)>]
    val mutable sparseResidencyImage2D: VkBool32
    /// Sparse resources support: GPU can access partially resident 3D images 
    [<DefaultValue(false)>]
    val mutable sparseResidencyImage3D: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples
    [<DefaultValue(false)>]
    val mutable sparseResidency2Samples: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples
    [<DefaultValue(false)>]
    val mutable sparseResidency4Samples: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples
    [<DefaultValue(false)>]
    val mutable sparseResidency8Samples: VkBool32
    /// Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples
    [<DefaultValue(false)>]
    val mutable sparseResidency16Samples: VkBool32
    /// Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in)
    [<DefaultValue(false)>]
    val mutable sparseResidencyAliased: VkBool32
    /// multisample rate must be the same for all pipelines in a subpass
    [<DefaultValue(false)>]
    val mutable variableMultisampleRate: VkBool32
    /// Queries may be inherited from primary to secondary command buffers
    [<DefaultValue(false)>]
    val mutable inheritedQueries: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkFenceCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Fence creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkFenceCreateFlags

[<Struct;NoEquality;NoComparison>]
type VkEventCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Event creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkEventCreateFlags

[<Struct;NoEquality;NoComparison>]
type VkRenderPassCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkRenderPassCreateFlags
    [<DefaultValue(false)>]
    val mutable attachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pAttachments: nativeptr<VkAttachmentDescription>
    [<DefaultValue(false)>]
    val mutable subpassCount: uint32
    [<DefaultValue(false)>]
    val mutable pSubpasses: nativeptr<VkSubpassDescription>
    [<DefaultValue(false)>]
    val mutable dependencyCount: uint32
    [<DefaultValue(false)>]
    val mutable pDependencies: nativeptr<VkSubpassDependency>

[<Struct;NoEquality;NoComparison>]
type VkSubpassDependency =
    [<DefaultValue(false)>]
    val mutable srcSubpass: uint32
    [<DefaultValue(false)>]
    val mutable dstSubpass: uint32
    [<DefaultValue(false)>]
    val mutable srcStageMask: VkPipelineStageFlags
    [<DefaultValue(false)>]
    val mutable dstStageMask: VkPipelineStageFlags
    /// Memory accesses from the source of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable dstAccessMask: VkAccessFlags
    [<DefaultValue(false)>]
    val mutable dependencyFlags: VkDependencyFlags

[<Struct;NoEquality;NoComparison>]
type VkSubpassDescription =
    [<DefaultValue(false)>]
    val mutable flags: VkSubpassDescriptionFlags
    /// Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now
    [<DefaultValue(false)>]
    val mutable pipelineBindPoint: VkPipelineBindPoint
    [<DefaultValue(false)>]
    val mutable inputAttachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pInputAttachments: nativeptr<VkAttachmentReference>
    [<DefaultValue(false)>]
    val mutable colorAttachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pColorAttachments: nativeptr<VkAttachmentReference>
    [<DefaultValue(false)>]
    val mutable pResolveAttachments: nativeptr<VkAttachmentReference>
    [<DefaultValue(false)>]
    val mutable pDepthStencilAttachment: nativeptr<VkAttachmentReference>
    [<DefaultValue(false)>]
    val mutable preserveAttachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pPreserveAttachments: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkAttachmentReference =
    [<DefaultValue(false)>]
    val mutable attachment: uint32
    [<DefaultValue(false)>]
    val mutable layout: VkImageLayout

[<Struct;NoEquality;NoComparison>]
type VkAttachmentDescription =
    [<DefaultValue(false)>]
    val mutable flags: VkAttachmentDescriptionFlags
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable samples: VkSampleCountFlagBits
    /// Load operation for color or depth data
    [<DefaultValue(false)>]
    val mutable loadOp: VkAttachmentLoadOp
    /// Store operation for color or depth data
    [<DefaultValue(false)>]
    val mutable storeOp: VkAttachmentStoreOp
    /// Load operation for stencil data
    [<DefaultValue(false)>]
    val mutable stencilLoadOp: VkAttachmentLoadOp
    /// Store operation for stencil data
    [<DefaultValue(false)>]
    val mutable stencilStoreOp: VkAttachmentStoreOp
    [<DefaultValue(false)>]
    val mutable initialLayout: VkImageLayout
    [<DefaultValue(false)>]
    val mutable finalLayout: VkImageLayout

[<Struct;NoEquality;NoComparison>]
type VkClearAttachment =
    [<DefaultValue(false)>]
    val mutable aspectMask: VkImageAspectFlags
    [<DefaultValue(false)>]
    val mutable colorAttachment: uint32
    [<DefaultValue(false)>]
    val mutable clearValue: VkClearValue

/// // Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared.
[<Struct;StructLayout(LayoutKind.Explicit);NoEquality;NoComparison>]
type VkClearValue =
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable color: VkClearColorValue
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable depthStencil: VkClearDepthStencilValue

[<Struct;NoEquality;NoComparison>]
type VkClearDepthStencilValue =
    [<DefaultValue(false)>]
    val mutable depth: float32
    [<DefaultValue(false)>]
    val mutable stencil: uint32

/// // Union allowing specification of floating point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared.
[<Struct;StructLayout(LayoutKind.Explicit);NoEquality;NoComparison>]
type VkClearColorValue =
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable float32: float32
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable int32: int
    [<FieldOffset(0);DefaultValue(false)>]
    val mutable uint32: uint32

[<Struct;NoEquality;NoComparison>]
type VkRenderPassBeginInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable renderPass: VkRenderPass
    [<DefaultValue(false)>]
    val mutable framebuffer: VkFramebuffer
    [<DefaultValue(false)>]
    val mutable renderArea: VkRect2D
    [<DefaultValue(false)>]
    val mutable clearValueCount: uint32
    [<DefaultValue(false)>]
    val mutable pClearValues: nativeptr<VkClearValue>

[<Struct;NoEquality;NoComparison>]
type VkCommandBufferBeginInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Command buffer usage flags
    [<DefaultValue(false)>]
    val mutable flags: VkCommandBufferUsageFlags
    /// Pointer to inheritance info for secondary command buffers
    [<DefaultValue(false)>]
    val mutable pInheritanceInfo: nativeptr<VkCommandBufferInheritanceInfo>

[<Struct;NoEquality;NoComparison>]
type VkCommandBufferInheritanceInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Render pass for secondary command buffers
    [<DefaultValue(false)>]
    val mutable renderPass: VkRenderPass
    [<DefaultValue(false)>]
    val mutable subpass: uint32
    /// Framebuffer for secondary command buffers
    [<DefaultValue(false)>]
    val mutable framebuffer: VkFramebuffer
    /// Whether this secondary command buffer may be executed during an occlusion query
    [<DefaultValue(false)>]
    val mutable occlusionQueryEnable: VkBool32
    /// Query flags used by this secondary command buffer, if executed during an occlusion query
    [<DefaultValue(false)>]
    val mutable queryFlags: VkQueryControlFlags
    /// Pipeline statistics that may be counted for this secondary command buffer
    [<DefaultValue(false)>]
    val mutable pipelineStatistics: VkQueryPipelineStatisticFlags

[<Struct;NoEquality;NoComparison>]
type VkCommandBufferAllocateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable commandPool: VkCommandPool
    [<DefaultValue(false)>]
    val mutable level: VkCommandBufferLevel
    [<DefaultValue(false)>]
    val mutable commandBufferCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkCommandPoolCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Command pool creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkCommandPoolCreateFlags
    [<DefaultValue(false)>]
    val mutable queueFamilyIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkSamplerCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkSamplerCreateFlags
    /// Filter mode for magnification
    [<DefaultValue(false)>]
    val mutable magFilter: VkFilter
    /// Filter mode for minifiation
    [<DefaultValue(false)>]
    val mutable minFilter: VkFilter
    /// Mipmap selection mode
    [<DefaultValue(false)>]
    val mutable mipmapMode: VkSamplerMipmapMode
    [<DefaultValue(false)>]
    val mutable addressModeU: VkSamplerAddressMode
    [<DefaultValue(false)>]
    val mutable addressModeV: VkSamplerAddressMode
    [<DefaultValue(false)>]
    val mutable addressModeW: VkSamplerAddressMode
    [<DefaultValue(false)>]
    val mutable mipLodBias: float32
    [<DefaultValue(false)>]
    val mutable anisotropyEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable maxAnisotropy: float32
    [<DefaultValue(false)>]
    val mutable compareEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable compareOp: VkCompareOp
    [<DefaultValue(false)>]
    val mutable minLod: float32
    [<DefaultValue(false)>]
    val mutable maxLod: float32
    [<DefaultValue(false)>]
    val mutable borderColor: VkBorderColor
    [<DefaultValue(false)>]
    val mutable unnormalizedCoordinates: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineLayoutCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineLayoutCreateFlags
    /// Number of descriptor sets interfaced by the pipeline
    [<DefaultValue(false)>]
    val mutable setLayoutCount: uint32
    /// Array of setCount number of descriptor set layout objects defining the layout of the
    [<DefaultValue(false)>]
    val mutable pSetLayouts: nativeptr<VkDescriptorSetLayout>
    /// Number of push-constant ranges used by the pipeline
    [<DefaultValue(false)>]
    val mutable pushConstantRangeCount: uint32
    /// Array of pushConstantRangeCount number of ranges used by various shader stages
    [<DefaultValue(false)>]
    val mutable pPushConstantRanges: nativeptr<VkPushConstantRange>

[<Struct;NoEquality;NoComparison>]
type VkPushConstantRange =
    /// Which stages use the range
    [<DefaultValue(false)>]
    val mutable stageFlags: VkShaderStageFlags
    /// Start of the range, in bytes
    [<DefaultValue(false)>]
    val mutable offset: uint32
    /// Size of the range, in bytes
    [<DefaultValue(false)>]
    val mutable size: uint32

[<Struct;NoEquality;NoComparison>]
type VkPipelineCacheCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCacheCreateFlags
    /// Size of initial data to populate cache, in bytes
    [<DefaultValue(false)>]
    val mutable initialDataSize: unativeint
    /// Initial data to populate cache
    [<DefaultValue(false)>]
    val mutable pInitialData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkGraphicsPipelineCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Pipeline creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCreateFlags
    [<DefaultValue(false)>]
    val mutable stageCount: uint32
    /// One entry for each active shader stage
    [<DefaultValue(false)>]
    val mutable pStages: nativeptr<VkPipelineShaderStageCreateInfo>
    [<DefaultValue(false)>]
    val mutable pVertexInputState: nativeptr<VkPipelineVertexInputStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pInputAssemblyState: nativeptr<VkPipelineInputAssemblyStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pTessellationState: nativeptr<VkPipelineTessellationStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pViewportState: nativeptr<VkPipelineViewportStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pRasterizationState: nativeptr<VkPipelineRasterizationStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pMultisampleState: nativeptr<VkPipelineMultisampleStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pDepthStencilState: nativeptr<VkPipelineDepthStencilStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pColorBlendState: nativeptr<VkPipelineColorBlendStateCreateInfo>
    [<DefaultValue(false)>]
    val mutable pDynamicState: nativeptr<VkPipelineDynamicStateCreateInfo>
    /// Interface layout of the pipeline
    [<DefaultValue(false)>]
    val mutable layout: VkPipelineLayout
    [<DefaultValue(false)>]
    val mutable renderPass: VkRenderPass
    [<DefaultValue(false)>]
    val mutable subpass: uint32
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
    [<DefaultValue(false)>]
    val mutable basePipelineHandle: VkPipeline
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
    [<DefaultValue(false)>]
    val mutable basePipelineIndex: int

[<Struct;NoEquality;NoComparison>]
type VkPipelineDepthStencilStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineDepthStencilStateCreateFlags
    [<DefaultValue(false)>]
    val mutable depthTestEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable depthWriteEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable depthCompareOp: VkCompareOp
    /// optional (depth_bounds_test)
    [<DefaultValue(false)>]
    val mutable depthBoundsTestEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable stencilTestEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable front: VkStencilOpState
    [<DefaultValue(false)>]
    val mutable back: VkStencilOpState
    [<DefaultValue(false)>]
    val mutable minDepthBounds: float32
    [<DefaultValue(false)>]
    val mutable maxDepthBounds: float32

[<Struct;NoEquality;NoComparison>]
type VkStencilOpState =
    [<DefaultValue(false)>]
    val mutable failOp: VkStencilOp
    [<DefaultValue(false)>]
    val mutable passOp: VkStencilOp
    [<DefaultValue(false)>]
    val mutable depthFailOp: VkStencilOp
    [<DefaultValue(false)>]
    val mutable compareOp: VkCompareOp
    [<DefaultValue(false)>]
    val mutable compareMask: uint32
    [<DefaultValue(false)>]
    val mutable writeMask: uint32
    [<DefaultValue(false)>]
    val mutable reference: uint32

[<Struct;NoEquality;NoComparison>]
type VkPipelineDynamicStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineDynamicStateCreateFlags
    [<DefaultValue(false)>]
    val mutable dynamicStateCount: uint32
    [<DefaultValue(false)>]
    val mutable pDynamicStates: nativeptr<VkDynamicState>

[<Struct;NoEquality;NoComparison>]
type VkPipelineColorBlendStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineColorBlendStateCreateFlags
    [<DefaultValue(false)>]
    val mutable logicOpEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable logicOp: VkLogicOp
    /// # of pAttachments
    [<DefaultValue(false)>]
    val mutable attachmentCount: uint32
    [<DefaultValue(false)>]
    val mutable pAttachments: nativeptr<VkPipelineColorBlendAttachmentState>
    [<DefaultValue(false)>]
    val mutable blendConstants: float32

[<Struct;NoEquality;NoComparison>]
type VkPipelineColorBlendAttachmentState =
    [<DefaultValue(false)>]
    val mutable blendEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable srcColorBlendFactor: VkBlendFactor
    [<DefaultValue(false)>]
    val mutable dstColorBlendFactor: VkBlendFactor
    [<DefaultValue(false)>]
    val mutable colorBlendOp: VkBlendOp
    [<DefaultValue(false)>]
    val mutable srcAlphaBlendFactor: VkBlendFactor
    [<DefaultValue(false)>]
    val mutable dstAlphaBlendFactor: VkBlendFactor
    [<DefaultValue(false)>]
    val mutable alphaBlendOp: VkBlendOp
    [<DefaultValue(false)>]
    val mutable colorWriteMask: VkColorComponentFlags

[<Struct;NoEquality;NoComparison>]
type VkPipelineMultisampleStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineMultisampleStateCreateFlags
    /// Number of samples used for rasterization
    [<DefaultValue(false)>]
    val mutable rasterizationSamples: VkSampleCountFlagBits
    /// optional (GL45)
    [<DefaultValue(false)>]
    val mutable sampleShadingEnable: VkBool32
    /// optional (GL45)
    [<DefaultValue(false)>]
    val mutable minSampleShading: float32
    /// Array of sampleMask words
    [<DefaultValue(false)>]
    val mutable pSampleMask: nativeptr<VkSampleMask>
    [<DefaultValue(false)>]
    val mutable alphaToCoverageEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable alphaToOneEnable: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineRasterizationStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineRasterizationStateCreateFlags
    [<DefaultValue(false)>]
    val mutable depthClampEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable rasterizerDiscardEnable: VkBool32
    /// optional (GL45)
    [<DefaultValue(false)>]
    val mutable polygonMode: VkPolygonMode
    [<DefaultValue(false)>]
    val mutable cullMode: VkCullModeFlags
    [<DefaultValue(false)>]
    val mutable frontFace: VkFrontFace
    [<DefaultValue(false)>]
    val mutable depthBiasEnable: VkBool32
    [<DefaultValue(false)>]
    val mutable depthBiasConstantFactor: float32
    [<DefaultValue(false)>]
    val mutable depthBiasClamp: float32
    [<DefaultValue(false)>]
    val mutable depthBiasSlopeFactor: float32
    [<DefaultValue(false)>]
    val mutable lineWidth: float32

[<Struct;NoEquality;NoComparison>]
type VkPipelineViewportStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineViewportStateCreateFlags
    [<DefaultValue(false)>]
    val mutable viewportCount: uint32
    [<DefaultValue(false)>]
    val mutable pViewports: nativeptr<VkViewport>
    [<DefaultValue(false)>]
    val mutable scissorCount: uint32
    [<DefaultValue(false)>]
    val mutable pScissors: nativeptr<VkRect2D>

[<Struct;NoEquality;NoComparison>]
type VkPipelineTessellationStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineTessellationStateCreateFlags
    [<DefaultValue(false)>]
    val mutable patchControlPoints: uint32

[<Struct;NoEquality;NoComparison>]
type VkPipelineInputAssemblyStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineInputAssemblyStateCreateFlags
    [<DefaultValue(false)>]
    val mutable topology: VkPrimitiveTopology
    [<DefaultValue(false)>]
    val mutable primitiveRestartEnable: VkBool32

[<Struct;NoEquality;NoComparison>]
type VkPipelineVertexInputStateCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineVertexInputStateCreateFlags
    /// number of bindings
    [<DefaultValue(false)>]
    val mutable vertexBindingDescriptionCount: uint32
    [<DefaultValue(false)>]
    val mutable pVertexBindingDescriptions: nativeptr<VkVertexInputBindingDescription>
    /// number of attributes
    [<DefaultValue(false)>]
    val mutable vertexAttributeDescriptionCount: uint32
    [<DefaultValue(false)>]
    val mutable pVertexAttributeDescriptions: nativeptr<VkVertexInputAttributeDescription>

[<Struct;NoEquality;NoComparison>]
type VkVertexInputAttributeDescription =
    /// location of the shader vertex attrib
    [<DefaultValue(false)>]
    val mutable location: uint32
    /// Vertex buffer binding id
    [<DefaultValue(false)>]
    val mutable binding: uint32
    /// format of source data
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    /// Offset of first element in bytes from base of vertex
    [<DefaultValue(false)>]
    val mutable offset: uint32

[<Struct;NoEquality;NoComparison>]
type VkVertexInputBindingDescription =
    /// Vertex buffer binding id
    [<DefaultValue(false)>]
    val mutable binding: uint32
    /// Distance between vertices in bytes (0 = no advancement)
    [<DefaultValue(false)>]
    val mutable stride: uint32
    /// The rate at which the vertex data is consumed
    [<DefaultValue(false)>]
    val mutable inputRate: VkVertexInputRate

[<Struct;NoEquality;NoComparison>]
type VkComputePipelineCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Pipeline creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineCreateFlags
    [<DefaultValue(false)>]
    val mutable stage: VkPipelineShaderStageCreateInfo
    /// Interface layout of the pipeline
    [<DefaultValue(false)>]
    val mutable layout: VkPipelineLayout
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
    [<DefaultValue(false)>]
    val mutable basePipelineHandle: VkPipeline
    /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
    [<DefaultValue(false)>]
    val mutable basePipelineIndex: int

[<Struct;NoEquality;NoComparison>]
type VkPipelineShaderStageCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkPipelineShaderStageCreateFlags
    /// Shader stage
    [<DefaultValue(false)>]
    val mutable stage: VkShaderStageFlagBits
    /// Module containing entry point
    [<DefaultValue(false)>]
    val mutable modul: VkShaderModule
    /// Null-terminated entry point name
    [<DefaultValue(false)>]
    val mutable pName: nativeptr<byte>
    [<DefaultValue(false)>]
    val mutable pSpecializationInfo: nativeptr<VkSpecializationInfo>

[<Struct;NoEquality;NoComparison>]
type VkSpecializationInfo =
    /// Number of entries in the map
    [<DefaultValue(false)>]
    val mutable mapEntryCount: uint32
    /// Array of map entries
    [<DefaultValue(false)>]
    val mutable pMapEntries: nativeptr<VkSpecializationMapEntry>
    /// Size in bytes of pData
    [<DefaultValue(false)>]
    val mutable dataSize: unativeint
    /// Pointer to SpecConstant data
    [<DefaultValue(false)>]
    val mutable pData: nativeint

[<Struct;NoEquality;NoComparison>]
type VkSpecializationMapEntry =
    /// The SpecConstant ID specified in the BIL
    [<DefaultValue(false)>]
    val mutable constantID: uint32
    /// Offset of the value in the data block
    [<DefaultValue(false)>]
    val mutable offset: uint32
    /// Size in bytes of the SpecConstant
    [<DefaultValue(false)>]
    val mutable size: unativeint

[<Struct;NoEquality;NoComparison>]
type VkDescriptorSetAllocateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable descriptorPool: VkDescriptorPool
    [<DefaultValue(false)>]
    val mutable descriptorSetCount: uint32
    [<DefaultValue(false)>]
    val mutable pSetLayouts: nativeptr<VkDescriptorSetLayout>

[<Struct;NoEquality;NoComparison>]
type VkDescriptorPoolCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDescriptorPoolCreateFlags
    [<DefaultValue(false)>]
    val mutable maxSets: uint32
    [<DefaultValue(false)>]
    val mutable poolSizeCount: uint32
    [<DefaultValue(false)>]
    val mutable pPoolSizes: nativeptr<VkDescriptorPoolSize>

[<Struct;NoEquality;NoComparison>]
type VkDescriptorPoolSize =
    [<DefaultValue(false)>]
    val mutable typ: VkDescriptorType
    [<DefaultValue(false)>]
    val mutable descriptorCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkDescriptorSetLayoutCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDescriptorSetLayoutCreateFlags
    /// Number of bindings in the descriptor set layout
    [<DefaultValue(false)>]
    val mutable bindingCount: uint32
    /// Array of descriptor set layout bindings
    [<DefaultValue(false)>]
    val mutable pBindings: nativeptr<VkDescriptorSetLayoutBinding>

[<Struct;NoEquality;NoComparison>]
type VkDescriptorSetLayoutBinding =
    /// Binding number for this entry
    [<DefaultValue(false)>]
    val mutable binding: uint32
    /// Type of the descriptors in this binding
    [<DefaultValue(false)>]
    val mutable descriptorType: VkDescriptorType
    /// Number of descriptors in this binding
    [<DefaultValue(false)>]
    val mutable descriptorCount: uint32
    /// Shader stages this binding is visible to
    [<DefaultValue(false)>]
    val mutable stageFlags: VkShaderStageFlags
    /// Immutable samplers (used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements)
    [<DefaultValue(false)>]
    val mutable pImmutableSamplers: nativeptr<VkSampler>

[<Struct;NoEquality;NoComparison>]
type VkShaderModuleCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkShaderModuleCreateFlags
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable codeSize: unativeint
    /// Binary code of size codeSize
    [<DefaultValue(false)>]
    val mutable pCode: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkImageResolve =
    [<DefaultValue(false)>]
    val mutable srcSubresource: VkImageSubresourceLayers
    [<DefaultValue(false)>]
    val mutable srcOffset: VkOffset3D
    [<DefaultValue(false)>]
    val mutable dstSubresource: VkImageSubresourceLayers
    [<DefaultValue(false)>]
    val mutable dstOffset: VkOffset3D
    [<DefaultValue(false)>]
    val mutable extent: VkExtent3D

[<Struct;NoEquality;NoComparison>]
type VkBufferImageCopy =
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable bufferOffset: VkDeviceSize
    /// Specified in texels
    [<DefaultValue(false)>]
    val mutable bufferRowLength: uint32
    [<DefaultValue(false)>]
    val mutable bufferImageHeight: uint32
    [<DefaultValue(false)>]
    val mutable imageSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    [<DefaultValue(false)>]
    val mutable imageOffset: VkOffset3D
    /// Specified in pixels for both compressed and uncompressed images
    [<DefaultValue(false)>]
    val mutable imageExtent: VkExtent3D

[<Struct;NoEquality;NoComparison>]
type VkImageBlit =
    [<DefaultValue(false)>]
    val mutable srcSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    [<DefaultValue(false)>]
    val mutable srcOffsets: VkOffset3D
    [<DefaultValue(false)>]
    val mutable dstSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    [<DefaultValue(false)>]
    val mutable dstOffsets: VkOffset3D

[<Struct;NoEquality;NoComparison>]
type VkImageCopy =
    [<DefaultValue(false)>]
    val mutable srcSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    [<DefaultValue(false)>]
    val mutable srcOffset: VkOffset3D
    [<DefaultValue(false)>]
    val mutable dstSubresource: VkImageSubresourceLayers
    /// Specified in pixels for both compressed and uncompressed images
    [<DefaultValue(false)>]
    val mutable dstOffset: VkOffset3D
    /// Specified in pixels for both compressed and uncompressed images
    [<DefaultValue(false)>]
    val mutable extent: VkExtent3D

[<Struct;NoEquality;NoComparison>]
type VkBindSparseInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable waitSemaphoreCount: uint32
    [<DefaultValue(false)>]
    val mutable pWaitSemaphores: nativeptr<VkSemaphore>
    [<DefaultValue(false)>]
    val mutable bufferBindCount: uint32
    [<DefaultValue(false)>]
    val mutable pBufferBinds: nativeptr<VkSparseBufferMemoryBindInfo>
    [<DefaultValue(false)>]
    val mutable imageOpaqueBindCount: uint32
    [<DefaultValue(false)>]
    val mutable pImageOpaqueBinds: nativeptr<VkSparseImageOpaqueMemoryBindInfo>
    [<DefaultValue(false)>]
    val mutable imageBindCount: uint32
    [<DefaultValue(false)>]
    val mutable pImageBinds: nativeptr<VkSparseImageMemoryBindInfo>
    [<DefaultValue(false)>]
    val mutable signalSemaphoreCount: uint32
    [<DefaultValue(false)>]
    val mutable pSignalSemaphores: nativeptr<VkSemaphore>

[<Struct;NoEquality;NoComparison>]
type VkSparseImageMemoryBindInfo =
    [<DefaultValue(false)>]
    val mutable image: VkImage
    [<DefaultValue(false)>]
    val mutable bindCount: uint32
    [<DefaultValue(false)>]
    val mutable pBinds: nativeptr<VkSparseImageMemoryBind>

[<Struct;NoEquality;NoComparison>]
type VkSparseImageOpaqueMemoryBindInfo =
    [<DefaultValue(false)>]
    val mutable image: VkImage
    [<DefaultValue(false)>]
    val mutable bindCount: uint32
    [<DefaultValue(false)>]
    val mutable pBinds: nativeptr<VkSparseMemoryBind>

[<Struct;NoEquality;NoComparison>]
type VkSparseBufferMemoryBindInfo =
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    [<DefaultValue(false)>]
    val mutable bindCount: uint32
    [<DefaultValue(false)>]
    val mutable pBinds: nativeptr<VkSparseMemoryBind>

[<Struct;NoEquality;NoComparison>]
type VkSparseImageMemoryBind =
    [<DefaultValue(false)>]
    val mutable subresource: VkImageSubresource
    [<DefaultValue(false)>]
    val mutable offset: VkOffset3D
    [<DefaultValue(false)>]
    val mutable extent: VkExtent3D
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable memoryOffset: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable flags: VkSparseMemoryBindFlags

[<Struct;NoEquality;NoComparison>]
type VkSparseMemoryBind =
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable resourceOffset: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable memoryOffset: VkDeviceSize
    [<DefaultValue(false)>]
    val mutable flags: VkSparseMemoryBindFlags

[<Struct;NoEquality;NoComparison>]
type VkBufferCopy =
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable srcOffset: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable dstOffset: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkImageViewCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkImageViewCreateFlags
    [<DefaultValue(false)>]
    val mutable image: VkImage
    [<DefaultValue(false)>]
    val mutable viewType: VkImageViewType
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable components: VkComponentMapping
    [<DefaultValue(false)>]
    val mutable subresourceRange: VkImageSubresourceRange

[<Struct;NoEquality;NoComparison>]
type VkSubresourceLayout =
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable rowPitch: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable arrayPitch: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable depthPitch: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkImageCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Image creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkImageCreateFlags
    [<DefaultValue(false)>]
    val mutable imageType: VkImageType
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    [<DefaultValue(false)>]
    val mutable extent: VkExtent3D
    [<DefaultValue(false)>]
    val mutable mipLevels: uint32
    [<DefaultValue(false)>]
    val mutable arrayLayers: uint32
    [<DefaultValue(false)>]
    val mutable samples: VkSampleCountFlagBits
    [<DefaultValue(false)>]
    val mutable tiling: VkImageTiling
    /// Image usage flags
    [<DefaultValue(false)>]
    val mutable usage: VkImageUsageFlags
    /// Cross-queue-family sharing mode
    [<DefaultValue(false)>]
    val mutable sharingMode: VkSharingMode
    /// Number of queue families to share across
    [<DefaultValue(false)>]
    val mutable queueFamilyIndexCount: uint32
    /// Array of queue family indices to share across
    [<DefaultValue(false)>]
    val mutable pQueueFamilyIndices: nativeptr<uint32>
    /// Initial image layout for all subresources
    [<DefaultValue(false)>]
    val mutable initialLayout: VkImageLayout

[<Struct;NoEquality;NoComparison>]
type VkImageMemoryBarrier =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Memory accesses from the source of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable dstAccessMask: VkAccessFlags
    /// Current layout of the image
    [<DefaultValue(false)>]
    val mutable oldLayout: VkImageLayout
    /// New layout to transition the image to
    [<DefaultValue(false)>]
    val mutable newLayout: VkImageLayout
    /// Queue family to transition ownership from
    [<DefaultValue(false)>]
    val mutable srcQueueFamilyIndex: uint32
    /// Queue family to transition ownership to
    [<DefaultValue(false)>]
    val mutable dstQueueFamilyIndex: uint32
    /// Image to sync
    [<DefaultValue(false)>]
    val mutable image: VkImage
    /// Subresource range to sync
    [<DefaultValue(false)>]
    val mutable subresourceRange: VkImageSubresourceRange

[<Struct;NoEquality;NoComparison>]
type VkBufferMemoryBarrier =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Memory accesses from the source of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable dstAccessMask: VkAccessFlags
    /// Queue family to transition ownership from
    [<DefaultValue(false)>]
    val mutable srcQueueFamilyIndex: uint32
    /// Queue family to transition ownership to
    [<DefaultValue(false)>]
    val mutable dstQueueFamilyIndex: uint32
    /// Buffer to sync
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    /// Offset within the buffer to sync
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize
    /// Amount of bytes to sync
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkMemoryBarrier =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Memory accesses from the source of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable srcAccessMask: VkAccessFlags
    /// Memory accesses from the destination of the dependency to synchronize
    [<DefaultValue(false)>]
    val mutable dstAccessMask: VkAccessFlags

[<Struct;NoEquality;NoComparison>]
type VkImageSubresourceRange =
    [<DefaultValue(false)>]
    val mutable aspectMask: VkImageAspectFlags
    [<DefaultValue(false)>]
    val mutable baseMipLevel: uint32
    [<DefaultValue(false)>]
    val mutable levelCount: uint32
    [<DefaultValue(false)>]
    val mutable baseArrayLayer: uint32
    [<DefaultValue(false)>]
    val mutable layerCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkImageSubresourceLayers =
    [<DefaultValue(false)>]
    val mutable aspectMask: VkImageAspectFlags
    [<DefaultValue(false)>]
    val mutable mipLevel: uint32
    [<DefaultValue(false)>]
    val mutable baseArrayLayer: uint32
    [<DefaultValue(false)>]
    val mutable layerCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkImageSubresource =
    [<DefaultValue(false)>]
    val mutable aspectMask: VkImageAspectFlags
    [<DefaultValue(false)>]
    val mutable mipLevel: uint32
    [<DefaultValue(false)>]
    val mutable arrayLayer: uint32

[<Struct;NoEquality;NoComparison>]
type VkBufferViewCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkBufferViewCreateFlags
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    /// Optionally specifies format of elements
    [<DefaultValue(false)>]
    val mutable format: VkFormat
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize
    /// View size specified in bytes
    [<DefaultValue(false)>]
    val mutable range: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkBufferCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Buffer creation flags
    [<DefaultValue(false)>]
    val mutable flags: VkBufferCreateFlags
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize
    /// Buffer usage flags
    [<DefaultValue(false)>]
    val mutable usage: VkBufferUsageFlags
    [<DefaultValue(false)>]
    val mutable sharingMode: VkSharingMode
    [<DefaultValue(false)>]
    val mutable queueFamilyIndexCount: uint32
    [<DefaultValue(false)>]
    val mutable pQueueFamilyIndices: nativeptr<uint32>

[<Struct;NoEquality;NoComparison>]
type VkCopyDescriptorSet =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Source descriptor set
    [<DefaultValue(false)>]
    val mutable srcSet: VkDescriptorSet
    /// Binding within the source descriptor set to copy from
    [<DefaultValue(false)>]
    val mutable srcBinding: uint32
    /// Array element within the source binding to copy from
    [<DefaultValue(false)>]
    val mutable srcArrayElement: uint32
    /// Destination descriptor set
    [<DefaultValue(false)>]
    val mutable dstSet: VkDescriptorSet
    /// Binding within the destination descriptor set to copy to
    [<DefaultValue(false)>]
    val mutable dstBinding: uint32
    /// Array element within the destination binding to copy to
    [<DefaultValue(false)>]
    val mutable dstArrayElement: uint32
    /// Number of descriptors to write (determines the size of the array pointed by pDescriptors)
    [<DefaultValue(false)>]
    val mutable descriptorCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkWriteDescriptorSet =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Destination descriptor set
    [<DefaultValue(false)>]
    val mutable dstSet: VkDescriptorSet
    /// Binding within the destination descriptor set to write
    [<DefaultValue(false)>]
    val mutable dstBinding: uint32
    /// Array element within the destination binding to write
    [<DefaultValue(false)>]
    val mutable dstArrayElement: uint32
    /// Number of descriptors to write (determines the size of the array pointed by pDescriptors)
    [<DefaultValue(false)>]
    val mutable descriptorCount: uint32
    /// Descriptor type to write (determines which members of the array pointed by pDescriptors are going to be used)
    [<DefaultValue(false)>]
    val mutable descriptorType: VkDescriptorType
    /// Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types.
    [<DefaultValue(false)>]
    val mutable pImageInfo: nativeptr<VkDescriptorImageInfo>
    /// Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types.
    [<DefaultValue(false)>]
    val mutable pBufferInfo: nativeptr<VkDescriptorBufferInfo>
    /// Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types.
    [<DefaultValue(false)>]
    val mutable pTexelBufferView: nativeptr<VkBufferView>

[<Struct;NoEquality;NoComparison>]
type VkDescriptorImageInfo =
    /// Sampler to write to the descriptor in case it is a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise.
    [<DefaultValue(false)>]
    val mutable sampler: VkSampler
    /// Image view to write to the descriptor in case it is a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise.
    [<DefaultValue(false)>]
    val mutable imageView: VkImageView
    /// Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE).
    [<DefaultValue(false)>]
    val mutable imageLayout: VkImageLayout

[<Struct;NoEquality;NoComparison>]
type VkDescriptorBufferInfo =
    /// Buffer used for this descriptor slot.
    [<DefaultValue(false)>]
    val mutable buffer: VkBuffer
    /// Base offset from buffer start in bytes to update in the descriptor set.
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize
    /// Size in bytes of the buffer resource for this descriptor update.
    [<DefaultValue(false)>]
    val mutable range: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkImageFormatProperties =
    /// max image dimensions for this resource type
    [<DefaultValue(false)>]
    val mutable maxExtent: VkExtent3D
    /// max number of mipmap levels for this resource type
    [<DefaultValue(false)>]
    val mutable maxMipLevels: uint32
    /// max array size for this resource type
    [<DefaultValue(false)>]
    val mutable maxArrayLayers: uint32
    /// supported sample counts for this resource type
    [<DefaultValue(false)>]
    val mutable sampleCounts: VkSampleCountFlags
    /// max size (in bytes) of this resource type
    [<DefaultValue(false)>]
    val mutable maxResourceSize: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkFormatProperties =
    /// Format features in case of linear tiling
    [<DefaultValue(false)>]
    val mutable linearTilingFeatures: VkFormatFeatureFlags
    /// Format features in case of optimal tiling
    [<DefaultValue(false)>]
    val mutable optimalTilingFeatures: VkFormatFeatureFlags
    /// Format features supported by buffers
    [<DefaultValue(false)>]
    val mutable bufferFeatures: VkFormatFeatureFlags

[<Struct;NoEquality;NoComparison>]
type VkMappedMemoryRange =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Mapped memory object
    [<DefaultValue(false)>]
    val mutable memory: VkDeviceMemory
    /// Offset within the memory object where the range starts
    [<DefaultValue(false)>]
    val mutable offset: VkDeviceSize
    /// Size of the range within the memory object
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkMemoryHeap =
    /// Available memory in the heap
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize
    /// Flags for the heap
    [<DefaultValue(false)>]
    val mutable flags: VkMemoryHeapFlags

[<Struct;NoEquality;NoComparison>]
type VkMemoryType =
    /// Memory properties of this memory type
    [<DefaultValue(false)>]
    val mutable propertyFlags: VkMemoryPropertyFlags
    /// Index of the memory heap allocations of this memory type are taken from
    [<DefaultValue(false)>]
    val mutable heapIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkSparseImageMemoryRequirements =
    [<DefaultValue(false)>]
    val mutable formatProperties: VkSparseImageFormatProperties
    [<DefaultValue(false)>]
    val mutable imageMipTailFirstLod: uint32
    /// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
    [<DefaultValue(false)>]
    val mutable imageMipTailSize: VkDeviceSize
    /// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
    [<DefaultValue(false)>]
    val mutable imageMipTailOffset: VkDeviceSize
    /// Specified in bytes, must be a multiple of sparse block size in bytes / alignment
    [<DefaultValue(false)>]
    val mutable imageMipTailStride: VkDeviceSize

[<Struct;NoEquality;NoComparison>]
type VkSparseImageFormatProperties =
    [<DefaultValue(false)>]
    val mutable aspectMask: VkImageAspectFlags
    [<DefaultValue(false)>]
    val mutable imageGranularity: VkExtent3D
    [<DefaultValue(false)>]
    val mutable flags: VkSparseImageFormatFlags

[<Struct;NoEquality;NoComparison>]
type VkMemoryRequirements =
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable size: VkDeviceSize
    /// Specified in bytes
    [<DefaultValue(false)>]
    val mutable alignment: VkDeviceSize
    /// Bitmask of the allowed memory type indices into memoryTypes[] for this object
    [<DefaultValue(false)>]
    val mutable memoryTypeBits: uint32

[<Struct;NoEquality;NoComparison>]
type VkMemoryAllocateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    /// Size of memory allocation
    [<DefaultValue(false)>]
    val mutable allocationSize: VkDeviceSize
    /// Index of the of the memory type to allocate from
    [<DefaultValue(false)>]
    val mutable memoryTypeIndex: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceMemoryProperties =
    [<DefaultValue(false)>]
    val mutable memoryTypeCount: uint32
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<VkMemoryType>, 32)>]
    val mutable memoryTypes: VkFixedArray_VkMemoryType_32
    [<DefaultValue(false)>]
    val mutable memoryHeapCount: uint32
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<VkMemoryHeap>, 16)>]
    val mutable memoryHeaps: VkFixedArray_VkMemoryHeap_16

[<Struct;NoEquality;NoComparison>]
type VkQueueFamilyProperties =
    /// Queue flags
    [<DefaultValue(false)>]
    val mutable queueFlags: VkQueueFlags
    [<DefaultValue(false)>]
    val mutable queueCount: uint32
    [<DefaultValue(false)>]
    val mutable timestampValidBits: uint32
    /// Minimum alignment requirement for image transfers
    [<DefaultValue(false)>]
    val mutable minImageTransferGranularity: VkExtent3D

[<Struct;NoEquality;NoComparison>]
type VkInstanceCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkInstanceCreateFlags
    [<DefaultValue(false)>]
    val mutable pApplicationInfo: nativeptr<VkApplicationInfo>
    [<DefaultValue(false)>]
    val mutable enabledLayerCount: uint32
    /// Ordered list of layer names to be enabled
    [<DefaultValue(false)>]
    val mutable ppEnabledLayerNames: nativeptr<nativeptr<byte>>
    [<DefaultValue(false)>]
    val mutable enabledExtensionCount: uint32
    /// Extension names to be enabled
    [<DefaultValue(false)>]
    val mutable ppEnabledExtensionNames: nativeptr<nativeptr<byte>>

[<Struct;NoEquality;NoComparison>]
type VkDeviceCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDeviceCreateFlags
    [<DefaultValue(false)>]
    val mutable queueCreateInfoCount: uint32
    [<DefaultValue(false)>]
    val mutable pQueueCreateInfos: nativeptr<VkDeviceQueueCreateInfo>
    [<DefaultValue(false)>]
    val mutable enabledLayerCount: uint32
    /// Ordered list of layer names to be enabled
    [<DefaultValue(false)>]
    val mutable ppEnabledLayerNames: nativeptr<nativeptr<byte>>
    [<DefaultValue(false)>]
    val mutable enabledExtensionCount: uint32
    [<DefaultValue(false)>]
    val mutable ppEnabledExtensionNames: nativeptr<nativeptr<byte>>
    [<DefaultValue(false)>]
    val mutable pEnabledFeatures: nativeptr<VkPhysicalDeviceFeatures>

[<Struct;NoEquality;NoComparison>]
type VkDeviceQueueCreateInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable flags: VkDeviceQueueCreateFlags
    [<DefaultValue(false)>]
    val mutable queueFamilyIndex: uint32
    [<DefaultValue(false)>]
    val mutable queueCount: uint32
    [<DefaultValue(false)>]
    val mutable pQueuePriorities: nativeptr<float32>

[<Struct;NoEquality;NoComparison>]
type VkAllocationCallbacks =
    [<DefaultValue(false)>]
    val mutable pUserData: nativeint
    [<DefaultValue(false)>]
    val mutable pfnAllocation: PFN_vkAllocationFunction
    [<DefaultValue(false)>]
    val mutable pfnReallocation: PFN_vkReallocationFunction
    [<DefaultValue(false)>]
    val mutable pfnFree: PFN_vkFreeFunction
    [<DefaultValue(false)>]
    val mutable pfnInternalAllocation: PFN_vkInternalAllocationNotification
    [<DefaultValue(false)>]
    val mutable pfnInternalFree: PFN_vkInternalFreeNotification

[<Struct;NoEquality;NoComparison>]
type VkApplicationInfo =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeint
    [<DefaultValue(false)>]
    val mutable pApplicationName: nativeptr<byte>
    [<DefaultValue(false)>]
    val mutable applicationVersion: uint32
    [<DefaultValue(false)>]
    val mutable pEngineName: nativeptr<byte>
    [<DefaultValue(false)>]
    val mutable engineVersion: uint32
    [<DefaultValue(false)>]
    val mutable apiVersion: uint32

[<Struct;NoEquality;NoComparison>]
type VkLayerProperties =
    /// layer name
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable layerName: VkFixedArray_byte_256
    /// version of the layer specification implemented
    [<DefaultValue(false)>]
    val mutable specVersion: uint32
    /// build or release version of the layer's library
    [<DefaultValue(false)>]
    val mutable implementationVersion: uint32
    /// Free-form description of the layer
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable description: VkFixedArray_byte_256

[<Struct;NoEquality;NoComparison>]
type VkExtensionProperties =
    /// extension name
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable extensionName: VkFixedArray_byte_256
    /// version of the extension specification implemented
    [<DefaultValue(false)>]
    val mutable specVersion: uint32

[<Struct;NoEquality;NoComparison>]
type VkPhysicalDeviceProperties =
    [<DefaultValue(false)>]
    val mutable apiVersion: uint32
    [<DefaultValue(false)>]
    val mutable driverVersion: uint32
    [<DefaultValue(false)>]
    val mutable vendorID: uint32
    [<DefaultValue(false)>]
    val mutable deviceID: uint32
    [<DefaultValue(false)>]
    val mutable deviceType: VkPhysicalDeviceType
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 256)>]
    val mutable deviceName: VkFixedArray_byte_256
    [<DefaultValue(false)>]
    [<FixedBuffer(typeof<byte>, 16)>]
    val mutable pipelineCacheUUID: VkFixedArray_byte_16
    [<DefaultValue(false)>]
    val mutable limits: VkPhysicalDeviceLimits
    [<DefaultValue(false)>]
    val mutable sparseProperties: VkPhysicalDeviceSparseProperties

[<Struct;NoEquality;NoComparison>]
type VkComponentMapping =
    [<DefaultValue(false)>]
    val mutable r: VkComponentSwizzle
    [<DefaultValue(false)>]
    val mutable g: VkComponentSwizzle
    [<DefaultValue(false)>]
    val mutable b: VkComponentSwizzle
    [<DefaultValue(false)>]
    val mutable a: VkComponentSwizzle

[<Struct;NoEquality;NoComparison>]
type VkClearRect =
    [<DefaultValue(false)>]
    val mutable rect: VkRect2D
    [<DefaultValue(false)>]
    val mutable baseArrayLayer: uint32
    [<DefaultValue(false)>]
    val mutable layerCount: uint32

[<Struct;NoEquality;NoComparison>]
type VkRect2D =
    [<DefaultValue(false)>]
    val mutable offset: VkOffset2D
    [<DefaultValue(false)>]
    val mutable extent: VkExtent2D

[<Struct;NoEquality;NoComparison>]
type VkViewport =
    [<DefaultValue(false)>]
    val mutable x: float32
    [<DefaultValue(false)>]
    val mutable y: float32
    [<DefaultValue(false)>]
    val mutable width: float32
    [<DefaultValue(false)>]
    val mutable height: float32
    [<DefaultValue(false)>]
    val mutable minDepth: float32
    [<DefaultValue(false)>]
    val mutable maxDepth: float32

[<Struct;NoEquality;NoComparison>]
type VkExtent3D =
    [<DefaultValue(false)>]
    val mutable width: uint32
    [<DefaultValue(false)>]
    val mutable height: uint32
    [<DefaultValue(false)>]
    val mutable depth: uint32

[<Struct;NoEquality;NoComparison>]
type VkExtent2D =
    [<DefaultValue(false)>]
    val mutable width: uint32
    [<DefaultValue(false)>]
    val mutable height: uint32

[<Struct;NoEquality;NoComparison>]
type VkOffset3D =
    [<DefaultValue(false)>]
    val mutable x: int
    [<DefaultValue(false)>]
    val mutable y: int
    [<DefaultValue(false)>]
    val mutable z: int

[<Struct;NoEquality;NoComparison>]
type VkOffset2D =
    [<DefaultValue(false)>]
    val mutable x: int
    [<DefaultValue(false)>]
    val mutable y: int

[<Struct;NoEquality;NoComparison>]
type VkBaseInStructure =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeptr<VkBaseInStructure>

[<Struct;NoEquality;NoComparison>]
type VkBaseOutStructure =
    [<DefaultValue(false)>]
    val mutable sType: VkStructureType
    [<DefaultValue(false)>]
    val mutable pNext: nativeptr<VkBaseOutStructure>

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkDebugUtilsMessengerCallbackEXT = delegate of VkDebugUtilsMessageSeverityFlagBitsEXT * VkDebugUtilsMessageTypeFlagsEXT * nativeptr<VkDebugUtilsMessengerCallbackDataEXT> * nativeint -> VkBool32
[<Struct>]
type PFN_vkDebugUtilsMessengerCallbackEXT = private PFN_vkDebugUtilsMessengerCallbackEXT of nativeint with
    static member Create(f) =
        let d = _PFN_vkDebugUtilsMessengerCallbackEXT(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkDebugUtilsMessengerCallbackEXT dPtr

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkDebugReportCallbackEXT = delegate of VkDebugReportFlagsEXT * VkDebugReportObjectTypeEXT * uint64 * unativeint * int * nativeptr<byte> * nativeptr<byte> * nativeint -> VkBool32
[<Struct>]
type PFN_vkDebugReportCallbackEXT = private PFN_vkDebugReportCallbackEXT of nativeint with
    static member Create(f) =
        let d = _PFN_vkDebugReportCallbackEXT(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkDebugReportCallbackEXT dPtr

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkVoidFunction = delegate of unit -> unit
[<Struct>]
type PFN_vkVoidFunction = private PFN_vkVoidFunction of nativeint with
    static member Create(f) =
        let d = _PFN_vkVoidFunction(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkVoidFunction dPtr

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkFreeFunction = delegate of nativeint * nativeint -> unit
[<Struct>]
type PFN_vkFreeFunction = private PFN_vkFreeFunction of nativeint with
    static member Create(f) =
        let d = _PFN_vkFreeFunction(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkFreeFunction dPtr

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkAllocationFunction = delegate of nativeint * unativeint * unativeint * VkSystemAllocationScope -> nativeint
[<Struct>]
type PFN_vkAllocationFunction = private PFN_vkAllocationFunction of nativeint with
    static member Create(f) =
        let d = _PFN_vkAllocationFunction(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkAllocationFunction dPtr

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkReallocationFunction = delegate of nativeint * nativeint * unativeint * unativeint * VkSystemAllocationScope -> nativeint
[<Struct>]
type PFN_vkReallocationFunction = private PFN_vkReallocationFunction of nativeint with
    static member Create(f) =
        let d = _PFN_vkReallocationFunction(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkReallocationFunction dPtr

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkInternalFreeNotification = delegate of nativeint * unativeint * VkInternalAllocationType * VkSystemAllocationScope -> unit
[<Struct>]
type PFN_vkInternalFreeNotification = private PFN_vkInternalFreeNotification of nativeint with
    static member Create(f) =
        let d = _PFN_vkInternalFreeNotification(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkInternalFreeNotification dPtr

[<UnmanagedFunctionPointer(CallingConvention.Winapi)>]
type _PFN_vkInternalAllocationNotification = delegate of nativeint * unativeint * VkInternalAllocationType * VkSystemAllocationScope -> unit
[<Struct>]
type PFN_vkInternalAllocationNotification = private PFN_vkInternalAllocationNotification of nativeint with
    static member Create(f) =
        let d = _PFN_vkInternalAllocationNotification(f)
        let gcHandle = GCHandle.Alloc d
        let dPtr = Marshal.GetFunctionPointerForDelegate(d)
        gcHandle, PFN_vkInternalAllocationNotification dPtr

type VkDebugUtilsMessengerEXT = nativeint

type VkDebugReportCallbackEXT = nativeint

type VkSwapchainKHR = nativeint

type VkSurfaceKHR = nativeint

type VkDisplayModeKHR = nativeint

type VkDisplayKHR = nativeint

type VkPerformanceConfigurationINTEL = nativeint

type VkAccelerationStructureNV = nativeint

type VkValidationCacheEXT = nativeint

type VkSamplerYcbcrConversion = nativeint

type VkDescriptorUpdateTemplate = nativeint

type VkIndirectCommandsLayoutNVX = nativeint

type VkObjectTableNVX = nativeint

type VkPipelineCache = nativeint

type VkRenderPass = nativeint

type VkFramebuffer = nativeint

type VkQueryPool = nativeint

type VkEvent = nativeint

type VkSemaphore = nativeint

type VkFence = nativeint

type VkDescriptorPool = nativeint

type VkDescriptorSetLayout = nativeint

type VkDescriptorSet = nativeint

type VkSampler = nativeint

type VkPipelineLayout = nativeint

type VkPipeline = nativeint

type VkShaderModule = nativeint

type VkImageView = nativeint

type VkImage = nativeint

type VkBufferView = nativeint

type VkBuffer = nativeint

type VkCommandPool = nativeint

type VkDeviceMemory = nativeint

type VkCommandBuffer = nativeint

type VkQueue = nativeint

type VkDevice = nativeint

type VkPhysicalDevice = nativeint

type VkInstance = nativeint

type VkSwapchainImageUsageFlagsANDROID = VkSwapchainImageUsageFlagBitsANDROID

type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags

type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags

type VkResolveModeFlagsKHR = VkResolveModeFlagBitsKHR

type VkConditionalRenderingFlagsEXT = VkConditionalRenderingFlagBitsEXT

type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlagBitsEXT

type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags

type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags

type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags

type VkDebugUtilsMessageTypeFlagsEXT = VkDebugUtilsMessageTypeFlagBitsEXT

type VkDebugUtilsMessageSeverityFlagsEXT = VkDebugUtilsMessageSeverityFlagBitsEXT

type VkValidationCacheCreateFlagsEXT = VkFlags

type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags

type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags

type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags

type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags

type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags

type VkSurfaceCounterFlagsEXT = VkSurfaceCounterFlagBitsEXT

type VkFenceImportFlags = VkFenceImportFlagBits

type VkExternalFenceFeatureFlags = VkExternalFenceFeatureFlagBits

type VkExternalFenceHandleTypeFlags = VkExternalFenceHandleTypeFlagBits

type VkSemaphoreImportFlags = VkSemaphoreImportFlagBits

type VkExternalSemaphoreFeatureFlags = VkExternalSemaphoreFeatureFlagBits

type VkExternalSemaphoreHandleTypeFlags = VkExternalSemaphoreHandleTypeFlagBits

type VkExternalMemoryFeatureFlags = VkExternalMemoryFeatureFlagBits

type VkExternalMemoryHandleTypeFlags = VkExternalMemoryHandleTypeFlagBits

type VkExternalMemoryFeatureFlagsNV = VkExternalMemoryFeatureFlagBitsNV

type VkExternalMemoryHandleTypeFlagsNV = VkExternalMemoryHandleTypeFlagBitsNV

type VkCommandPoolTrimFlags = VkFlags

type VkDebugReportFlagsEXT = VkDebugReportFlagBitsEXT

type VkDeviceGroupPresentModeFlagsKHR = VkDeviceGroupPresentModeFlagBitsKHR

type VkMemoryAllocateFlags = VkMemoryAllocateFlagBits

type VkPeerMemoryFeatureFlags = VkPeerMemoryFeatureFlagBits

type VkHeadlessSurfaceCreateFlagsEXT = VkFlags

type VkStreamDescriptorSurfaceCreateFlagsGGP = VkFlags

type VkImagePipeSurfaceCreateFlagsFUCHSIA = VkFlags

type VkMetalSurfaceCreateFlagsEXT = VkFlags

type VkMacOSSurfaceCreateFlagsMVK = VkFlags

type VkIOSSurfaceCreateFlagsMVK = VkFlags

type VkXcbSurfaceCreateFlagsKHR = VkFlags

type VkXlibSurfaceCreateFlagsKHR = VkFlags

type VkWin32SurfaceCreateFlagsKHR = VkFlags

type VkWaylandSurfaceCreateFlagsKHR = VkFlags

type VkViSurfaceCreateFlagsNN = VkFlags

type VkAndroidSurfaceCreateFlagsKHR = VkFlags

type VkDisplaySurfaceCreateFlagsKHR = VkFlags

type VkDisplayModeCreateFlagsKHR = VkFlags

type VkSwapchainCreateFlagsKHR = VkSwapchainCreateFlagBitsKHR

type VkSurfaceTransformFlagsKHR = VkSurfaceTransformFlagBitsKHR

type VkDisplayPlaneAlphaFlagsKHR = VkDisplayPlaneAlphaFlagBitsKHR

type VkCompositeAlphaFlagsKHR = VkCompositeAlphaFlagBitsKHR

type VkShaderCorePropertiesFlagsAMD = VkShaderCorePropertiesFlagBitsAMD

type VkPipelineCompilerControlFlagsAMD = VkPipelineCompilerControlFlagBitsAMD

type VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlagBitsEXT

type VkDescriptorUpdateTemplateCreateFlags = VkFlags

type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagBitsNV

type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagBitsNV

type VkGeometryFlagsNV = VkGeometryFlagBitsNV

type VkObjectEntryUsageFlagsNVX = VkObjectEntryUsageFlagBitsNVX

type VkIndirectCommandsLayoutUsageFlagsNVX = VkIndirectCommandsLayoutUsageFlagBitsNVX

type VkSubgroupFeatureFlags = VkSubgroupFeatureFlagBits

type VkDependencyFlags = VkDependencyFlagBits

type VkDescriptorPoolResetFlags = VkFlags

type VkDescriptorPoolCreateFlags = VkDescriptorPoolCreateFlagBits

type VkCullModeFlags = VkCullModeFlagBits

type VkStencilFaceFlags = VkStencilFaceFlagBits

type VkAttachmentDescriptionFlags = VkAttachmentDescriptionFlagBits

type VkSampleCountFlags = VkSampleCountFlagBits

type VkPipelineStageFlags = VkPipelineStageFlagBits

type VkSubpassDescriptionFlags = VkSubpassDescriptionFlagBits

type VkSparseImageFormatFlags = VkSparseImageFormatFlagBits

type VkSparseMemoryBindFlags = VkSparseMemoryBindFlagBits

type VkImageAspectFlags = VkImageAspectFlagBits

type VkMemoryMapFlags = VkFlags

type VkQueryPipelineStatisticFlags = VkQueryPipelineStatisticFlagBits

type VkCommandBufferUsageFlags = VkCommandBufferUsageFlagBits

type VkCommandBufferResetFlags = VkCommandBufferResetFlagBits

type VkCommandPoolResetFlags = VkCommandPoolResetFlagBits

type VkCommandPoolCreateFlags = VkCommandPoolCreateFlagBits

type VkEventCreateFlags = VkFlags

type VkShaderModuleCreateFlags = VkShaderModuleCreateFlagBits

type VkQueryResultFlags = VkQueryResultFlagBits

type VkQueryControlFlags = VkQueryControlFlagBits

type VkFormatFeatureFlags = VkFormatFeatureFlagBits

type VkSemaphoreCreateFlags = VkFlags

type VkFenceCreateFlags = VkFenceCreateFlagBits

type VkColorComponentFlags = VkColorComponentFlagBits

type VkPipelineCreateFlags = VkPipelineCreateFlagBits

type VkImageViewCreateFlags = VkImageViewCreateFlagBits

type VkImageCreateFlags = VkImageCreateFlagBits

type VkImageUsageFlags = VkImageUsageFlagBits

type VkShaderStageFlags = VkShaderStageFlagBits

type VkBufferCreateFlags = VkBufferCreateFlagBits

type VkBufferUsageFlags = VkBufferUsageFlagBits

type VkAccessFlags = VkAccessFlagBits

type VkMemoryHeapFlags = VkMemoryHeapFlagBits

type VkMemoryPropertyFlags = VkMemoryPropertyFlagBits

type VkQueueFlags = VkQueueFlagBits

type VkDeviceQueueCreateFlags = VkDeviceQueueCreateFlagBits

type VkDeviceCreateFlags = VkFlags

type VkInstanceCreateFlags = VkFlags

type VkBufferViewCreateFlags = VkFlags

type VkDescriptorSetLayoutCreateFlags = VkDescriptorSetLayoutCreateFlagBits

type VkPipelineShaderStageCreateFlags = VkPipelineShaderStageCreateFlagBits

type VkPipelineVertexInputStateCreateFlags = VkFlags

type VkPipelineInputAssemblyStateCreateFlags = VkFlags

type VkPipelineTessellationStateCreateFlags = VkFlags

type VkPipelineViewportStateCreateFlags = VkFlags

type VkPipelineRasterizationStateCreateFlags = VkFlags

type VkPipelineMultisampleStateCreateFlags = VkFlags

type VkPipelineColorBlendStateCreateFlags = VkFlags

type VkPipelineDynamicStateCreateFlags = VkFlags

type VkPipelineDepthStencilStateCreateFlags = VkFlags

type VkPipelineCacheCreateFlags = VkFlags

type VkPipelineLayoutCreateFlags = VkFlags

type VkSamplerCreateFlags = VkSamplerCreateFlagBits

type VkRenderPassCreateFlags = VkRenderPassCreateFlagBits

type VkQueryPoolCreateFlags = VkFlags

type VkFramebufferCreateFlags = VkFramebufferCreateFlagBits

type VkDeviceAddress = uint64

type VkDeviceSize = uint64

type VkFlags = uint32

type VkBool32 = uint32

type VkSampleMask = uint32

type CAMetalLayer = nativeint

type AHardwareBuffer = nativeint

type ANativeWindow = nativeint

let VK_NULL_HANDLE = nativeint 0

let VK_API_VERSION_1_1 = VK_MAKE_VERSION(1u, 1u, 0u)

let VK_API_VERSION_1_0 = VK_MAKE_VERSION(1u, 0u, 0u)

let VK_VERSION_PATCH(version: uint32) = (version &&& 0xfffu)

let VK_VERSION_MINOR(version: uint32) = (version >>> 12) &&& 0x3ffu

let VK_VERSION_MAJOR(version: uint32) = version >>> 22

let VK_MAKE_VERSION(major: uint32, minor: uint32, patch: uint32) = ((major <<< 22) ||| (minor <<< 12) ||| patch)

type GgpFrameToken = nativeint

type GgpStreamDescriptor = nativeint

type zx_handle_t = nativeint

type xcb_window_t = nativeint

type xcb_visualid_t = nativeint

type xcb_connection_t = nativeint

type LPCWSTR = nativeint

type DWORD = nativeint

type SECURITY_ATTRIBUTES = nativeint

type HANDLE = nativeint

type HMONITOR = nativeint

type HWND = nativeint

type HINSTANCE = nativeint

type wl_surface = nativeint

type wl_display = nativeint

type RROutput = nativeint

type Window = nativeint

type VisualID = nativeint

type Display = nativeint

let VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256
let VK_UUID_SIZE = 16
let VK_LUID_SIZE = 8
let VK_LUID_SIZE_KHR = VK_LUID_SIZE
let VK_MAX_EXTENSION_NAME_SIZE = 256
let VK_MAX_DESCRIPTION_SIZE = 256
let VK_MAX_MEMORY_TYPES = 32
/// The maximum number of unique memory heaps, each of which supporting 1 or more memory types
let VK_MAX_MEMORY_HEAPS = 16
let VK_LOD_CLAMP_NONE = 1000.0f
let VK_REMAINING_MIP_LEVELS = ~~~0u
let VK_REMAINING_ARRAY_LAYERS = ~~~0u
let VK_WHOLE_SIZE = ~~~0UL
let VK_ATTACHMENT_UNUSED = ~~~0u
let VK_TRUE = 1u
let VK_FALSE = 0u
let VK_QUEUE_FAMILY_IGNORED = ~~~0u
let VK_QUEUE_FAMILY_EXTERNAL = ~~~0u-1u
let VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL
let VK_QUEUE_FAMILY_FOREIGN_EXT = ~~~0u-2u
let VK_SUBPASS_EXTERNAL = ~~~0u
let VK_MAX_DEVICE_GROUP_SIZE = 32
let VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE
let VK_MAX_DRIVER_NAME_SIZE_KHR = 256
let VK_MAX_DRIVER_INFO_SIZE_KHR = 256
let VK_SHADER_UNUSED_NV = ~~~0u

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, byte* pName)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, byte* pName)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType typ, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEnumerateInstanceVersion(uint32* pApiVersion)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEnumerateInstanceLayerProperties(uint32* pPropertyCount, VkLayerProperties* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEnumerateInstanceExtensionProperties(byte* pLayerName, uint32* pPropertyCount, VkExtensionProperties* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkLayerProperties* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, byte* pLayerName, uint32* pPropertyCount, VkExtensionProperties* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetDeviceQueue(VkDevice device, uint32 queueFamilyIndex, uint32 queueIndex, VkQueue* pQueue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkQueueSubmit(VkQueue queue, uint32 submitCount, VkSubmitInfo* pSubmits, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkQueueWaitIdle(VkQueue queue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkDeviceWaitIdle(VkDevice device)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void* ppData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType typ, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32* pPropertyCount, VkSparseImageFormatProperties* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkQueueBindSparse(VkQueue queue, uint32 bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkResetFences(VkDevice device, uint32 fenceCount, VkFence* pFences)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetFenceStatus(VkDevice device, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkWaitForFences(VkDevice device, uint32 fenceCount, VkFence* pFences, VkBool32 waitAll, uint64 timeout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyEvent(VkDevice device, VkEvent event, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetEventStatus(VkDevice device, VkEvent event)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkSetEvent(VkDevice device, VkEvent event)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkResetEvent(VkDevice device, VkEvent event)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, unativeint dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, unativeint* pDataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32 srcCacheCount, VkPipelineCache* pSrcCaches)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkUpdateDescriptorSets(VkDevice device, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint32 descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewport* pViewports)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32 firstScissor, uint32 scissorCount, VkRect2D* pScissors)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float32 lineWidth)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float32 depthBiasConstantFactor, float32 depthBiasClamp, float32 depthBiasSlopeFactor)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float32 blendConstants)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float32 minDepthBounds, float32 maxDepthBounds)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 compareMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 writeMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 reference)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint32 dynamicOffsetCount, uint32* pDynamicOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDraw(VkCommandBuffer commandBuffer, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int vertexOffset, uint32 firstInstance)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32 regionCount, VkBufferCopy* pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageCopy* pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageBlit* pRegions, VkFilter filter)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkBufferImageCopy* pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32 regionCount, VkBufferImageCopy* pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData)

/// transfer support is only available when VK_KHR_maintenance1 is enabled, as documented in valid usage language in the specification
[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32 data)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint32 rangeCount, VkImageSubresourceRange* pRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint32 rangeCount, VkImageSubresourceRange* pRanges)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32 attachmentCount, VkClearAttachment* pAttachments, uint32 rectCount, VkClearRect* pRects)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageResolve* pRegions)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32 query)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32 offset, uint32 size, void* pValues)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkDisplayPropertiesKHR* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32 planeIndex, uint32* pDisplayCount, VkDisplayKHR* pDisplays)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32 planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32 swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32* pPresentModeCount, VkPresentModeKHR* pPresentModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32* pSwapchainImageCount, VkImage* pSwapchainImages)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64 timeout, VkSemaphore semaphore, VkFence fence, uint32* pImageIndex)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfoKHR* pPresentInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateViSurfaceNN(VkInstance instance, VkViSurfaceCreateInfoNN* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, wl_display* display)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, Display* dpy, VisualID visualID)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateXcbSurfaceKHR(VkInstance instance, VkXcbSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance, VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateStreamDescriptorSurfaceGGP(VkInstance instance, VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64 object, unativeint location, int messageCode, byte* pLayerPrefix, byte* pMessage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT* pNameInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT* pTagInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType typ, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdProcessCommandsNVX(VkCommandBuffer commandBuffer, VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdReserveSpaceForCommandsNVX(VkCommandBuffer commandBuffer, VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutNVX indirectCommandsLayout, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateObjectTableNVX(VkDevice device, VkObjectTableCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkObjectTableNVX* pObjectTable)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyObjectTableNVX(VkDevice device, VkObjectTableNVX objectTable, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkRegisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint32 objectCount, VkObjectTableEntryNVX* ppObjectTableEntries, uint32* pObjectIndices)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkUnregisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint32 objectCount, VkObjectEntryTypeNVX* pObjectEntryTypes, uint32* pObjectIndices)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice physicalDevice, VkDeviceGeneratedCommandsFeaturesNVX* pFeatures, VkDeviceGeneratedCommandsLimitsNVX* pLimits)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32* pPropertyCount, VkSparseImageFormatProperties2* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetMemoryWin32HandleKHR(VkDevice device, VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetSemaphoreWin32HandleKHR(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetFenceWin32HandleKHR(VkDevice device, VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkImportFenceWin32HandleKHR(VkDevice device, VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkImportFenceFdKHR(VkDevice device, VkImportFenceFdInfoKHR* pImportFenceFdInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, VkDisplayKHR display)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, RROutput rrOutput, VkDisplayKHR* pDisplay)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* pDisplayPowerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64* pCounterValue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32 heapIndex, uint32 localDeviceIndex, uint32 remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkBindBufferMemory2(VkDevice device, uint32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkBindImageMemory2(VkDevice device, uint32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32 deviceMask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR* pAcquireInfo, uint32* pImageIndex)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32 baseGroupX, uint32 baseGroupY, uint32 baseGroupZ, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32* pRectCount, VkRect2D* pRects)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32 set, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkSetHdrMetadataEXT(VkDevice device, uint32 swapchainCount, VkSwapchainKHR* pSwapchains, VkHdrMetadataEXT* pMetadata)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateIOSSurfaceMVK(VkInstance instance, VkIOSSurfaceCreateInfoMVK* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateMacOSSurfaceMVK(VkInstance instance, VkMacOSSurfaceCreateInfoMVK* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewportWScalingNV* pViewportWScalings)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32 firstDiscardRectangle, uint32 discardRectangleCount, VkRect2D* pDiscardRectangles)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkDisplayProperties2KHR* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, unativeint* pDataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32 srcCacheCount, VkValidationCacheEXT* pSrcCaches)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetSwapchainGrallocUsageANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, int* grallocUsage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetSwapchainGrallocUsage2ANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, VkSwapchainImageUsageFlagsANDROID swapchainImageUsage, uint64* grallocConsumerUsage, uint64* grallocProducerUsage)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAcquireImageANDROID(VkDevice device, VkImage image, int nativeFenceFd, VkSemaphore semaphore, VkFence fence)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkQueueSignalReleaseImageANDROID(VkQueue queue, uint32 waitSemaphoreCount, VkSemaphore* pWaitSemaphores, VkImage image, int* pNativeFenceFd)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, unativeint* pInfoSize, void* pInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32 timestampCount, VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64* pTimestamps, uint64* pMaxDeviation)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT* pNameInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfoEXT* pTagInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32 marker)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2KHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfoKHR* pSubpassBeginInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfoKHR* pSubpassBeginInfo, VkSubpassEndInfoKHR* pSubpassEndInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, VkSubpassEndInfoKHR* pSubpassEndInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, AHardwareBuffer* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, AHardwareBuffer* pBuffer)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* pCheckpointMarker)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetQueueCheckpointDataNV(VkQueue queue, uint32* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, uint32 counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, uint32 counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags, uint32 index)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, uint32 index)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32 instanceCount, uint32 firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32 counterOffset, uint32 vertexStride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32 firstExclusiveScissor, uint32 exclusiveScissorCount, VkRect2D* pExclusiveScissors)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32 customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32 taskCount, uint32 firstTask)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32 shader)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks* pAllocator)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32 bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeNV mode)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32 accelerationStructureCount, VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32 width, uint32 height, uint32 depth)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32 firstGroup, uint32 groupCount, unativeint dataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, unativeint dataSize, void* pData)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, VkBufferDeviceAddressInfoEXT* pInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern uint32 vkGetImageViewHandleNVX(VkDevice device, VkImageViewHandleInfoNVX* pInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32* pPresentModeCount, VkPresentModeKHR* pPresentModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkInitializePerformanceApiINTEL(VkDevice device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkUninitializePerformanceApiINTEL(VkDevice device)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR* pPipelineInfo, uint32* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint32* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint32* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)

[<DllImport("vulkan-1.dll", CallingConvention = CallingConvention.Winapi);SuppressUnmanagedCodeSecurity>]
extern void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32 lineStippleFactor, uint16 lineStipplePattern)

let VK_KHR_SURFACE_SPEC_VERSION = 25
let VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface"
let VK_KHR_SWAPCHAIN_SPEC_VERSION = 70
let VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain"
let VK_KHR_DISPLAY_SPEC_VERSION = 23
let VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display"
let VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10
let VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain"
let VK_KHR_XLIB_SURFACE_SPEC_VERSION = 6
let VK_KHR_XLIB_SURFACE_EXTENSION_NAME = "VK_KHR_xlib_surface"
let VK_KHR_XCB_SURFACE_SPEC_VERSION = 6
let VK_KHR_XCB_SURFACE_EXTENSION_NAME = "VK_KHR_xcb_surface"
let VK_KHR_WAYLAND_SURFACE_SPEC_VERSION = 6
let VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME = "VK_KHR_wayland_surface"
let VK_KHR_MIR_SURFACE_SPEC_VERSION = 4
let VK_KHR_MIR_SURFACE_EXTENSION_NAME = "VK_KHR_mir_surface"
let VK_KHR_ANDROID_SURFACE_SPEC_VERSION = 6
let VK_KHR_ANDROID_SURFACE_EXTENSION_NAME = "VK_KHR_android_surface"
let VK_KHR_WIN32_SURFACE_SPEC_VERSION = 6
let VK_KHR_WIN32_SURFACE_EXTENSION_NAME = "VK_KHR_win32_surface"
let VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION = 8
let VK_ANDROID_NATIVE_BUFFER_NUMBER = 11
let VK_ANDROID_NATIVE_BUFFER_NAME = "VK_ANDROID_native_buffer"
let VK_EXT_DEBUG_REPORT_SPEC_VERSION = 9
let VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report"
let VK_NV_GLSL_SHADER_SPEC_VERSION = 1
let VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader"
let VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1
let VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted"
let VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3
let VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge"
let VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1
let VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic"
let VK_AMD_EXTENSION_17_SPEC_VERSION = 0
let VK_AMD_EXTENSION_17_EXTENSION_NAME = "VK_AMD_extension_17"
let VK_AMD_EXTENSION_18_SPEC_VERSION = 0
let VK_AMD_EXTENSION_18_EXTENSION_NAME = "VK_AMD_extension_18"
let VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1
let VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order"
let VK_AMD_EXTENSION_20_SPEC_VERSION = 0
let VK_AMD_EXTENSION_20_EXTENSION_NAME = "VK_AMD_extension_20"
let VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1
let VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax"
let VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1
let VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter"
let VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4
let VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker"
let VK_AMD_EXTENSION_24_SPEC_VERSION = 0
let VK_AMD_EXTENSION_24_EXTENSION_NAME = "VK_AMD_extension_24"
let VK_AMD_EXTENSION_25_SPEC_VERSION = 0
let VK_AMD_EXTENSION_25_EXTENSION_NAME = "VK_AMD_extension_25"
let VK_AMD_GCN_SHADER_SPEC_VERSION = 1
let VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader"
let VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1
let VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation"
let VK_EXT_EXTENSION_28_SPEC_VERSION = 0
let VK_EXT_EXTENSION_28_EXTENSION_NAME = "VK_NV_extension_28"
let VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1
let VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback"
let VK_NVX_EXTENSION_30_SPEC_VERSION = 0
let VK_NVX_EXTENSION_30_EXTENSION_NAME = "VK_NVX_extension_30"
let VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 1
let VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle"
let VK_AMD_EXTENSION_32_SPEC_VERSION = 0
let VK_AMD_EXTENSION_32_EXTENSION_NAME = "VK_AMD_extension_32"
let VK_AMD_EXTENSION_33_SPEC_VERSION = 0
let VK_AMD_EXTENSION_33_EXTENSION_NAME = "VK_AMD_extension_33"
let VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2
let VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count"
let VK_AMD_EXTENSION_35_SPEC_VERSION = 0
let VK_AMD_EXTENSION_35_EXTENSION_NAME = "VK_AMD_extension_35"
let VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1
let VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height"
let VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2
let VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float"
let VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1
let VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot"
let VK_AMD_EXTENSION_39_SPEC_VERSION = 0
let VK_AMD_EXTENSION_39_EXTENSION_NAME = "VK_AMD_extension_39"
let VK_AMD_EXTENSION_40_SPEC_VERSION = 0
let VK_AMD_EXTENSION_40_EXTENSION_NAME = "VK_AMD_extension_40"
let VK_AMD_EXTENSION_41_SPEC_VERSION = 0
let VK_AMD_EXTENSION_41_EXTENSION_NAME = "VK_AMD_extension_41"
let VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1
let VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod"
let VK_AMD_SHADER_INFO_SPEC_VERSION = 1
let VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info"
let VK_AMD_EXTENSION_44_SPEC_VERSION = 0
let VK_AMD_EXTENSION_44_EXTENSION_NAME = "VK_AMD_extension_44"
let VK_AMD_EXTENSION_45_SPEC_VERSION = 0
let VK_AMD_EXTENSION_45_EXTENSION_NAME = "VK_AMD_extension_45"
let VK_AMD_EXTENSION_46_SPEC_VERSION = 0
let VK_AMD_EXTENSION_46_EXTENSION_NAME = "VK_AMD_extension_46"
let VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1
let VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod"
let VK_NVX_EXTENSION_48_SPEC_VERSION = 0
let VK_NVX_EXTENSION_48_EXTENSION_NAME = "VK_NVX_extension_48"
let VK_GOOGLE_EXTENSION_49_SPEC_VERSION = 0
let VK_GOOGLE_EXTENSION_49_EXTENSION_NAME = "VK_GOOGLE_extension_49"
let VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION = 1
let VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME = "VK_GGP_stream_descriptor_surface"
let VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2
let VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image"
let VK_NV_EXTENSION_52_SPEC_VERSION = 0
let VK_NV_EXTENSION_52_EXTENSION_NAME = "VK_NV_extension_52"
let VK_NV_EXTENSION_53_SPEC_VERSION = 0
let VK_NV_EXTENSION_53_EXTENSION_NAME = "VK_NV_extension_53"
let VK_KHR_MULTIVIEW_SPEC_VERSION = 1
let VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview"
let VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1
let VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc"
let VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1
let VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities"
let VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1
let VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory"
let VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1
let VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_NV_external_memory_win32"
let VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION = 2
let VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_NV_win32_keyed_mutex"
let VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2
let VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2"
let VK_KHR_DEVICE_GROUP_SPEC_VERSION = 4
let VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group"
let VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 2
let VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags"
let VK_NN_VI_SURFACE_SPEC_VERSION = 1
let VK_NN_VI_SURFACE_EXTENSION_NAME = "VK_NN_vi_surface"
let VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1
let VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters"
let VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1
let VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot"
let VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1
let VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote"
let VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1
let VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr"
let VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1
let VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode"
let VK_IMG_EXTENSION_69_SPEC_VERSION = 0
let VK_IMG_EXTENSION_69_EXTENSION_NAME = "VK_IMG_extension_69"
let VK_KHR_MAINTENANCE1_SPEC_VERSION = 2
let VK_KHR_MAINTENANCE1_EXTENSION_NAME = "VK_KHR_maintenance1"
let VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1
let VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation"
let VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities"
let VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory"
let VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_KHR_external_memory_win32"
let VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd"
let VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION = 1
let VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_KHR_win32_keyed_mutex"
let VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities"
let VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore"
let VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME = "VK_KHR_external_semaphore_win32"
let VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd"
let VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2
let VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor"
let VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2
let VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering"
let VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1
let VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8"
let VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1
let VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage"
let VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 1
let VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present"
let VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1
let VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template"
let VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3
let VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NVX_device_generated_commands"
let VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1
let VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling"
let VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1
let VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display"
let VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION = 1
let VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_xlib_display"
let VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1
let VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter"
let VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1
let VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control"
let VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1
let VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing"
let VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1
let VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage"
let VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1
let VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough"
let VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1
let VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = "VK_NV_viewport_array2"
let VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1
let VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes"
let VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1
let VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle"
let VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1
let VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles"
let VK_NV_EXTENSION_101_SPEC_VERSION = 0
let VK_NV_EXTENSION_101_EXTENSION_NAME = "VK_NV_extension_101"
let VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1
let VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization"
let VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1
let VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable"
let VK_NV_EXTENSION_104_SPEC_VERSION = 0
let VK_NV_EXTENSION_104_EXTENSION_NAME = "VK_NV_extension_104"
let VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4
let VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace"
let VK_EXT_HDR_METADATA_SPEC_VERSION = 2
let VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata"
let VK_IMG_EXTENSION_107_SPEC_VERSION = 0
let VK_IMG_EXTENSION_107_EXTENSION_NAME = "VK_IMG_extension_107"
let VK_IMG_EXTENSION_108_SPEC_VERSION = 0
let VK_IMG_EXTENSION_108_EXTENSION_NAME = "VK_IMG_extension_108"
let VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1
let VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer"
let VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1
let VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2"
let VK_IMG_EXTENSION_111_SPEC_VERSION = 0
let VK_IMG_EXTENSION_111_EXTENSION_NAME = "VK_IMG_extension_111"
let VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1
let VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image"
let VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities"
let VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence"
let VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME = "VK_KHR_external_fence_win32"
let VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1
let VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd"
let VK_KHR_EXTENSION_117_SPEC_VERSION = 0
let VK_KHR_EXTENSION_117_EXTENSION_NAME = "VK_KHR_extension_117"
let VK_KHR_MAINTENANCE2_SPEC_VERSION = 1
let VK_KHR_MAINTENANCE2_EXTENSION_NAME = "VK_KHR_maintenance2"
let VK_KHR_EXTENSION_119_SPEC_VERSION = 0
let VK_KHR_EXTENSION_119_EXTENSION_NAME = "VK_KHR_extension_119"
let VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1
let VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2"
let VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1
let VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers"
let VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1
let VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2"
let VK_MVK_IOS_SURFACE_SPEC_VERSION = 2
let VK_MVK_IOS_SURFACE_EXTENSION_NAME = "VK_MVK_ios_surface"
let VK_MVK_MACOS_SURFACE_SPEC_VERSION = 2
let VK_MVK_MACOS_SURFACE_EXTENSION_NAME = "VK_MVK_macos_surface"
let VK_MVK_MOLTENVK_SPEC_VERSION = 0
let VK_MVK_MOLTENVK_EXTENSION_NAME = "VK_MVK_moltenvk"
let VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1
let VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf"
let VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1
let VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign"
let VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3
let VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation"
let VK_EXT_DEBUG_UTILS_SPEC_VERSION = 1
let VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils"
let VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION = 3
let VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME = "VK_ANDROID_external_memory_android_hardware_buffer"
let VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2
let VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax"
let VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1
let VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class"
let VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2
let VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16"
let VK_AMD_EXTENSION_134_SPEC_VERSION = 0
let VK_AMD_EXTENSION_134_EXTENSION_NAME = "VK_AMD_extension_134"
let VK_AMD_EXTENSION_135_SPEC_VERSION = 0
let VK_AMD_EXTENSION_135_EXTENSION_NAME = "VK_AMD_extension_135"
let VK_AMD_EXTENSION_136_SPEC_VERSION = 0
let VK_AMD_EXTENSION_136_EXTENSION_NAME = "VK_AMD_extension_136"
let VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1
let VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples"
let VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1
let VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask"
let VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1
let VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block"
let VK_AMD_EXTENSION_140_SPEC_VERSION = 0
let VK_AMD_EXTENSION_140_EXTENSION_NAME = "VK_AMD_extension_140"
let VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1
let VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export"
let VK_AMD_EXTENSION_142_SPEC_VERSION = 0
let VK_AMD_EXTENSION_142_EXTENSION_NAME = "VK_AMD_extension_142"
let VK_AMD_EXTENSION_143_SPEC_VERSION = 0
let VK_AMD_EXTENSION_143_EXTENSION_NAME = "VK_AMD_extension_143"
let VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1
let VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations"
let VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1
let VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout"
let VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1
let VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2"
let VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1
let VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list"
let VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2
let VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced"
let VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1
let VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color"
let VK_NV_EXTENSION_151_SPEC_VERSION = 0
let VK_NV_EXTENSION_151_EXTENSION_NAME = "VK_NV_extension_151"
let VK_NV_EXTENSION_152_SPEC_VERSION = 0
let VK_NV_EXTENSION_152_EXTENSION_NAME = "VK_NV_extension_152"
let VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1
let VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples"
let VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1
let VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle"
let VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1
let VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins"
let VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1
let VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage"
let VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14
let VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion"
let VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1
let VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2"
let VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 1
let VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier"
let VK_EXT_EXTENSION_160_SPEC_VERSION = 0
let VK_EXT_EXTENSION_160_EXTENSION_NAME = "VK_EXT_extension_160"
let VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1
let VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache"
let VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2
let VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing"
let VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1
let VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer"
let VK_EXT_EXTENSION_164_SPEC_VERSION = 0
let VK_EXT_EXTENSION_164_EXTENSION_NAME = "VK_NV_extension_164"
let VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3
let VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image"
let VK_NV_RAY_TRACING_SPEC_VERSION = 3
let VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing"
let VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2
let VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test"
let VK_EXT_EXTENSION_168_SPEC_VERSION = 0
let VK_EXT_EXTENSION_168_EXTENSION_NAME = "VK_NV_extension_168"
let VK_KHR_MAINTENANCE3_SPEC_VERSION = 1
let VK_KHR_MAINTENANCE3_EXTENSION_NAME = "VK_KHR_maintenance3"
let VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1
let VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count"
let VK_EXT_FILTER_CUBIC_SPEC_VERSION = 2
let VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic"
let VK_QCOM_extension_172_SPEC_VERSION = 0
let VK_QCOM_extension_172_EXTENSION_NAME = "VK_QCOM_extension_172"
let VK_QCOM_extension_173_SPEC_VERSION = 0
let VK_QCOM_extension_173_EXTENSION_NAME = "VK_QCOM_extension_173"
let VK_QCOM_extension_174_SPEC_VERSION = 0
let VK_QCOM_extension_174_EXTENSION_NAME = "VK_QCOM_extension_174"
let VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2
let VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority"
let VK_KHR_EXTENSION_176_SPEC_VERSION = 0
let VK_KHR_EXTENSION_176_EXTENSION_NAME = "VK_KHR_extension_176"
let VK_KHR_EXTENSION_177_SPEC_VERSION = 0
let VK_KHR_EXTENSION_177_EXTENSION_NAME = "VK_KHR_extension_177"
let VK_KHR_8BIT_STORAGE_SPEC_VERSION = 1
let VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage"
let VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1
let VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host"
let VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1
let VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker"
let VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1
let VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64"
let VK_KHR_EXTENSION_182_SPEC_VERSION = 0
let VK_KHR_EXTENSION_182_EXTENSION_NAME = "VK_AMD_extension_182"
let VK_KHR_EXTENSION_183_SPEC_VERSION = 0
let VK_KHR_EXTENSION_183_EXTENSION_NAME = "VK_AMD_extension_183"
let VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1
let VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control"
let VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 1
let VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps"
let VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2
let VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties"
let VK_KHR_EXTENSION_187_SPEC_VERSION = 0
let VK_KHR_EXTENSION_187_EXTENSION_NAME = "VK_AMD_extension_187"
let VK_KHR_EXTENSION_188_SPEC_VERSION = 0
let VK_KHR_EXTENSION_188_EXTENSION_NAME = "VK_AMD_extension_188"
let VK_KHR_EXTENSION_189_SPEC_VERSION = 0
let VK_KHR_EXTENSION_189_EXTENSION_NAME = "VK_AMD_extension_189"
let VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1
let VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior"
let VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3
let VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor"
let VK_GGP_FRAME_TOKEN_SPEC_VERSION = 1
let VK_GGP_FRAME_TOKEN_EXTENSION_NAME = "VK_GGP_frame_token"
let VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1
let VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback"
let VK_GOOGLE_EXTENSION_194_SPEC_VERSION = 0
let VK_GOOGLE_EXTENSION_194_EXTENSION_NAME = "VK_GOOGLE_extension_194"
let VK_GOOGLE_EXTENSION_195_SPEC_VERSION = 0
let VK_GOOGLE_EXTENSION_195_EXTENSION_NAME = "VK_GOOGLE_extension_195"
let VK_GOOGLE_EXTENSION_196_SPEC_VERSION = 0
let VK_GOOGLE_EXTENSION_196_EXTENSION_NAME = "VK_GOOGLE_extension_196"
let VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1
let VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties"
let VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4
let VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls"
let VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1
let VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned"
let VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1
let VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve"
let VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1
let VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format"
let VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1
let VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives"
let VK_NV_MESH_SHADER_SPEC_VERSION = 1
let VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader"
let VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1
let VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric"
let VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2
let VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint"
let VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 1
let VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive"
let VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2
let VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints"
let VK_KHR_EXTENSION_208_SPEC_VERSION = 0
let VK_KHR_EXTENSION_208_EXTENSION_NAME = "VK_KHR_extension_208"
let VK_KHR_EXTENSION_209_SPEC_VERSION = 0
let VK_KHR_EXTENSION_209_EXTENSION_NAME = "VK_KHR_extension_209"
let VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1
let VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2"
let VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 1
let VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query"
let VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3
let VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model"
let VK_EXT_PCI_BUS_INFO_SPEC_VERSION = 2
let VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info"
let VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1
let VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr"
let VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION = 1
let VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME = "VK_FUCHSIA_imagepipe_surface"
let VK_KHR_EXTENSION_216_SPEC_VERSION = 0
let VK_KHR_EXTENSION_216_EXTENSION_NAME = "VK_KHR_extension_216"
let VK_KHR_EXTENSION_217_SPEC_VERSION = 0
let VK_KHR_EXTENSION_217_EXTENSION_NAME = "VK_KHR_extension_217"
let VK_EXT_METAL_SURFACE_SPEC_VERSION = 1
let VK_EXT_METAL_SURFACE_EXTENSION_NAME = "VK_EXT_metal_surface"
let VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 1
let VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map"
let VK_EXT_EXTENSION_220_SPEC_VERSION = 0
let VK_EXT_EXTENSION_220_EXTENSION_NAME = "VK_EXT_extension_220"
let VK_KHR_EXTENSION_221_SPEC_VERSION = 0
let VK_KHR_EXTENSION_221_EXTENSION_NAME = "VK_KHR_extension_221"
let VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1
let VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout"
let VK_EXT_EXTENSION_223_SPEC_VERSION = 0
let VK_EXT_EXTENSION_223_EXTENSION_NAME = "VK_EXT_extension_223"
let VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = 1
let VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1"
let VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1
let VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string"
let VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2
let VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control"
let VK_AMD_EXTENSION_227_SPEC_VERSION = 0
let VK_AMD_EXTENSION_227_EXTENSION_NAME = "VK_AMD_extension_227"
let VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1
let VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2"
let VK_AMD_EXTENSION_229_SPEC_VERSION = 0
let VK_AMD_EXTENSION_229_EXTENSION_NAME = "VK_AMD_extension_229"
let VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1
let VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory"
let VK_AMD_EXTENSION_231_SPEC_VERSION = 0
let VK_AMD_EXTENSION_231_EXTENSION_NAME = "VK_AMD_extension_231"
let VK_AMD_EXTENSION_232_SPEC_VERSION = 0
let VK_AMD_EXTENSION_232_EXTENSION_NAME = "VK_AMD_extension_232"
let VK_AMD_EXTENSION_233_SPEC_VERSION = 0
let VK_AMD_EXTENSION_233_EXTENSION_NAME = "VK_AMD_extension_233"
let VK_AMD_EXTENSION_234_SPEC_VERSION = 0
let VK_AMD_EXTENSION_234_EXTENSION_NAME = "VK_AMD_extension_234"
let VK_AMD_EXTENSION_235_SPEC_VERSION = 0
let VK_AMD_EXTENSION_235_EXTENSION_NAME = "VK_AMD_extension_235"
let VK_AMD_EXTENSION_236_SPEC_VERSION = 0
let VK_AMD_EXTENSION_236_EXTENSION_NAME = "VK_AMD_extension_236"
let VK_KHR_EXTENSION_237_SPEC_VERSION = 0
let VK_KHR_EXTENSION_237_EXTENSION_NAME = "VK_KHR_extension_237"
let VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1
let VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget"
let VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1
let VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority"
let VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1
let VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities"
let VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1
let VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing"
let VK_NV_EXTENSION_242_SPEC_VERSION = 0
let VK_NV_EXTENSION_242_EXTENSION_NAME = "VK_NV_extension_242"
let VK_INTEL_EXTENSION_243_SPEC_VERSION = 0
let VK_INTEL_EXTENSION_243_EXTENSION_NAME = "VK_INTEL_extension_243"
let VK_MESA_EXTENSION_244_SPEC_VERSION = 0
let VK_MESA_EXTENSION_244_EXTENSION_NAME = "VK_MESA_extension_244"
let VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2
let VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address"
let VK_EXT_EXTENSION_246_SPEC_VERSION = 0
let VK_EXT_EXTENSION_246_EXTENSION_NAME = "VK_EXT_extension_246"
let VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1
let VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage"
let VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 2
let VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features"
let VK_KHR_EXTENSION_249_SPEC_VERSION = 0
let VK_KHR_EXTENSION_249_EXTENSION_NAME = "VK_KHR_extension_249"
let VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1
let VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix"
let VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1
let VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode"
let VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1
let VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock"
let VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1
let VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays"
let VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1
let VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout"
let VK_EXT_EXTENSION_255_SPEC_VERSION = 0
let VK_EXT_EXTENSION_255_EXTENSION_NAME = "VK_EXT_extension_255"
let VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION = 4
let VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME = "VK_EXT_full_screen_exclusive"
let VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 1
let VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface"
let VK_EXT_EXTENSION_258_SPEC_VERSION = 0
let VK_EXT_EXTENSION_258_EXTENSION_NAME = "VK_EXT_extension_258"
let VK_EXT_EXTENSION_259_SPEC_VERSION = 0
let VK_EXT_EXTENSION_259_EXTENSION_NAME = "VK_EXT_extension_259"
let VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1
let VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization"
let VK_NV_EXTENSION_261_SPEC_VERSION = 0
let VK_NV_EXTENSION_261_EXTENSION_NAME = "VK_NV_extension_261"
let VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1
let VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset"
let VK_GOOGLE_EXTENSION_263_SPEC_VERSION = 0
let VK_GOOGLE_EXTENSION_263_EXTENSION_NAME = "VK_GGP_extension_263"
let VK_BRCM_EXTENSION_264_SPEC_VERSION = 0
let VK_BRCM_EXTENSION_264_EXTENSION_NAME = "VK_BRCM_extension_264"
let VK_BRCM_EXTENSION_265_SPEC_VERSION = 0
let VK_BRCM_EXTENSION_265_EXTENSION_NAME = "VK_BRCM_extension_265"
let VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1
let VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8"
let VK_EXT_EXTENSION_267_SPEC_VERSION = 0
let VK_EXT_extension_267 = "VK_EXT_extension_267"
let VK_EXT_EXTENSION_268_SPEC_VERSION = 0
let VK_EXT_extension_268 = "VK_KHR_extension_268"
let VK_KHR_EXTENSION_269_SPEC_VERSION = 0
let VK_KHR_extension_269 = "VK_KHR_extension_269"
let VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1
let VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties"
let VK_INTEL_EXTENSION_271_SPEC_VERSION = 0
let VK_INTEL_extension_271 = "VK_KHR_extension_271"
let VK_INTEL_EXTENSION_272_SPEC_VERSION = 0
let VK_INTEL_extension_272 = "VK_KHR_extension_272"
let VK_INTEL_EXTENSION_273_SPEC_VERSION = 0
let VK_INTEL_extension_273 = "VK_KHR_extension_273"
let VK_INTEL_EXTENSION_274_SPEC_VERSION = 0
let VK_INTEL_extension_274 = "VK_KHR_extension_274"
let VK_KHR_EXTENSION_275_SPEC_VERSION = 0
let VK_KHR_extension_275 = "VK_KHR_extension_275"
let VK_KHR_EXTENSION_276_SPEC_VERSION = 0
let VK_KHR_extension_276 = "VK_KHR_extension_276"
let VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1
let VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation"
let VK_NV_EXTENSION_278_SPEC_VERSION = 0
let VK_NV_extension_278 = "VK_NV_extension_278"
let VK_NV_EXTENSION_279_SPEC_VERSION = 0
let VK_NV_extension_279 = "VK_NV_extension_279"
let VK_KHR_EXTENSION_280_SPEC_VERSION = 0
let VK_KHR_extension_280 = "VK_KHR_extension_280"
let VK_ARM_EXTENSION_281_SPEC_VERSION = 0
let VK_ARM_extension_281 = "VK_ARM_extension_281"
let VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1
let VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment"
let VK_QCOM_EXTENSION_283_SPEC_VERSION = 0
let VK_QCOM_extension_283 = "VK_QCOM_extension_283"
let VK_EXT_EXTENSION_284_SPEC_VERSION = 0
let VK_EXT_extension_284 = "VK_EXT_extension_284"
let VK_EXT_EXTENSION_285_SPEC_VERSION = 0
let VK_EXT_extension_285 = "VK_EXT_extension_285"
let VK_EXT_EXTENSION_286_SPEC_VERSION = 0
let VK_EXT_extension_286 = "VK_EXT_extension_286"
let VK_NVX_EXTENSION_287_SPEC_VERSION = 0
let VK_NVX_EXTENSION_287_EXTENSION_NAME = "VK_NVX_extension_287"
let VK_NVX_EXTENSION_288_SPEC_VERSION = 0
let VK_NVX_EXTENSION_288_EXTENSION_NAME = "VK_NVX_extension_288"
let VK_EXT_EXTENSION_289_SPEC_VERSION = 0
let VK_EXT_EXTENSION_289_EXTENSION_NAME = "VK_EXT_extension_289"


type PtrPtrHandle<'T when 'T : unmanaged> internal (handles: GCHandle[], ptrPtr: nativeptr<nativeptr<'T>>) =
    let mutable isDisposed = 0

    member __.PtrPtr = ptrPtr

    override x.Finalize() =
        (x :> IDisposable).Dispose ()

    interface IDisposable with
        member x.Dispose () =
            if Interlocked.CompareExchange(&isDisposed, 1, 0) = 1 then
                failwith "PtrPtrHandle already disposed"
            else
                GC.SuppressFinalize x
                handles
                |> Array.iter (fun x -> x.Free())
    
let inline vkString (str: string) = UTF8Encoding.UTF8.GetBytes str
let inline vkNullPtr<'T when 'T : unmanaged> = nativeint 0 |> NativePtr.ofNativeInt<'T>
let inline vkCastPtr<'T, 'U when 'T : unmanaged and 'U : unmanaged>(p: nativeptr<'T>) : nativeptr<'U> = p |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
let vkFixedStringArray (strs: string[]) =
    if strs.Length = 0 then new PtrPtrHandle<byte>([||], vkNullPtr)
    else
    let arrPtrPtr = Array.zeroCreate<nativeptr<byte>> strs.Length
    let handles = Array.zeroCreate (strs.Length + 1)
    let ptrPtr = GCHandle.Alloc (arrPtrPtr, GCHandleType.Pinned)
    handles.[0] <- ptrPtr
    for i = 1 to handles.Length - 1 do
        let gcHandle = GCHandle.Alloc (vkString strs.[i - 1], GCHandleType.Pinned)
        handles.[i] <- gcHandle
        arrPtrPtr.[i - 1] <- gcHandle.AddrOfPinnedObject() |> NativePtr.ofNativeInt
    new PtrPtrHandle<byte> (handles, ptrPtr.AddrOfPinnedObject() |> NativePtr.ofNativeInt)

[<Struct;StructLayout(LayoutKind.Sequential, Size = 128);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_VkDeviceSize_16 =
    val mutable private _VkDeviceSize0: VkDeviceSize
    val mutable private _VkDeviceSize1: VkDeviceSize
    val mutable private _VkDeviceSize2: VkDeviceSize
    val mutable private _VkDeviceSize3: VkDeviceSize
    val mutable private _VkDeviceSize4: VkDeviceSize
    val mutable private _VkDeviceSize5: VkDeviceSize
    val mutable private _VkDeviceSize6: VkDeviceSize
    val mutable private _VkDeviceSize7: VkDeviceSize
    val mutable private _VkDeviceSize8: VkDeviceSize
    val mutable private _VkDeviceSize9: VkDeviceSize
    val mutable private _VkDeviceSize10: VkDeviceSize
    val mutable private _VkDeviceSize11: VkDeviceSize
    val mutable private _VkDeviceSize12: VkDeviceSize
    val mutable private _VkDeviceSize13: VkDeviceSize
    val mutable private _VkDeviceSize14: VkDeviceSize
    val mutable private _VkDeviceSize15: VkDeviceSize

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 16
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 128
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 128)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<VkDeviceSize>

[<Struct;StructLayout(LayoutKind.Sequential, Size = 192);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_VkMemoryHeap_16 =
    val mutable private _VkMemoryHeap0: VkMemoryHeap
    val mutable private _VkMemoryHeap1: VkMemoryHeap
    val mutable private _VkMemoryHeap2: VkMemoryHeap
    val mutable private _VkMemoryHeap3: VkMemoryHeap
    val mutable private _VkMemoryHeap4: VkMemoryHeap
    val mutable private _VkMemoryHeap5: VkMemoryHeap
    val mutable private _VkMemoryHeap6: VkMemoryHeap
    val mutable private _VkMemoryHeap7: VkMemoryHeap
    val mutable private _VkMemoryHeap8: VkMemoryHeap
    val mutable private _VkMemoryHeap9: VkMemoryHeap
    val mutable private _VkMemoryHeap10: VkMemoryHeap
    val mutable private _VkMemoryHeap11: VkMemoryHeap
    val mutable private _VkMemoryHeap12: VkMemoryHeap
    val mutable private _VkMemoryHeap13: VkMemoryHeap
    val mutable private _VkMemoryHeap14: VkMemoryHeap
    val mutable private _VkMemoryHeap15: VkMemoryHeap

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 16
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 192
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 192)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<VkMemoryHeap>

[<Struct;StructLayout(LayoutKind.Sequential, Size = 256);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_VkMemoryType_32 =
    val mutable private _VkMemoryType0: VkMemoryType
    val mutable private _VkMemoryType1: VkMemoryType
    val mutable private _VkMemoryType2: VkMemoryType
    val mutable private _VkMemoryType3: VkMemoryType
    val mutable private _VkMemoryType4: VkMemoryType
    val mutable private _VkMemoryType5: VkMemoryType
    val mutable private _VkMemoryType6: VkMemoryType
    val mutable private _VkMemoryType7: VkMemoryType
    val mutable private _VkMemoryType8: VkMemoryType
    val mutable private _VkMemoryType9: VkMemoryType
    val mutable private _VkMemoryType10: VkMemoryType
    val mutable private _VkMemoryType11: VkMemoryType
    val mutable private _VkMemoryType12: VkMemoryType
    val mutable private _VkMemoryType13: VkMemoryType
    val mutable private _VkMemoryType14: VkMemoryType
    val mutable private _VkMemoryType15: VkMemoryType
    val mutable private _VkMemoryType16: VkMemoryType
    val mutable private _VkMemoryType17: VkMemoryType
    val mutable private _VkMemoryType18: VkMemoryType
    val mutable private _VkMemoryType19: VkMemoryType
    val mutable private _VkMemoryType20: VkMemoryType
    val mutable private _VkMemoryType21: VkMemoryType
    val mutable private _VkMemoryType22: VkMemoryType
    val mutable private _VkMemoryType23: VkMemoryType
    val mutable private _VkMemoryType24: VkMemoryType
    val mutable private _VkMemoryType25: VkMemoryType
    val mutable private _VkMemoryType26: VkMemoryType
    val mutable private _VkMemoryType27: VkMemoryType
    val mutable private _VkMemoryType28: VkMemoryType
    val mutable private _VkMemoryType29: VkMemoryType
    val mutable private _VkMemoryType30: VkMemoryType
    val mutable private _VkMemoryType31: VkMemoryType

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 32
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 256
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 256)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<VkMemoryType>

[<Struct;StructLayout(LayoutKind.Sequential, Size = 256);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_VkPhysicalDevice_32 =
    val mutable private _VkPhysicalDevice0: VkPhysicalDevice
    val mutable private _VkPhysicalDevice1: VkPhysicalDevice
    val mutable private _VkPhysicalDevice2: VkPhysicalDevice
    val mutable private _VkPhysicalDevice3: VkPhysicalDevice
    val mutable private _VkPhysicalDevice4: VkPhysicalDevice
    val mutable private _VkPhysicalDevice5: VkPhysicalDevice
    val mutable private _VkPhysicalDevice6: VkPhysicalDevice
    val mutable private _VkPhysicalDevice7: VkPhysicalDevice
    val mutable private _VkPhysicalDevice8: VkPhysicalDevice
    val mutable private _VkPhysicalDevice9: VkPhysicalDevice
    val mutable private _VkPhysicalDevice10: VkPhysicalDevice
    val mutable private _VkPhysicalDevice11: VkPhysicalDevice
    val mutable private _VkPhysicalDevice12: VkPhysicalDevice
    val mutable private _VkPhysicalDevice13: VkPhysicalDevice
    val mutable private _VkPhysicalDevice14: VkPhysicalDevice
    val mutable private _VkPhysicalDevice15: VkPhysicalDevice
    val mutable private _VkPhysicalDevice16: VkPhysicalDevice
    val mutable private _VkPhysicalDevice17: VkPhysicalDevice
    val mutable private _VkPhysicalDevice18: VkPhysicalDevice
    val mutable private _VkPhysicalDevice19: VkPhysicalDevice
    val mutable private _VkPhysicalDevice20: VkPhysicalDevice
    val mutable private _VkPhysicalDevice21: VkPhysicalDevice
    val mutable private _VkPhysicalDevice22: VkPhysicalDevice
    val mutable private _VkPhysicalDevice23: VkPhysicalDevice
    val mutable private _VkPhysicalDevice24: VkPhysicalDevice
    val mutable private _VkPhysicalDevice25: VkPhysicalDevice
    val mutable private _VkPhysicalDevice26: VkPhysicalDevice
    val mutable private _VkPhysicalDevice27: VkPhysicalDevice
    val mutable private _VkPhysicalDevice28: VkPhysicalDevice
    val mutable private _VkPhysicalDevice29: VkPhysicalDevice
    val mutable private _VkPhysicalDevice30: VkPhysicalDevice
    val mutable private _VkPhysicalDevice31: VkPhysicalDevice

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 32
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 256
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 256)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<VkPhysicalDevice>

[<Struct;StructLayout(LayoutKind.Sequential, Size = 16);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_byte_16 =
    val mutable private _byte0: byte
    val mutable private _byte1: byte
    val mutable private _byte2: byte
    val mutable private _byte3: byte
    val mutable private _byte4: byte
    val mutable private _byte5: byte
    val mutable private _byte6: byte
    val mutable private _byte7: byte
    val mutable private _byte8: byte
    val mutable private _byte9: byte
    val mutable private _byte10: byte
    val mutable private _byte11: byte
    val mutable private _byte12: byte
    val mutable private _byte13: byte
    val mutable private _byte14: byte
    val mutable private _byte15: byte

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 16
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 16
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 16)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<byte>

[<Struct;StructLayout(LayoutKind.Sequential, Size = 256);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_byte_256 =
    val mutable private _byte0: byte
    val mutable private _byte1: byte
    val mutable private _byte2: byte
    val mutable private _byte3: byte
    val mutable private _byte4: byte
    val mutable private _byte5: byte
    val mutable private _byte6: byte
    val mutable private _byte7: byte
    val mutable private _byte8: byte
    val mutable private _byte9: byte
    val mutable private _byte10: byte
    val mutable private _byte11: byte
    val mutable private _byte12: byte
    val mutable private _byte13: byte
    val mutable private _byte14: byte
    val mutable private _byte15: byte
    val mutable private _byte16: byte
    val mutable private _byte17: byte
    val mutable private _byte18: byte
    val mutable private _byte19: byte
    val mutable private _byte20: byte
    val mutable private _byte21: byte
    val mutable private _byte22: byte
    val mutable private _byte23: byte
    val mutable private _byte24: byte
    val mutable private _byte25: byte
    val mutable private _byte26: byte
    val mutable private _byte27: byte
    val mutable private _byte28: byte
    val mutable private _byte29: byte
    val mutable private _byte30: byte
    val mutable private _byte31: byte
    val mutable private _byte32: byte
    val mutable private _byte33: byte
    val mutable private _byte34: byte
    val mutable private _byte35: byte
    val mutable private _byte36: byte
    val mutable private _byte37: byte
    val mutable private _byte38: byte
    val mutable private _byte39: byte
    val mutable private _byte40: byte
    val mutable private _byte41: byte
    val mutable private _byte42: byte
    val mutable private _byte43: byte
    val mutable private _byte44: byte
    val mutable private _byte45: byte
    val mutable private _byte46: byte
    val mutable private _byte47: byte
    val mutable private _byte48: byte
    val mutable private _byte49: byte
    val mutable private _byte50: byte
    val mutable private _byte51: byte
    val mutable private _byte52: byte
    val mutable private _byte53: byte
    val mutable private _byte54: byte
    val mutable private _byte55: byte
    val mutable private _byte56: byte
    val mutable private _byte57: byte
    val mutable private _byte58: byte
    val mutable private _byte59: byte
    val mutable private _byte60: byte
    val mutable private _byte61: byte
    val mutable private _byte62: byte
    val mutable private _byte63: byte
    val mutable private _byte64: byte
    val mutable private _byte65: byte
    val mutable private _byte66: byte
    val mutable private _byte67: byte
    val mutable private _byte68: byte
    val mutable private _byte69: byte
    val mutable private _byte70: byte
    val mutable private _byte71: byte
    val mutable private _byte72: byte
    val mutable private _byte73: byte
    val mutable private _byte74: byte
    val mutable private _byte75: byte
    val mutable private _byte76: byte
    val mutable private _byte77: byte
    val mutable private _byte78: byte
    val mutable private _byte79: byte
    val mutable private _byte80: byte
    val mutable private _byte81: byte
    val mutable private _byte82: byte
    val mutable private _byte83: byte
    val mutable private _byte84: byte
    val mutable private _byte85: byte
    val mutable private _byte86: byte
    val mutable private _byte87: byte
    val mutable private _byte88: byte
    val mutable private _byte89: byte
    val mutable private _byte90: byte
    val mutable private _byte91: byte
    val mutable private _byte92: byte
    val mutable private _byte93: byte
    val mutable private _byte94: byte
    val mutable private _byte95: byte
    val mutable private _byte96: byte
    val mutable private _byte97: byte
    val mutable private _byte98: byte
    val mutable private _byte99: byte
    val mutable private _byte100: byte
    val mutable private _byte101: byte
    val mutable private _byte102: byte
    val mutable private _byte103: byte
    val mutable private _byte104: byte
    val mutable private _byte105: byte
    val mutable private _byte106: byte
    val mutable private _byte107: byte
    val mutable private _byte108: byte
    val mutable private _byte109: byte
    val mutable private _byte110: byte
    val mutable private _byte111: byte
    val mutable private _byte112: byte
    val mutable private _byte113: byte
    val mutable private _byte114: byte
    val mutable private _byte115: byte
    val mutable private _byte116: byte
    val mutable private _byte117: byte
    val mutable private _byte118: byte
    val mutable private _byte119: byte
    val mutable private _byte120: byte
    val mutable private _byte121: byte
    val mutable private _byte122: byte
    val mutable private _byte123: byte
    val mutable private _byte124: byte
    val mutable private _byte125: byte
    val mutable private _byte126: byte
    val mutable private _byte127: byte
    val mutable private _byte128: byte
    val mutable private _byte129: byte
    val mutable private _byte130: byte
    val mutable private _byte131: byte
    val mutable private _byte132: byte
    val mutable private _byte133: byte
    val mutable private _byte134: byte
    val mutable private _byte135: byte
    val mutable private _byte136: byte
    val mutable private _byte137: byte
    val mutable private _byte138: byte
    val mutable private _byte139: byte
    val mutable private _byte140: byte
    val mutable private _byte141: byte
    val mutable private _byte142: byte
    val mutable private _byte143: byte
    val mutable private _byte144: byte
    val mutable private _byte145: byte
    val mutable private _byte146: byte
    val mutable private _byte147: byte
    val mutable private _byte148: byte
    val mutable private _byte149: byte
    val mutable private _byte150: byte
    val mutable private _byte151: byte
    val mutable private _byte152: byte
    val mutable private _byte153: byte
    val mutable private _byte154: byte
    val mutable private _byte155: byte
    val mutable private _byte156: byte
    val mutable private _byte157: byte
    val mutable private _byte158: byte
    val mutable private _byte159: byte
    val mutable private _byte160: byte
    val mutable private _byte161: byte
    val mutable private _byte162: byte
    val mutable private _byte163: byte
    val mutable private _byte164: byte
    val mutable private _byte165: byte
    val mutable private _byte166: byte
    val mutable private _byte167: byte
    val mutable private _byte168: byte
    val mutable private _byte169: byte
    val mutable private _byte170: byte
    val mutable private _byte171: byte
    val mutable private _byte172: byte
    val mutable private _byte173: byte
    val mutable private _byte174: byte
    val mutable private _byte175: byte
    val mutable private _byte176: byte
    val mutable private _byte177: byte
    val mutable private _byte178: byte
    val mutable private _byte179: byte
    val mutable private _byte180: byte
    val mutable private _byte181: byte
    val mutable private _byte182: byte
    val mutable private _byte183: byte
    val mutable private _byte184: byte
    val mutable private _byte185: byte
    val mutable private _byte186: byte
    val mutable private _byte187: byte
    val mutable private _byte188: byte
    val mutable private _byte189: byte
    val mutable private _byte190: byte
    val mutable private _byte191: byte
    val mutable private _byte192: byte
    val mutable private _byte193: byte
    val mutable private _byte194: byte
    val mutable private _byte195: byte
    val mutable private _byte196: byte
    val mutable private _byte197: byte
    val mutable private _byte198: byte
    val mutable private _byte199: byte
    val mutable private _byte200: byte
    val mutable private _byte201: byte
    val mutable private _byte202: byte
    val mutable private _byte203: byte
    val mutable private _byte204: byte
    val mutable private _byte205: byte
    val mutable private _byte206: byte
    val mutable private _byte207: byte
    val mutable private _byte208: byte
    val mutable private _byte209: byte
    val mutable private _byte210: byte
    val mutable private _byte211: byte
    val mutable private _byte212: byte
    val mutable private _byte213: byte
    val mutable private _byte214: byte
    val mutable private _byte215: byte
    val mutable private _byte216: byte
    val mutable private _byte217: byte
    val mutable private _byte218: byte
    val mutable private _byte219: byte
    val mutable private _byte220: byte
    val mutable private _byte221: byte
    val mutable private _byte222: byte
    val mutable private _byte223: byte
    val mutable private _byte224: byte
    val mutable private _byte225: byte
    val mutable private _byte226: byte
    val mutable private _byte227: byte
    val mutable private _byte228: byte
    val mutable private _byte229: byte
    val mutable private _byte230: byte
    val mutable private _byte231: byte
    val mutable private _byte232: byte
    val mutable private _byte233: byte
    val mutable private _byte234: byte
    val mutable private _byte235: byte
    val mutable private _byte236: byte
    val mutable private _byte237: byte
    val mutable private _byte238: byte
    val mutable private _byte239: byte
    val mutable private _byte240: byte
    val mutable private _byte241: byte
    val mutable private _byte242: byte
    val mutable private _byte243: byte
    val mutable private _byte244: byte
    val mutable private _byte245: byte
    val mutable private _byte246: byte
    val mutable private _byte247: byte
    val mutable private _byte248: byte
    val mutable private _byte249: byte
    val mutable private _byte250: byte
    val mutable private _byte251: byte
    val mutable private _byte252: byte
    val mutable private _byte253: byte
    val mutable private _byte254: byte
    val mutable private _byte255: byte

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 256
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 256
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 256)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<byte>

[<Struct;StructLayout(LayoutKind.Sequential, Size = 8);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_byte_8 =
    val mutable private _byte0: byte
    val mutable private _byte1: byte
    val mutable private _byte2: byte
    val mutable private _byte3: byte
    val mutable private _byte4: byte
    val mutable private _byte5: byte
    val mutable private _byte6: byte
    val mutable private _byte7: byte

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 8
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 8
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 8)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<byte>

[<Struct;StructLayout(LayoutKind.Sequential, Size = 128);UnsafeValueType;DebuggerDisplay("{DebugString}")>]
type VkFixedArray_uint32_32 =
    val mutable private _uint320: uint32
    val mutable private _uint321: uint32
    val mutable private _uint322: uint32
    val mutable private _uint323: uint32
    val mutable private _uint324: uint32
    val mutable private _uint325: uint32
    val mutable private _uint326: uint32
    val mutable private _uint327: uint32
    val mutable private _uint328: uint32
    val mutable private _uint329: uint32
    val mutable private _uint3210: uint32
    val mutable private _uint3211: uint32
    val mutable private _uint3212: uint32
    val mutable private _uint3213: uint32
    val mutable private _uint3214: uint32
    val mutable private _uint3215: uint32
    val mutable private _uint3216: uint32
    val mutable private _uint3217: uint32
    val mutable private _uint3218: uint32
    val mutable private _uint3219: uint32
    val mutable private _uint3220: uint32
    val mutable private _uint3221: uint32
    val mutable private _uint3222: uint32
    val mutable private _uint3223: uint32
    val mutable private _uint3224: uint32
    val mutable private _uint3225: uint32
    val mutable private _uint3226: uint32
    val mutable private _uint3227: uint32
    val mutable private _uint3228: uint32
    val mutable private _uint3229: uint32
    val mutable private _uint3230: uint32
    val mutable private _uint3231: uint32

    member x.Item with get i = NativePtr.get x.UnsafePtr i and set i value = NativePtr.set x.UnsafePtr i value
    member x.Length = 32
    member private x.DebugString =
        let bytes = Array.zeroCreate<byte> 128
        use p = fixed bytes
        Marshal.Copy(&&x |> NativePtr.toNativeInt, bytes, 0, 128)
        let str = UTF8Encoding.UTF8.GetString bytes
        let index = str.IndexOf(char 0)
        if index >= 0 then str.Substring(0, index) else str
    override x.ToString() = x.DebugString
    member x.UnsafePtr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt<uint32>

